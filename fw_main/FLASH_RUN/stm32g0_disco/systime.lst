   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"systime.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.__NVIC_SetPriority,"ax",%progbits
  16              		.align	1
  17              		.arch armv6s-m
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	__NVIC_SetPriority:
  24              	.LFB31:
  25              		.file 1 "../lib/CMSIS//Core/Include/core_cm0plus.h"
   1:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**************************************************************************//**
   2:../lib/CMSIS//Core/Include/core_cm0plus.h ****  * @file     core_cm0plus.h
   3:../lib/CMSIS//Core/Include/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:../lib/CMSIS//Core/Include/core_cm0plus.h ****  * @version  V5.0.6
   5:../lib/CMSIS//Core/Include/core_cm0plus.h ****  * @date     28. May 2018
   6:../lib/CMSIS//Core/Include/core_cm0plus.h ****  ******************************************************************************/
   7:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*
   8:../lib/CMSIS//Core/Include/core_cm0plus.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:../lib/CMSIS//Core/Include/core_cm0plus.h ****  *
  10:../lib/CMSIS//Core/Include/core_cm0plus.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../lib/CMSIS//Core/Include/core_cm0plus.h ****  *
  12:../lib/CMSIS//Core/Include/core_cm0plus.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../lib/CMSIS//Core/Include/core_cm0plus.h ****  * not use this file except in compliance with the License.
  14:../lib/CMSIS//Core/Include/core_cm0plus.h ****  * You may obtain a copy of the License at
  15:../lib/CMSIS//Core/Include/core_cm0plus.h ****  *
  16:../lib/CMSIS//Core/Include/core_cm0plus.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../lib/CMSIS//Core/Include/core_cm0plus.h ****  *
  18:../lib/CMSIS//Core/Include/core_cm0plus.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../lib/CMSIS//Core/Include/core_cm0plus.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../lib/CMSIS//Core/Include/core_cm0plus.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../lib/CMSIS//Core/Include/core_cm0plus.h ****  * See the License for the specific language governing permissions and
  22:../lib/CMSIS//Core/Include/core_cm0plus.h ****  * limitations under the License.
  23:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
  24:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  25:../lib/CMSIS//Core/Include/core_cm0plus.h **** #if   defined ( __ICCARM__ )
  26:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:../lib/CMSIS//Core/Include/core_cm0plus.h **** #elif defined (__clang__)
  28:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #pragma clang system_header   /* treat file as system include file */
  29:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif
  30:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  31:../lib/CMSIS//Core/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
  32:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
  33:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  34:../lib/CMSIS//Core/Include/core_cm0plus.h **** #include <stdint.h>
  35:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  36:../lib/CMSIS//Core/Include/core_cm0plus.h **** #ifdef __cplusplus
  37:../lib/CMSIS//Core/Include/core_cm0plus.h ****  extern "C" {
  38:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif
  39:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  40:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
  41:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:../lib/CMSIS//Core/Include/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  44:../lib/CMSIS//Core/Include/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:../lib/CMSIS//Core/Include/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
  46:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  47:../lib/CMSIS//Core/Include/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:../lib/CMSIS//Core/Include/core_cm0plus.h ****      Unions are used for effective representation of core registers.
  49:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  50:../lib/CMSIS//Core/Include/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:../lib/CMSIS//Core/Include/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  52:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
  53:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  54:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  55:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*******************************************************************************
  56:../lib/CMSIS//Core/Include/core_cm0plus.h ****  *                 CMSIS definitions
  57:../lib/CMSIS//Core/Include/core_cm0plus.h ****  ******************************************************************************/
  58:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
  59:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \ingroup Cortex-M0+
  60:../lib/CMSIS//Core/Include/core_cm0plus.h ****   @{
  61:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
  62:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  63:../lib/CMSIS//Core/Include/core_cm0plus.h **** #include "cmsis_version.h"
  64:../lib/CMSIS//Core/Include/core_cm0plus.h ****  
  65:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*  CMSIS CM0+ definitions */
  66:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [3
  67:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (__CM_CMSIS_VERSION_SUB)                   /*!< \deprecated [1
  68:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
  69:../lib/CMSIS//Core/Include/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< \deprecated CM
  70:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  71:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core 
  72:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  73:../lib/CMSIS//Core/Include/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:../lib/CMSIS//Core/Include/core_cm0plus.h ****     This core does not support an FPU at all
  75:../lib/CMSIS//Core/Include/core_cm0plus.h **** */
  76:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define __FPU_USED       0U
  77:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  78:../lib/CMSIS//Core/Include/core_cm0plus.h **** #if defined ( __CC_ARM )
  79:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
  80:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #endif
  82:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  83:../lib/CMSIS//Core/Include/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #if defined __ARM_PCS_VFP
  85:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #endif
  87:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  88:../lib/CMSIS//Core/Include/core_cm0plus.h **** #elif defined ( __GNUC__ )
  89:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #endif
  92:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  93:../lib/CMSIS//Core/Include/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  94:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #if defined __ARMVFP__
  95:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #endif
  97:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
  98:../lib/CMSIS//Core/Include/core_cm0plus.h **** #elif defined ( __TI_ARM__ )
  99:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #if defined __TI_VFP_SUPPORT__
 100:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #endif
 102:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 103:../lib/CMSIS//Core/Include/core_cm0plus.h **** #elif defined ( __TASKING__ )
 104:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #if defined __FPU_VFP__
 105:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #endif
 107:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 108:../lib/CMSIS//Core/Include/core_cm0plus.h **** #elif defined ( __CSMC__ )
 109:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #if ( __CSMC__ & 0x400U)
 110:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #endif
 112:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 113:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif
 114:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 115:../lib/CMSIS//Core/Include/core_cm0plus.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 117:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 118:../lib/CMSIS//Core/Include/core_cm0plus.h **** #ifdef __cplusplus
 119:../lib/CMSIS//Core/Include/core_cm0plus.h **** }
 120:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif
 121:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 122:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
 123:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 124:../lib/CMSIS//Core/Include/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 125:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 126:../lib/CMSIS//Core/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 127:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 128:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 129:../lib/CMSIS//Core/Include/core_cm0plus.h **** #ifdef __cplusplus
 130:../lib/CMSIS//Core/Include/core_cm0plus.h ****  extern "C" {
 131:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif
 132:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 133:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* check device defines and use defaults */
 134:../lib/CMSIS//Core/Include/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 135:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 136:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000U
 137:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 138:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #endif
 139:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 140:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 141:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #define __MPU_PRESENT             0U
 142:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #endif
 144:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 145:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
 146:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #define __VTOR_PRESENT            0U
 147:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 148:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #endif
 149:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 150:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 151:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2U
 152:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 153:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #endif
 154:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 155:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 156:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0U
 157:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 158:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #endif
 159:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif
 160:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 161:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 162:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 163:../lib/CMSIS//Core/Include/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 164:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 165:../lib/CMSIS//Core/Include/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 166:../lib/CMSIS//Core/Include/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 167:../lib/CMSIS//Core/Include/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 168:../lib/CMSIS//Core/Include/core_cm0plus.h **** */
 169:../lib/CMSIS//Core/Include/core_cm0plus.h **** #ifdef __cplusplus
 170:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 171:../lib/CMSIS//Core/Include/core_cm0plus.h **** #else
 172:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 173:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif
 174:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 175:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 176:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 177:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* following defines should be used for structure members */
 178:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 179:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 180:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 181:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 182:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 183:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 184:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 185:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 186:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*******************************************************************************
 187:../lib/CMSIS//Core/Include/core_cm0plus.h ****  *                 Register Abstraction
 188:../lib/CMSIS//Core/Include/core_cm0plus.h ****   Core Register contain:
 189:../lib/CMSIS//Core/Include/core_cm0plus.h ****   - Core Register
 190:../lib/CMSIS//Core/Include/core_cm0plus.h ****   - Core NVIC Register
 191:../lib/CMSIS//Core/Include/core_cm0plus.h ****   - Core SCB Register
 192:../lib/CMSIS//Core/Include/core_cm0plus.h ****   - Core SysTick Register
 193:../lib/CMSIS//Core/Include/core_cm0plus.h ****   - Core MPU Register
 194:../lib/CMSIS//Core/Include/core_cm0plus.h ****  ******************************************************************************/
 195:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 196:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 197:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 198:../lib/CMSIS//Core/Include/core_cm0plus.h **** */
 199:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 200:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 201:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 202:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 203:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief      Core Register type definitions.
 204:../lib/CMSIS//Core/Include/core_cm0plus.h ****   @{
 205:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 206:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 207:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 208:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 209:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 210:../lib/CMSIS//Core/Include/core_cm0plus.h **** typedef union
 211:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 212:../lib/CMSIS//Core/Include/core_cm0plus.h ****   struct
 213:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 214:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 215:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 216:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 217:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 218:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 219:../lib/CMSIS//Core/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 220:../lib/CMSIS//Core/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 221:../lib/CMSIS//Core/Include/core_cm0plus.h **** } APSR_Type;
 222:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 223:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* APSR Register Definitions */
 224:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 225:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 226:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 227:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 228:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 229:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 230:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 231:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 232:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 233:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 234:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 235:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 236:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 237:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 238:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 240:../lib/CMSIS//Core/Include/core_cm0plus.h **** typedef union
 241:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 242:../lib/CMSIS//Core/Include/core_cm0plus.h ****   struct
 243:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 244:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:../lib/CMSIS//Core/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 247:../lib/CMSIS//Core/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:../lib/CMSIS//Core/Include/core_cm0plus.h **** } IPSR_Type;
 249:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 250:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* IPSR Register Definitions */
 251:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 254:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 255:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 256:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 258:../lib/CMSIS//Core/Include/core_cm0plus.h **** typedef union
 259:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 260:../lib/CMSIS//Core/Include/core_cm0plus.h ****   struct
 261:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 262:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 264:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 265:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 266:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 267:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 268:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 269:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 270:../lib/CMSIS//Core/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 271:../lib/CMSIS//Core/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 272:../lib/CMSIS//Core/Include/core_cm0plus.h **** } xPSR_Type;
 273:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 274:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* xPSR Register Definitions */
 275:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 276:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 277:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 278:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 279:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 280:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 281:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 282:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 283:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 284:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 285:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 286:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 287:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 288:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 289:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 290:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 291:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 292:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 293:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 294:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 295:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief  Union type to access the Control Registers (CONTROL).
 296:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 297:../lib/CMSIS//Core/Include/core_cm0plus.h **** typedef union
 298:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 299:../lib/CMSIS//Core/Include/core_cm0plus.h ****   struct
 300:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 301:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 302:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 303:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 304:../lib/CMSIS//Core/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 305:../lib/CMSIS//Core/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:../lib/CMSIS//Core/Include/core_cm0plus.h **** } CONTROL_Type;
 307:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 308:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* CONTROL Register Definitions */
 309:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 310:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 311:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 312:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 313:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 314:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 315:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 316:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 317:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 318:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 319:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 320:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 321:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief      Type definitions for the NVIC Registers
 322:../lib/CMSIS//Core/Include/core_cm0plus.h ****   @{
 323:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 324:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 325:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 326:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 327:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 328:../lib/CMSIS//Core/Include/core_cm0plus.h **** typedef struct
 329:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 330:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 331:../lib/CMSIS//Core/Include/core_cm0plus.h ****         uint32_t RESERVED0[31U];
 332:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 333:../lib/CMSIS//Core/Include/core_cm0plus.h ****         uint32_t RSERVED1[31U];
 334:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 335:../lib/CMSIS//Core/Include/core_cm0plus.h ****         uint32_t RESERVED2[31U];
 336:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 337:../lib/CMSIS//Core/Include/core_cm0plus.h ****         uint32_t RESERVED3[31U];
 338:../lib/CMSIS//Core/Include/core_cm0plus.h ****         uint32_t RESERVED4[64U];
 339:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 340:../lib/CMSIS//Core/Include/core_cm0plus.h **** }  NVIC_Type;
 341:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 342:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 343:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 344:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 345:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 346:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 347:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 348:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief    Type definitions for the System Control Block Registers
 349:../lib/CMSIS//Core/Include/core_cm0plus.h ****   @{
 350:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 351:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 352:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 353:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief  Structure type to access the System Control Block (SCB).
 354:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 355:../lib/CMSIS//Core/Include/core_cm0plus.h **** typedef struct
 356:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 357:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 358:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 359:../lib/CMSIS//Core/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 360:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 361:../lib/CMSIS//Core/Include/core_cm0plus.h **** #else
 362:../lib/CMSIS//Core/Include/core_cm0plus.h ****         uint32_t RESERVED0;
 363:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif
 364:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 365:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 366:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 367:../lib/CMSIS//Core/Include/core_cm0plus.h ****         uint32_t RESERVED1;
 368:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 369:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 370:../lib/CMSIS//Core/Include/core_cm0plus.h **** } SCB_Type;
 371:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 372:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 373:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 374:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 375:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 376:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 377:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 378:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 379:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 380:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 381:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 382:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 383:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 384:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 385:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 386:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 387:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 388:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 389:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 390:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 391:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 392:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 393:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 394:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 395:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 396:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 397:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 398:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 399:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 400:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 401:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 402:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 403:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 404:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 405:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 406:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 407:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 408:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 409:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 410:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 411:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 412:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 413:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 414:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 415:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 416:../lib/CMSIS//Core/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 417:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 418:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB 
 419:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 420:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif
 421:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 422:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 423:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 424:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 425:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 426:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 427:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 428:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 429:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 430:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 431:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 432:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 433:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 434:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 435:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 436:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 437:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 438:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* SCB System Control Register Definitions */
 439:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 440:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 441:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 442:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 443:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 444:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 445:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 446:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 447:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 448:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 449:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 450:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 451:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 452:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 453:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 454:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 455:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 456:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 457:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 459:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 460:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 461:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 462:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 463:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 464:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 465:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief    Type definitions for the System Timer Registers.
 466:../lib/CMSIS//Core/Include/core_cm0plus.h ****   @{
 467:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 468:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 469:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 470:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief  Structure type to access the System Timer (SysTick).
 471:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 472:../lib/CMSIS//Core/Include/core_cm0plus.h **** typedef struct
 473:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 474:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 475:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 476:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 477:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 478:../lib/CMSIS//Core/Include/core_cm0plus.h **** } SysTick_Type;
 479:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 480:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 481:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 482:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 483:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 484:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 485:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 486:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 487:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 488:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 489:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 490:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 491:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 492:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 493:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 494:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 495:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 496:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 497:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* SysTick Current Register Definitions */
 498:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 499:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 500:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 501:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
 502:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 503:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 504:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 505:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 506:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 507:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 508:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 509:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 510:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 511:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 512:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 513:../lib/CMSIS//Core/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 514:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 515:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 516:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 517:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
 518:../lib/CMSIS//Core/Include/core_cm0plus.h ****   @{
 519:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 520:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 521:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 522:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
 523:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 524:../lib/CMSIS//Core/Include/core_cm0plus.h **** typedef struct
 525:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 526:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
 527:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
 528:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
 529:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 530:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 531:../lib/CMSIS//Core/Include/core_cm0plus.h **** } MPU_Type;
 532:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 533:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_TYPE_RALIASES                  1U
 534:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 535:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* MPU Type Register Definitions */
 536:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
 537:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 538:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 539:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
 540:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 541:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 542:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
 543:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 544:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 545:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* MPU Control Register Definitions */
 546:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
 547:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 548:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 549:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
 550:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 551:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 552:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
 553:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 554:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 555:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* MPU Region Number Register Definitions */
 556:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
 557:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 558:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 559:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* MPU Region Base Address Register Definitions */
 560:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU 
 561:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
 562:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 563:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
 564:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 565:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 566:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
 567:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 568:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 569:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* MPU Region Attribute and Size Register Definitions */
 570:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
 571:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 572:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 573:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
 574:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 575:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 576:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
 577:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 578:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 579:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
 580:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 581:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 582:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
 583:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 584:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 585:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
 586:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 587:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 588:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
 589:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 590:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 591:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
 592:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 593:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 594:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
 595:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 596:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 597:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
 598:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 599:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 600:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 601:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif
 602:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 603:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 604:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 605:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 606:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 607:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ov
 608:../lib/CMSIS//Core/Include/core_cm0plus.h ****             Therefore they are not covered by the Cortex-M0+ header file.
 609:../lib/CMSIS//Core/Include/core_cm0plus.h ****   @{
 610:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 611:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 612:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 613:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 614:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 615:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 616:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 617:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 618:../lib/CMSIS//Core/Include/core_cm0plus.h ****   @{
 619:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 620:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 621:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 622:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 623:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 624:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 625:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \return           Masked and shifted value.
 626:../lib/CMSIS//Core/Include/core_cm0plus.h **** */
 627:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 628:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 629:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 630:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 631:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 632:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 633:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \return           Masked and shifted bit field value.
 634:../lib/CMSIS//Core/Include/core_cm0plus.h **** */
 635:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 636:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 637:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*@} end of group CMSIS_core_bitfield */
 638:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 639:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 640:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 641:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 642:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_base     Core Definitions
 643:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief      Definitions for base addresses, unions, and structures.
 644:../lib/CMSIS//Core/Include/core_cm0plus.h ****   @{
 645:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 646:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 647:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* Memory mapping of Core Hardware */
 648:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 649:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 650:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 651:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 652:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 653:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 654:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 655:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 656:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 657:../lib/CMSIS//Core/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 658:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
 659:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
 660:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif
 661:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 662:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*@} */
 663:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 664:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 665:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 666:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*******************************************************************************
 667:../lib/CMSIS//Core/Include/core_cm0plus.h ****  *                Hardware Abstraction Layer
 668:../lib/CMSIS//Core/Include/core_cm0plus.h ****   Core Function Interface contains:
 669:../lib/CMSIS//Core/Include/core_cm0plus.h ****   - Core NVIC Functions
 670:../lib/CMSIS//Core/Include/core_cm0plus.h ****   - Core SysTick Functions
 671:../lib/CMSIS//Core/Include/core_cm0plus.h ****   - Core Register Access Functions
 672:../lib/CMSIS//Core/Include/core_cm0plus.h ****  ******************************************************************************/
 673:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 674:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 675:../lib/CMSIS//Core/Include/core_cm0plus.h **** */
 676:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 677:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 678:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 679:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 680:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 681:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
 682:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 683:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 684:../lib/CMSIS//Core/Include/core_cm0plus.h ****   @{
 685:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 686:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 687:../lib/CMSIS//Core/Include/core_cm0plus.h **** #ifdef CMSIS_NVIC_VIRTUAL
 688:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 689:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 690:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #endif
 691:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 692:../lib/CMSIS//Core/Include/core_cm0plus.h **** #else
 693:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 694:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 695:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 696:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 697:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 698:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 699:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 700:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 701:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
 702:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 703:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 704:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 705:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 706:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 707:../lib/CMSIS//Core/Include/core_cm0plus.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 708:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 709:../lib/CMSIS//Core/Include/core_cm0plus.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 710:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #endif
 711:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 712:../lib/CMSIS//Core/Include/core_cm0plus.h **** #else
 713:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define NVIC_SetVector              __NVIC_SetVector
 714:../lib/CMSIS//Core/Include/core_cm0plus.h ****   #define NVIC_GetVector              __NVIC_GetVector
 715:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 716:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 717:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define NVIC_USER_IRQ_OFFSET          16
 718:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 719:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 720:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 721:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 722:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 723:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 724:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 725:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 726:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 727:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
 728:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 729:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 730:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 731:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 732:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 733:../lib/CMSIS//Core/Include/core_cm0plus.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 734:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 735:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 736:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief   Enable Interrupt
 737:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 738:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 739:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 740:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 741:../lib/CMSIS//Core/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 742:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 743:../lib/CMSIS//Core/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 744:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 745:../lib/CMSIS//Core/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 746:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 747:../lib/CMSIS//Core/Include/core_cm0plus.h **** }
 748:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 749:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 750:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 751:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief   Get Interrupt Enable status
 752:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 753:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 754:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \return             0  Interrupt is not enabled.
 755:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \return             1  Interrupt is enabled.
 756:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 757:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 758:../lib/CMSIS//Core/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 759:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 760:../lib/CMSIS//Core/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 761:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 762:../lib/CMSIS//Core/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 763:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 764:../lib/CMSIS//Core/Include/core_cm0plus.h ****   else
 765:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 766:../lib/CMSIS//Core/Include/core_cm0plus.h ****     return(0U);
 767:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 768:../lib/CMSIS//Core/Include/core_cm0plus.h **** }
 769:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 770:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 771:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 772:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief   Disable Interrupt
 773:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 774:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 775:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 776:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 777:../lib/CMSIS//Core/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 778:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 779:../lib/CMSIS//Core/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 780:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 781:../lib/CMSIS//Core/Include/core_cm0plus.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 782:../lib/CMSIS//Core/Include/core_cm0plus.h ****     __DSB();
 783:../lib/CMSIS//Core/Include/core_cm0plus.h ****     __ISB();
 784:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 785:../lib/CMSIS//Core/Include/core_cm0plus.h **** }
 786:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 787:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 788:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 789:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief   Get Pending Interrupt
 790:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 791:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 792:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \return             0  Interrupt status is not pending.
 793:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \return             1  Interrupt status is pending.
 794:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 795:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 796:../lib/CMSIS//Core/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 797:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 798:../lib/CMSIS//Core/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 799:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 800:../lib/CMSIS//Core/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 801:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 802:../lib/CMSIS//Core/Include/core_cm0plus.h ****   else
 803:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 804:../lib/CMSIS//Core/Include/core_cm0plus.h ****     return(0U);
 805:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 806:../lib/CMSIS//Core/Include/core_cm0plus.h **** }
 807:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 808:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 809:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 810:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief   Set Pending Interrupt
 811:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 812:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 813:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 814:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 815:../lib/CMSIS//Core/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 816:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 817:../lib/CMSIS//Core/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 818:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 819:../lib/CMSIS//Core/Include/core_cm0plus.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 820:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 821:../lib/CMSIS//Core/Include/core_cm0plus.h **** }
 822:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 823:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 824:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 825:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief   Clear Pending Interrupt
 826:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 827:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 828:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 829:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 830:../lib/CMSIS//Core/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 831:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 832:../lib/CMSIS//Core/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 833:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 834:../lib/CMSIS//Core/Include/core_cm0plus.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 835:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 836:../lib/CMSIS//Core/Include/core_cm0plus.h **** }
 837:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 838:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 839:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 840:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief   Set Interrupt Priority
 841:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 842:../lib/CMSIS//Core/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 843:../lib/CMSIS//Core/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 844:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]      IRQn  Interrupt number.
 845:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]  priority  Priority to set.
 846:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \note    The priority cannot be set for every processor exception.
 847:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 848:../lib/CMSIS//Core/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 849:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
  26              		.loc 1 849 1
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 90B5     		push	{r4, r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 4, -12
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 83B0     		sub	sp, sp, #12
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 0200     		movs	r2, r0
  43 0008 3960     		str	r1, [r7]
  44 000a FB1D     		adds	r3, r7, #7
  45 000c 1A70     		strb	r2, [r3]
 850:../lib/CMSIS//Core/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
  46              		.loc 1 850 6
  47 000e FB1D     		adds	r3, r7, #7
  48 0010 1B78     		ldrb	r3, [r3]
  49 0012 7F2B     		cmp	r3, #127
  50 0014 28D8     		bhi	.L2
 851:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 852:../lib/CMSIS//Core/Include/core_cm0plus.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
  51              		.loc 1 852 48
  52 0016 2F4A     		ldr	r2, .L5
  53              		.loc 1 852 53
  54 0018 FB1D     		adds	r3, r7, #7
  55 001a 1B78     		ldrb	r3, [r3]
  56 001c 5BB2     		sxtb	r3, r3
  57 001e 9B08     		lsrs	r3, r3, #2
  58              		.loc 1 852 52
  59 0020 C033     		adds	r3, r3, #192
  60 0022 9B00     		lsls	r3, r3, #2
  61 0024 9B58     		ldr	r3, [r3, r2]
  62              		.loc 1 852 83
  63 0026 FA1D     		adds	r2, r7, #7
  64 0028 1278     		ldrb	r2, [r2]
  65 002a 1100     		movs	r1, r2
  66 002c 0322     		movs	r2, #3
  67 002e 0A40     		ands	r2, r1
  68 0030 D200     		lsls	r2, r2, #3
  69              		.loc 1 852 80
  70 0032 FF21     		movs	r1, #255
  71 0034 9140     		lsls	r1, r1, r2
  72 0036 0A00     		movs	r2, r1
  73              		.loc 1 852 71
  74 0038 D243     		mvns	r2, r2
  75              		.loc 1 852 33
  76 003a 1A40     		ands	r2, r3
  77 003c 1100     		movs	r1, r2
 853:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  78              		.loc 1 853 20
  79 003e 3B68     		ldr	r3, [r7]
  80 0040 9B01     		lsls	r3, r3, #6
  81              		.loc 1 853 48
  82 0042 FF22     		movs	r2, #255
  83 0044 1A40     		ands	r2, r3
  84              		.loc 1 853 71
  85 0046 FB1D     		adds	r3, r7, #7
  86 0048 1B78     		ldrb	r3, [r3]
  87 004a 1800     		movs	r0, r3
  88 004c 0323     		movs	r3, #3
  89 004e 0340     		ands	r3, r0
  90 0050 DB00     		lsls	r3, r3, #3
  91              		.loc 1 853 68
  92 0052 9A40     		lsls	r2, r2, r3
 852:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  93              		.loc 1 852 9
  94 0054 1F48     		ldr	r0, .L5
 852:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  95              		.loc 1 852 14
  96 0056 FB1D     		adds	r3, r7, #7
  97 0058 1B78     		ldrb	r3, [r3]
  98 005a 5BB2     		sxtb	r3, r3
  99 005c 9B08     		lsrs	r3, r3, #2
 852:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 100              		.loc 1 852 102
 101 005e 0A43     		orrs	r2, r1
 852:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 102              		.loc 1 852 30
 103 0060 C033     		adds	r3, r3, #192
 104 0062 9B00     		lsls	r3, r3, #2
 105 0064 1A50     		str	r2, [r3, r0]
 854:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 855:../lib/CMSIS//Core/Include/core_cm0plus.h ****   else
 856:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 857:../lib/CMSIS//Core/Include/core_cm0plus.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 858:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 859:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 860:../lib/CMSIS//Core/Include/core_cm0plus.h **** }
 106              		.loc 1 860 1
 107 0066 31E0     		b	.L4
 108              	.L2:
 857:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 109              		.loc 1 857 47
 110 0068 1B4A     		ldr	r2, .L5+4
 857:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 111              		.loc 1 857 53
 112 006a FB1D     		adds	r3, r7, #7
 113 006c 1B78     		ldrb	r3, [r3]
 114 006e 1900     		movs	r1, r3
 115 0070 0F23     		movs	r3, #15
 116 0072 0B40     		ands	r3, r1
 117 0074 083B     		subs	r3, r3, #8
 118 0076 9B08     		lsrs	r3, r3, #2
 857:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 119              		.loc 1 857 52
 120 0078 0633     		adds	r3, r3, #6
 121 007a 9B00     		lsls	r3, r3, #2
 122 007c D318     		adds	r3, r2, r3
 123 007e 0433     		adds	r3, r3, #4
 124 0080 1B68     		ldr	r3, [r3]
 857:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 125              		.loc 1 857 83
 126 0082 FA1D     		adds	r2, r7, #7
 127 0084 1278     		ldrb	r2, [r2]
 128 0086 1100     		movs	r1, r2
 129 0088 0322     		movs	r2, #3
 130 008a 0A40     		ands	r2, r1
 131 008c D200     		lsls	r2, r2, #3
 857:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 132              		.loc 1 857 80
 133 008e FF21     		movs	r1, #255
 134 0090 9140     		lsls	r1, r1, r2
 135 0092 0A00     		movs	r2, r1
 857:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 136              		.loc 1 857 71
 137 0094 D243     		mvns	r2, r2
 857:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 138              		.loc 1 857 33
 139 0096 1A40     		ands	r2, r3
 140 0098 1100     		movs	r1, r2
 858:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 141              		.loc 1 858 20
 142 009a 3B68     		ldr	r3, [r7]
 143 009c 9B01     		lsls	r3, r3, #6
 858:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 144              		.loc 1 858 48
 145 009e FF22     		movs	r2, #255
 146 00a0 1A40     		ands	r2, r3
 858:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 147              		.loc 1 858 71
 148 00a2 FB1D     		adds	r3, r7, #7
 149 00a4 1B78     		ldrb	r3, [r3]
 150 00a6 1800     		movs	r0, r3
 151 00a8 0323     		movs	r3, #3
 152 00aa 0340     		ands	r3, r0
 153 00ac DB00     		lsls	r3, r3, #3
 858:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 154              		.loc 1 858 68
 155 00ae 9A40     		lsls	r2, r2, r3
 857:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 156              		.loc 1 857 8
 157 00b0 0948     		ldr	r0, .L5+4
 857:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 158              		.loc 1 857 14
 159 00b2 FB1D     		adds	r3, r7, #7
 160 00b4 1B78     		ldrb	r3, [r3]
 161 00b6 1C00     		movs	r4, r3
 162 00b8 0F23     		movs	r3, #15
 163 00ba 2340     		ands	r3, r4
 164 00bc 083B     		subs	r3, r3, #8
 165 00be 9B08     		lsrs	r3, r3, #2
 857:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 166              		.loc 1 857 102
 167 00c0 0A43     		orrs	r2, r1
 857:../lib/CMSIS//Core/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 168              		.loc 1 857 30
 169 00c2 0633     		adds	r3, r3, #6
 170 00c4 9B00     		lsls	r3, r3, #2
 171 00c6 C318     		adds	r3, r0, r3
 172 00c8 0433     		adds	r3, r3, #4
 173 00ca 1A60     		str	r2, [r3]
 174              	.L4:
 175              		.loc 1 860 1
 176 00cc C046     		nop
 177 00ce BD46     		mov	sp, r7
 178 00d0 03B0     		add	sp, sp, #12
 179              		@ sp needed
 180 00d2 90BD     		pop	{r4, r7, pc}
 181              	.L6:
 182              		.align	2
 183              	.L5:
 184 00d4 00E100E0 		.word	-536813312
 185 00d8 00ED00E0 		.word	-536810240
 186              		.cfi_endproc
 187              	.LFE31:
 189              		.section	.text.SysTick_Config,"ax",%progbits
 190              		.align	1
 191              		.syntax unified
 192              		.code	16
 193              		.thumb_func
 194              		.fpu softvfp
 196              	SysTick_Config:
 197              	.LFB46:
 861:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 862:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 863:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 864:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief   Get Interrupt Priority
 865:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
 866:../lib/CMSIS//Core/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 867:../lib/CMSIS//Core/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 868:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]   IRQn  Interrupt number.
 869:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \return             Interrupt Priority.
 870:../lib/CMSIS//Core/Include/core_cm0plus.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 871:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 872:../lib/CMSIS//Core/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
 873:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 874:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 875:../lib/CMSIS//Core/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 876:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 877:../lib/CMSIS//Core/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 878:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 879:../lib/CMSIS//Core/Include/core_cm0plus.h ****   else
 880:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 881:../lib/CMSIS//Core/Include/core_cm0plus.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 882:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 883:../lib/CMSIS//Core/Include/core_cm0plus.h **** }
 884:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 885:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 886:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 887:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief   Encode Priority
 888:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \details Encodes the priority for an interrupt with the given priority group,
 889:../lib/CMSIS//Core/Include/core_cm0plus.h ****            preemptive priority value, and subpriority value.
 890:../lib/CMSIS//Core/Include/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 891:../lib/CMSIS//Core/Include/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
 892:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 893:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
 894:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
 895:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
 896:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 897:../lib/CMSIS//Core/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
 898:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 899:../lib/CMSIS//Core/Include/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 900:../lib/CMSIS//Core/Include/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 901:../lib/CMSIS//Core/Include/core_cm0plus.h ****   uint32_t SubPriorityBits;
 902:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 903:../lib/CMSIS//Core/Include/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 904:../lib/CMSIS//Core/Include/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 905:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 906:../lib/CMSIS//Core/Include/core_cm0plus.h ****   return (
 907:../lib/CMSIS//Core/Include/core_cm0plus.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 908:../lib/CMSIS//Core/Include/core_cm0plus.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 909:../lib/CMSIS//Core/Include/core_cm0plus.h ****          );
 910:../lib/CMSIS//Core/Include/core_cm0plus.h **** }
 911:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 912:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 913:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 914:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief   Decode Priority
 915:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \details Decodes an interrupt priority value with a given priority group to
 916:../lib/CMSIS//Core/Include/core_cm0plus.h ****            preemptive priority value and subpriority value.
 917:../lib/CMSIS//Core/Include/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 918:../lib/CMSIS//Core/Include/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 919:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
 920:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 921:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
 922:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
 923:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 924:../lib/CMSIS//Core/Include/core_cm0plus.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
 925:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 926:../lib/CMSIS//Core/Include/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 927:../lib/CMSIS//Core/Include/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 928:../lib/CMSIS//Core/Include/core_cm0plus.h ****   uint32_t SubPriorityBits;
 929:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 930:../lib/CMSIS//Core/Include/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 931:../lib/CMSIS//Core/Include/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 932:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 933:../lib/CMSIS//Core/Include/core_cm0plus.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
 934:../lib/CMSIS//Core/Include/core_cm0plus.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 935:../lib/CMSIS//Core/Include/core_cm0plus.h **** }
 936:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 937:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 938:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 939:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief   Set Interrupt Vector
 940:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
 941:../lib/CMSIS//Core/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 942:../lib/CMSIS//Core/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 943:../lib/CMSIS//Core/Include/core_cm0plus.h ****            VTOR must been relocated to SRAM before.
 944:../lib/CMSIS//Core/Include/core_cm0plus.h ****            If VTOR is not present address 0 must be mapped to SRAM.
 945:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number
 946:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]   vector    Address of interrupt handler function
 947:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 948:../lib/CMSIS//Core/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
 949:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 950:../lib/CMSIS//Core/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 951:../lib/CMSIS//Core/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
 952:../lib/CMSIS//Core/Include/core_cm0plus.h **** #else
 953:../lib/CMSIS//Core/Include/core_cm0plus.h ****     uint32_t *vectors = (uint32_t *)0x0U;
 954:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif
 955:../lib/CMSIS//Core/Include/core_cm0plus.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
 956:../lib/CMSIS//Core/Include/core_cm0plus.h **** }
 957:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 958:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 959:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 960:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief   Get Interrupt Vector
 961:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \details Reads an interrupt vector from interrupt vector table.
 962:../lib/CMSIS//Core/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 963:../lib/CMSIS//Core/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 964:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number.
 965:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \return                 Address of interrupt handler function
 966:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 967:../lib/CMSIS//Core/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
 968:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 969:../lib/CMSIS//Core/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 970:../lib/CMSIS//Core/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
 971:../lib/CMSIS//Core/Include/core_cm0plus.h **** #else
 972:../lib/CMSIS//Core/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)0x0U;
 973:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif
 974:../lib/CMSIS//Core/Include/core_cm0plus.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
 975:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 976:../lib/CMSIS//Core/Include/core_cm0plus.h **** }
 977:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 978:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 979:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
 980:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief   System Reset
 981:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \details Initiates a system reset request to reset the MCU.
 982:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
 983:../lib/CMSIS//Core/Include/core_cm0plus.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
 984:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 985:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __DSB();                                                          /* Ensure all outstanding memor
 986:../lib/CMSIS//Core/Include/core_cm0plus.h ****                                                                        buffered write are completed
 987:../lib/CMSIS//Core/Include/core_cm0plus.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 988:../lib/CMSIS//Core/Include/core_cm0plus.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 989:../lib/CMSIS//Core/Include/core_cm0plus.h ****   __DSB();                                                          /* Ensure completion of memory 
 990:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 991:../lib/CMSIS//Core/Include/core_cm0plus.h ****   for(;;)                                                           /* wait until reset */
 992:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
 993:../lib/CMSIS//Core/Include/core_cm0plus.h ****     __NOP();
 994:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
 995:../lib/CMSIS//Core/Include/core_cm0plus.h **** }
 996:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 997:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*@} end of CMSIS_Core_NVICFunctions */
 998:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
 999:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* ##########################  MPU functions  #################################### */
1000:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
1001:../lib/CMSIS//Core/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1002:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
1003:../lib/CMSIS//Core/Include/core_cm0plus.h **** #include "mpu_armv7.h"
1004:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
1005:../lib/CMSIS//Core/Include/core_cm0plus.h **** #endif
1006:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
1007:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* ##########################  FPU functions  #################################### */
1008:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
1009:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
1010:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FpuFunctions FPU Functions
1011:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief    Function that provides FPU type.
1012:../lib/CMSIS//Core/Include/core_cm0plus.h ****   @{
1013:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
1014:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
1015:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
1016:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief   get FPU type
1017:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \details returns the FPU type
1018:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \returns
1019:../lib/CMSIS//Core/Include/core_cm0plus.h ****    - \b  0: No FPU
1020:../lib/CMSIS//Core/Include/core_cm0plus.h ****    - \b  1: Single precision FPU
1021:../lib/CMSIS//Core/Include/core_cm0plus.h ****    - \b  2: Double + Single precision FPU
1022:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
1023:../lib/CMSIS//Core/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t SCB_GetFPUType(void)
1024:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
1025:../lib/CMSIS//Core/Include/core_cm0plus.h ****     return 0U;           /* No FPU */
1026:../lib/CMSIS//Core/Include/core_cm0plus.h **** }
1027:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
1028:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
1029:../lib/CMSIS//Core/Include/core_cm0plus.h **** /*@} end of CMSIS_Core_FpuFunctions */
1030:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
1031:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
1032:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
1033:../lib/CMSIS//Core/Include/core_cm0plus.h **** /* ##################################    SysTick function  ########################################
1034:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
1035:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
1036:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1037:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief    Functions that configure the System.
1038:../lib/CMSIS//Core/Include/core_cm0plus.h ****   @{
1039:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
1040:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
1041:../lib/CMSIS//Core/Include/core_cm0plus.h **** #if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
1042:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
1043:../lib/CMSIS//Core/Include/core_cm0plus.h **** /**
1044:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \brief   System Tick Configuration
1045:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
1046:../lib/CMSIS//Core/Include/core_cm0plus.h ****            Counter is in free running mode to generate periodic interrupts.
1047:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \param [in]  ticks  Number of ticks between two interrupts.
1048:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \return          0  Function succeeded.
1049:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \return          1  Function failed.
1050:../lib/CMSIS//Core/Include/core_cm0plus.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1051:../lib/CMSIS//Core/Include/core_cm0plus.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
1052:../lib/CMSIS//Core/Include/core_cm0plus.h ****            must contain a vendor-specific implementation of this function.
1053:../lib/CMSIS//Core/Include/core_cm0plus.h ****  */
1054:../lib/CMSIS//Core/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
1055:../lib/CMSIS//Core/Include/core_cm0plus.h **** {
 198              		.loc 1 1055 1
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 8
 201              		@ frame_needed = 1, uses_anonymous_args = 0
 202 0000 80B5     		push	{r7, lr}
 203              	.LCFI3:
 204              		.cfi_def_cfa_offset 8
 205              		.cfi_offset 7, -8
 206              		.cfi_offset 14, -4
 207 0002 82B0     		sub	sp, sp, #8
 208              	.LCFI4:
 209              		.cfi_def_cfa_offset 16
 210 0004 00AF     		add	r7, sp, #0
 211              	.LCFI5:
 212              		.cfi_def_cfa_register 7
 213 0006 7860     		str	r0, [r7, #4]
1056:../lib/CMSIS//Core/Include/core_cm0plus.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 214              		.loc 1 1056 14
 215 0008 7B68     		ldr	r3, [r7, #4]
 216 000a 5A1E     		subs	r2, r3, #1
 217              		.loc 1 1056 6
 218 000c 8023     		movs	r3, #128
 219 000e 5B04     		lsls	r3, r3, #17
 220 0010 9A42     		cmp	r2, r3
 221 0012 01D3     		bcc	.L8
1057:../lib/CMSIS//Core/Include/core_cm0plus.h ****   {
1058:../lib/CMSIS//Core/Include/core_cm0plus.h ****     return (1UL);                                                   /* Reload value impossible */
 222              		.loc 1 1058 12
 223 0014 0123     		movs	r3, #1
 224 0016 10E0     		b	.L9
 225              	.L8:
1059:../lib/CMSIS//Core/Include/core_cm0plus.h ****   }
1060:../lib/CMSIS//Core/Include/core_cm0plus.h **** 
1061:../lib/CMSIS//Core/Include/core_cm0plus.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 226              		.loc 1 1061 10
 227 0018 0A4B     		ldr	r3, .L10
 228              		.loc 1 1061 20
 229 001a 7A68     		ldr	r2, [r7, #4]
 230 001c 013A     		subs	r2, r2, #1
 231              		.loc 1 1061 18
 232 001e 5A60     		str	r2, [r3, #4]
1062:../lib/CMSIS//Core/Include/core_cm0plus.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
 233              		.loc 1 1062 3
 234 0020 0123     		movs	r3, #1
 235 0022 5B42     		rsbs	r3, r3, #0
 236 0024 0321     		movs	r1, #3
 237 0026 1800     		movs	r0, r3
 238 0028 FFF7FEFF 		bl	__NVIC_SetPriority
1063:../lib/CMSIS//Core/Include/core_cm0plus.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 239              		.loc 1 1063 10
 240 002c 054B     		ldr	r3, .L10
 241              		.loc 1 1063 18
 242 002e 0022     		movs	r2, #0
 243 0030 9A60     		str	r2, [r3, #8]
1064:../lib/CMSIS//Core/Include/core_cm0plus.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 244              		.loc 1 1064 10
 245 0032 044B     		ldr	r3, .L10
 246              		.loc 1 1064 18
 247 0034 0722     		movs	r2, #7
 248 0036 1A60     		str	r2, [r3]
1065:../lib/CMSIS//Core/Include/core_cm0plus.h ****                    SysTick_CTRL_TICKINT_Msk   |
1066:../lib/CMSIS//Core/Include/core_cm0plus.h ****                    SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTi
1067:../lib/CMSIS//Core/Include/core_cm0plus.h ****   return (0UL);                                                     /* Function successful */
 249              		.loc 1 1067 10
 250 0038 0023     		movs	r3, #0
 251              	.L9:
1068:../lib/CMSIS//Core/Include/core_cm0plus.h **** }
 252              		.loc 1 1068 1
 253 003a 1800     		movs	r0, r3
 254 003c BD46     		mov	sp, r7
 255 003e 02B0     		add	sp, sp, #8
 256              		@ sp needed
 257 0040 80BD     		pop	{r7, pc}
 258              	.L11:
 259 0042 C046     		.align	2
 260              	.L10:
 261 0044 10E000E0 		.word	-536813552
 262              		.cfi_endproc
 263              	.LFE46:
 265              		.comm	systime_timer,80,4
 266              		.global	systime_localtime
 267              		.section	.bss.systime_localtime,"aw",%nobits
 268              		.align	2
 271              	systime_localtime:
 272 0000 00000000 		.space	4
 273              		.global	__aeabi_uidiv
 274              		.section	.text.systime_init,"ax",%progbits
 275              		.align	1
 276              		.global	systime_init
 277              		.syntax unified
 278              		.code	16
 279              		.thumb_func
 280              		.fpu softvfp
 282              	systime_init:
 283              	.LFB47:
 284              		.file 2 "../common/systime.c"
   1:../common/systime.c **** #include "platform.h"
   2:../common/systime.c **** 
   3:../common/systime.c **** #include "config.h"
   4:../common/systime.c **** #include "systime.h"
   5:../common/systime.c **** 
   6:../common/systime.c **** struct {
   7:../common/systime.c **** 	uint8_t active:1;
   8:../common/systime.c **** 	uint8_t oneshot:1;
   9:../common/systime.c **** 
  10:../common/systime.c **** 	uint32_t time_last;
  11:../common/systime.c **** 	uint32_t period;
  12:../common/systime.c **** 
  13:../common/systime.c **** 	timer_fnc fnc;
  14:../common/systime.c **** 
  15:../common/systime.c **** } systime_timer[SYSTIME_TIMERS];
  16:../common/systime.c **** 
  17:../common/systime.c **** volatile uint32_t systime_localtime = 0;
  18:../common/systime.c **** 
  19:../common/systime.c **** void systime_init()
  20:../common/systime.c **** {
 285              		.loc 2 20 1
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 8
 288              		@ frame_needed = 1, uses_anonymous_args = 0
 289 0000 90B5     		push	{r4, r7, lr}
 290              	.LCFI6:
 291              		.cfi_def_cfa_offset 12
 292              		.cfi_offset 4, -12
 293              		.cfi_offset 7, -8
 294              		.cfi_offset 14, -4
 295 0002 83B0     		sub	sp, sp, #12
 296              	.LCFI7:
 297              		.cfi_def_cfa_offset 24
 298 0004 00AF     		add	r7, sp, #0
 299              	.LCFI8:
 300              		.cfi_def_cfa_register 7
 301 0006 4B46     		mov	r3, r9
  21:../common/systime.c **** 	uint32_t i;
  22:../common/systime.c **** 
  23:../common/systime.c **** 	systime_localtime = 0;
 302              		.loc 2 23 20
 303 0008 144A     		ldr	r2, .L15
 304 000a 9A58     		ldr	r2, [r3, r2]
 305 000c 0021     		movs	r1, #0
 306 000e 1160     		str	r1, [r2]
  24:../common/systime.c **** 
  25:../common/systime.c **** 	for (i = 0; i < SYSTIME_TIMERS; i++) {
 307              		.loc 2 25 9
 308 0010 0022     		movs	r2, #0
 309 0012 7A60     		str	r2, [r7, #4]
 310              		.loc 2 25 2
 311 0014 0AE0     		b	.L13
 312              	.L14:
  26:../common/systime.c **** 		systime_timer[i].active = 0;
 313              		.loc 2 26 27 discriminator 3
 314 0016 124A     		ldr	r2, .L15+4
 315 0018 9A58     		ldr	r2, [r3, r2]
 316 001a 7968     		ldr	r1, [r7, #4]
 317 001c 0901     		lsls	r1, r1, #4
 318 001e 885C     		ldrb	r0, [r1, r2]
 319 0020 0124     		movs	r4, #1
 320 0022 A043     		bics	r0, r4
 321 0024 8854     		strb	r0, [r1, r2]
  25:../common/systime.c **** 		systime_timer[i].active = 0;
 322              		.loc 2 25 35 discriminator 3
 323 0026 7A68     		ldr	r2, [r7, #4]
 324 0028 0132     		adds	r2, r2, #1
 325 002a 7A60     		str	r2, [r7, #4]
 326              	.L13:
  25:../common/systime.c **** 		systime_timer[i].active = 0;
 327              		.loc 2 25 2 discriminator 1
 328 002c 7A68     		ldr	r2, [r7, #4]
 329 002e 042A     		cmp	r2, #4
 330 0030 F1D9     		bls	.L14
  27:../common/systime.c **** 	}
  28:../common/systime.c **** 
  29:../common/systime.c **** 	SysTick_Config(SystemCoreClock / 100);
 331              		.loc 2 29 2
 332 0032 0C4A     		ldr	r2, .L15+8
 333 0034 9B58     		ldr	r3, [r3, r2]
 334 0036 1B68     		ldr	r3, [r3]
 335 0038 6421     		movs	r1, #100
 336 003a 1800     		movs	r0, r3
 337 003c FFF7FEFF 		bl	__aeabi_uidiv
 338              	.LVL0:
 339 0040 0300     		movs	r3, r0
 340 0042 1800     		movs	r0, r3
 341 0044 FFF7FEFF 		bl	SysTick_Config
  30:../common/systime.c **** 
  31:../common/systime.c **** 	/* Update the SysTick IRQ priority should be higher than the Ethernet IRQ */
  32:../common/systime.c **** 	/* The Localtime should be updated during the Ethernet packets processing */
  33:../common/systime.c **** 	NVIC_SetPriority (SysTick_IRQn, 1);
 342              		.loc 2 33 2
 343 0048 0123     		movs	r3, #1
 344 004a 5B42     		rsbs	r3, r3, #0
 345 004c 0121     		movs	r1, #1
 346 004e 1800     		movs	r0, r3
 347 0050 FFF7FEFF 		bl	__NVIC_SetPriority
  34:../common/systime.c **** }
 348              		.loc 2 34 1
 349 0054 C046     		nop
 350 0056 BD46     		mov	sp, r7
 351 0058 03B0     		add	sp, sp, #12
 352              		@ sp needed
 353 005a 90BD     		pop	{r4, r7, pc}
 354              	.L16:
 355              		.align	2
 356              	.L15:
 357 005c 00000000 		.word	systime_localtime(GOT)
 358 0060 00000000 		.word	systime_timer(GOT)
 359 0064 00000000 		.word	SystemCoreClock(GOT)
 360              		.cfi_endproc
 361              	.LFE47:
 363              		.section	.text.systime_periodic,"ax",%progbits
 364              		.align	1
 365              		.global	systime_periodic
 366              		.syntax unified
 367              		.code	16
 368              		.thumb_func
 369              		.fpu softvfp
 371              	systime_periodic:
 372              	.LFB48:
  35:../common/systime.c **** 
  36:../common/systime.c **** void systime_periodic(void)
  37:../common/systime.c **** {
 373              		.loc 2 37 1
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 8
 376              		@ frame_needed = 1, uses_anonymous_args = 0
 377 0000 90B5     		push	{r4, r7, lr}
 378              	.LCFI9:
 379              		.cfi_def_cfa_offset 12
 380              		.cfi_offset 4, -12
 381              		.cfi_offset 7, -8
 382              		.cfi_offset 14, -4
 383 0002 83B0     		sub	sp, sp, #12
 384              	.LCFI10:
 385              		.cfi_def_cfa_offset 24
 386 0004 00AF     		add	r7, sp, #0
 387              	.LCFI11:
 388              		.cfi_def_cfa_register 7
 389 0006 4C46     		mov	r4, r9
 390              	.LBB2:
  38:../common/systime.c **** 	for (uint8_t i = 0; i < ARRAY_SIZE(systime_timer); i++) {
 391              		.loc 2 38 15
 392 0008 FB1D     		adds	r3, r7, #7
 393 000a 0022     		movs	r2, #0
 394 000c 1A70     		strb	r2, [r3]
 395              		.loc 2 38 2
 396 000e 59E0     		b	.L18
 397              	.L23:
  39:../common/systime.c **** 		if (systime_timer[i].active == 0)
 398              		.loc 2 39 23
 399 0010 FB1D     		adds	r3, r7, #7
 400 0012 1A78     		ldrb	r2, [r3]
 401 0014 304B     		ldr	r3, .L25
 402 0016 E358     		ldr	r3, [r4, r3]
 403 0018 1201     		lsls	r2, r2, #4
 404 001a D35C     		ldrb	r3, [r2, r3]
 405 001c DB07     		lsls	r3, r3, #31
 406 001e DB0F     		lsrs	r3, r3, #31
 407 0020 DBB2     		uxtb	r3, r3
 408              		.loc 2 39 6
 409 0022 002B     		cmp	r3, #0
 410 0024 48D0     		beq	.L24
  40:../common/systime.c **** 			continue;
  41:../common/systime.c **** 
  42:../common/systime.c **** 		if (systime_localtime - systime_timer[i].time_last > systime_timer[i].period) {
 411              		.loc 2 42 25
 412 0026 2D4B     		ldr	r3, .L25+4
 413 0028 E358     		ldr	r3, [r4, r3]
 414 002a 1A68     		ldr	r2, [r3]
 415              		.loc 2 42 43
 416 002c FB1D     		adds	r3, r7, #7
 417 002e 1B78     		ldrb	r3, [r3]
 418 0030 2949     		ldr	r1, .L25
 419 0032 6158     		ldr	r1, [r4, r1]
 420 0034 1B01     		lsls	r3, r3, #4
 421 0036 CB18     		adds	r3, r1, r3
 422 0038 0433     		adds	r3, r3, #4
 423 003a 1B68     		ldr	r3, [r3]
 424              		.loc 2 42 25
 425 003c D21A     		subs	r2, r2, r3
 426              		.loc 2 42 72
 427 003e FB1D     		adds	r3, r7, #7
 428 0040 1B78     		ldrb	r3, [r3]
 429 0042 2549     		ldr	r1, .L25
 430 0044 6158     		ldr	r1, [r4, r1]
 431 0046 1B01     		lsls	r3, r3, #4
 432 0048 CB18     		adds	r3, r1, r3
 433 004a 0833     		adds	r3, r3, #8
 434 004c 1B68     		ldr	r3, [r3]
 435              		.loc 2 42 6
 436 004e 9A42     		cmp	r2, r3
 437 0050 33D9     		bls	.L20
  43:../common/systime.c **** 			if (systime_timer[i].fnc) {
 438              		.loc 2 43 24
 439 0052 FB1D     		adds	r3, r7, #7
 440 0054 1B78     		ldrb	r3, [r3]
 441 0056 204A     		ldr	r2, .L25
 442 0058 A258     		ldr	r2, [r4, r2]
 443 005a 1B01     		lsls	r3, r3, #4
 444 005c D318     		adds	r3, r2, r3
 445 005e 0C33     		adds	r3, r3, #12
 446 0060 1B68     		ldr	r3, [r3]
 447              		.loc 2 43 7
 448 0062 002B     		cmp	r3, #0
 449 0064 08D0     		beq	.L21
  44:../common/systime.c **** 				systime_timer[i].fnc();
 450              		.loc 2 44 21
 451 0066 FB1D     		adds	r3, r7, #7
 452 0068 1B78     		ldrb	r3, [r3]
 453 006a 1B4A     		ldr	r2, .L25
 454 006c A258     		ldr	r2, [r4, r2]
 455 006e 1B01     		lsls	r3, r3, #4
 456 0070 D318     		adds	r3, r2, r3
 457 0072 0C33     		adds	r3, r3, #12
 458 0074 1B68     		ldr	r3, [r3]
 459              		.loc 2 44 5
 460 0076 9847     		blx	r3
 461              	.LVL1:
 462              	.L21:
  45:../common/systime.c **** 			}
  46:../common/systime.c **** 
  47:../common/systime.c **** 			if (systime_timer[i].oneshot) {
 463              		.loc 2 47 24
 464 0078 FB1D     		adds	r3, r7, #7
 465 007a 1A78     		ldrb	r2, [r3]
 466 007c 164B     		ldr	r3, .L25
 467 007e E358     		ldr	r3, [r4, r3]
 468 0080 1201     		lsls	r2, r2, #4
 469 0082 D35C     		ldrb	r3, [r2, r3]
 470 0084 9B07     		lsls	r3, r3, #30
 471 0086 DB0F     		lsrs	r3, r3, #31
 472 0088 DBB2     		uxtb	r3, r3
 473              		.loc 2 47 7
 474 008a 002B     		cmp	r3, #0
 475 008c 08D0     		beq	.L22
  48:../common/systime.c **** 				systime_timer[i].active = 0;
 476              		.loc 2 48 21
 477 008e FB1D     		adds	r3, r7, #7
 478 0090 1A78     		ldrb	r2, [r3]
 479              		.loc 2 48 29
 480 0092 114B     		ldr	r3, .L25
 481 0094 E358     		ldr	r3, [r4, r3]
 482 0096 1201     		lsls	r2, r2, #4
 483 0098 D15C     		ldrb	r1, [r2, r3]
 484 009a 0120     		movs	r0, #1
 485 009c 8143     		bics	r1, r0
 486 009e D154     		strb	r1, [r2, r3]
 487              	.L22:
  49:../common/systime.c **** 			}
  50:../common/systime.c **** 
  51:../common/systime.c **** 			systime_timer[i].time_last = systime_localtime;
 488              		.loc 2 51 20
 489 00a0 FB1D     		adds	r3, r7, #7
 490 00a2 1878     		ldrb	r0, [r3]
 491              		.loc 2 51 31
 492 00a4 0D4B     		ldr	r3, .L25+4
 493 00a6 E358     		ldr	r3, [r4, r3]
 494 00a8 1A68     		ldr	r2, [r3]
 495 00aa 0B4B     		ldr	r3, .L25
 496 00ac E158     		ldr	r1, [r4, r3]
 497 00ae 0301     		lsls	r3, r0, #4
 498 00b0 CB18     		adds	r3, r1, r3
 499 00b2 0433     		adds	r3, r3, #4
 500 00b4 1A60     		str	r2, [r3]
 501 00b6 00E0     		b	.L20
 502              	.L24:
  40:../common/systime.c **** 
 503              		.loc 2 40 4
 504 00b8 C046     		nop
 505              	.L20:
  38:../common/systime.c **** 		if (systime_timer[i].active == 0)
 506              		.loc 2 38 54 discriminator 2
 507 00ba FB1D     		adds	r3, r7, #7
 508 00bc 1A78     		ldrb	r2, [r3]
 509 00be FB1D     		adds	r3, r7, #7
 510 00c0 0132     		adds	r2, r2, #1
 511 00c2 1A70     		strb	r2, [r3]
 512              	.L18:
  38:../common/systime.c **** 		if (systime_timer[i].active == 0)
 513              		.loc 2 38 2 discriminator 1
 514 00c4 FB1D     		adds	r3, r7, #7
 515 00c6 1B78     		ldrb	r3, [r3]
 516 00c8 042B     		cmp	r3, #4
 517 00ca A1D9     		bls	.L23
 518              	.LBE2:
  52:../common/systime.c **** 		}
  53:../common/systime.c **** 	}
  54:../common/systime.c **** }
 519              		.loc 2 54 1
 520 00cc C046     		nop
 521 00ce C046     		nop
 522 00d0 BD46     		mov	sp, r7
 523 00d2 03B0     		add	sp, sp, #12
 524              		@ sp needed
 525 00d4 90BD     		pop	{r4, r7, pc}
 526              	.L26:
 527 00d6 C046     		.align	2
 528              	.L25:
 529 00d8 00000000 		.word	systime_timer(GOT)
 530 00dc 00000000 		.word	systime_localtime(GOT)
 531              		.cfi_endproc
 532              	.LFE48:
 534              		.section	.text.systime_add_,"ax",%progbits
 535              		.align	1
 536              		.syntax unified
 537              		.code	16
 538              		.thumb_func
 539              		.fpu softvfp
 541              	systime_add_:
 542              	.LFB49:
  55:../common/systime.c **** 
  56:../common/systime.c **** static void systime_add_(timer_fnc fnc, uint32_t period, uint8_t oneshot)
  57:../common/systime.c **** {
 543              		.loc 2 57 1
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 24
 546              		@ frame_needed = 1, uses_anonymous_args = 0
 547 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 548              	.LCFI12:
 549              		.cfi_def_cfa_offset 20
 550              		.cfi_offset 4, -20
 551              		.cfi_offset 5, -16
 552              		.cfi_offset 6, -12
 553              		.cfi_offset 7, -8
 554              		.cfi_offset 14, -4
 555 0002 87B0     		sub	sp, sp, #28
 556              	.LCFI13:
 557              		.cfi_def_cfa_offset 48
 558 0004 00AF     		add	r7, sp, #0
 559              	.LCFI14:
 560              		.cfi_def_cfa_register 7
 561 0006 F860     		str	r0, [r7, #12]
 562 0008 B960     		str	r1, [r7, #8]
 563 000a FB1D     		adds	r3, r7, #7
 564 000c 1A70     		strb	r2, [r3]
 565 000e 4B46     		mov	r3, r9
  58:../common/systime.c **** 	uint8_t i;
  59:../common/systime.c **** 
  60:../common/systime.c **** 	for (i = 0; i < ARRAY_SIZE(systime_timer); i++) {
 566              		.loc 2 60 9
 567 0010 1722     		movs	r2, #23
 568 0012 BA18     		adds	r2, r7, r2
 569 0014 0021     		movs	r1, #0
 570 0016 1170     		strb	r1, [r2]
 571              		.loc 2 60 2
 572 0018 10E0     		b	.L28
 573              	.L31:
  61:../common/systime.c **** 		if (systime_timer[i].active == 0)
 574              		.loc 2 61 23
 575 001a 1720     		movs	r0, #23
 576 001c 3A18     		adds	r2, r7, r0
 577 001e 1178     		ldrb	r1, [r2]
 578 0020 2C4A     		ldr	r2, .L36
 579 0022 9A58     		ldr	r2, [r3, r2]
 580 0024 0901     		lsls	r1, r1, #4
 581 0026 8A5C     		ldrb	r2, [r1, r2]
 582 0028 D207     		lsls	r2, r2, #31
 583 002a D20F     		lsrs	r2, r2, #31
 584 002c D2B2     		uxtb	r2, r2
 585              		.loc 2 61 6
 586 002e 002A     		cmp	r2, #0
 587 0030 0AD0     		beq	.L34
  60:../common/systime.c **** 		if (systime_timer[i].active == 0)
 588              		.loc 2 60 46 discriminator 2
 589 0032 3A18     		adds	r2, r7, r0
 590 0034 1178     		ldrb	r1, [r2]
 591 0036 3A18     		adds	r2, r7, r0
 592 0038 0131     		adds	r1, r1, #1
 593 003a 1170     		strb	r1, [r2]
 594              	.L28:
  60:../common/systime.c **** 		if (systime_timer[i].active == 0)
 595              		.loc 2 60 2 discriminator 1
 596 003c 1722     		movs	r2, #23
 597 003e BA18     		adds	r2, r7, r2
 598 0040 1278     		ldrb	r2, [r2]
 599 0042 042A     		cmp	r2, #4
 600 0044 E9D9     		bls	.L31
 601 0046 00E0     		b	.L30
 602              	.L34:
  62:../common/systime.c **** 			break;
 603              		.loc 2 62 4
 604 0048 C046     		nop
 605              	.L30:
  63:../common/systime.c **** 	}
  64:../common/systime.c **** 
  65:../common/systime.c **** 	if (i == SYSTIME_TIMERS)
 606              		.loc 2 65 5
 607 004a 1726     		movs	r6, #23
 608 004c BA19     		adds	r2, r7, r6
 609 004e 1278     		ldrb	r2, [r2]
 610 0050 052A     		cmp	r2, #5
 611 0052 3AD0     		beq	.L35
  66:../common/systime.c **** 		return;
  67:../common/systime.c **** 
  68:../common/systime.c **** 	systime_timer[i].fnc = fnc;
 612              		.loc 2 68 18
 613 0054 BA19     		adds	r2, r7, r6
 614 0056 1278     		ldrb	r2, [r2]
 615              		.loc 2 68 23
 616 0058 1E49     		ldr	r1, .L36
 617 005a 5958     		ldr	r1, [r3, r1]
 618 005c 1201     		lsls	r2, r2, #4
 619 005e 8A18     		adds	r2, r1, r2
 620 0060 0C32     		adds	r2, r2, #12
 621 0062 F968     		ldr	r1, [r7, #12]
 622 0064 1160     		str	r1, [r2]
  69:../common/systime.c **** 	systime_timer[i].period = period;
 623              		.loc 2 69 18
 624 0066 BA19     		adds	r2, r7, r6
 625 0068 1278     		ldrb	r2, [r2]
 626              		.loc 2 69 26
 627 006a 1A49     		ldr	r1, .L36
 628 006c 5958     		ldr	r1, [r3, r1]
 629 006e 1201     		lsls	r2, r2, #4
 630 0070 8A18     		adds	r2, r1, r2
 631 0072 0832     		adds	r2, r2, #8
 632 0074 B968     		ldr	r1, [r7, #8]
 633 0076 1160     		str	r1, [r2]
  70:../common/systime.c **** 	systime_timer[i].time_last = systime_localtime;
 634              		.loc 2 70 18
 635 0078 BA19     		adds	r2, r7, r6
 636 007a 1478     		ldrb	r4, [r2]
 637              		.loc 2 70 29
 638 007c 164A     		ldr	r2, .L36+4
 639 007e 9A58     		ldr	r2, [r3, r2]
 640 0080 1168     		ldr	r1, [r2]
 641 0082 144A     		ldr	r2, .L36
 642 0084 9858     		ldr	r0, [r3, r2]
 643 0086 2201     		lsls	r2, r4, #4
 644 0088 8218     		adds	r2, r0, r2
 645 008a 0432     		adds	r2, r2, #4
 646 008c 1160     		str	r1, [r2]
  71:../common/systime.c **** 
  72:../common/systime.c **** 	systime_timer[i].oneshot = !!oneshot;
 647              		.loc 2 72 18
 648 008e BA19     		adds	r2, r7, r6
 649 0090 1178     		ldrb	r1, [r2]
 650              		.loc 2 72 29
 651 0092 FA1D     		adds	r2, r7, #7
 652 0094 1278     		ldrb	r2, [r2]
 653 0096 501E     		subs	r0, r2, #1
 654 0098 8241     		sbcs	r2, r2, r0
 655 009a D0B2     		uxtb	r0, r2
 656              		.loc 2 72 27
 657 009c 0D4A     		ldr	r2, .L36
 658 009e 9A58     		ldr	r2, [r3, r2]
 659 00a0 0901     		lsls	r1, r1, #4
 660 00a2 0124     		movs	r4, #1
 661 00a4 2040     		ands	r0, r4
 662 00a6 0518     		adds	r5, r0, r0
 663 00a8 885C     		ldrb	r0, [r1, r2]
 664 00aa 0224     		movs	r4, #2
 665 00ac A043     		bics	r0, r4
 666 00ae 041C     		adds	r4, r0, #0
 667 00b0 281C     		adds	r0, r5, #0
 668 00b2 2043     		orrs	r0, r4
 669 00b4 8854     		strb	r0, [r1, r2]
  73:../common/systime.c **** 	systime_timer[i].active = 1;
 670              		.loc 2 73 18
 671 00b6 BA19     		adds	r2, r7, r6
 672 00b8 1278     		ldrb	r2, [r2]
 673              		.loc 2 73 26
 674 00ba 0649     		ldr	r1, .L36
 675 00bc 5B58     		ldr	r3, [r3, r1]
 676 00be 1201     		lsls	r2, r2, #4
 677 00c0 D15C     		ldrb	r1, [r2, r3]
 678 00c2 0120     		movs	r0, #1
 679 00c4 0143     		orrs	r1, r0
 680 00c6 D154     		strb	r1, [r2, r3]
 681 00c8 00E0     		b	.L27
 682              	.L35:
  66:../common/systime.c **** 
 683              		.loc 2 66 3
 684 00ca C046     		nop
 685              	.L27:
  74:../common/systime.c **** 
  75:../common/systime.c **** }
 686              		.loc 2 75 1
 687 00cc BD46     		mov	sp, r7
 688 00ce 07B0     		add	sp, sp, #28
 689              		@ sp needed
 690 00d0 F0BD     		pop	{r4, r5, r6, r7, pc}
 691              	.L37:
 692 00d2 C046     		.align	2
 693              	.L36:
 694 00d4 00000000 		.word	systime_timer(GOT)
 695 00d8 00000000 		.word	systime_localtime(GOT)
 696              		.cfi_endproc
 697              	.LFE49:
 699              		.section	.text.systime_add,"ax",%progbits
 700              		.align	1
 701              		.global	systime_add
 702              		.syntax unified
 703              		.code	16
 704              		.thumb_func
 705              		.fpu softvfp
 707              	systime_add:
 708              	.LFB50:
  76:../common/systime.c **** 
  77:../common/systime.c **** void systime_add(timer_fnc fnc, uint32_t period)
  78:../common/systime.c **** {
 709              		.loc 2 78 1
 710              		.cfi_startproc
 711              		@ args = 0, pretend = 0, frame = 8
 712              		@ frame_needed = 1, uses_anonymous_args = 0
 713 0000 80B5     		push	{r7, lr}
 714              	.LCFI15:
 715              		.cfi_def_cfa_offset 8
 716              		.cfi_offset 7, -8
 717              		.cfi_offset 14, -4
 718 0002 82B0     		sub	sp, sp, #8
 719              	.LCFI16:
 720              		.cfi_def_cfa_offset 16
 721 0004 00AF     		add	r7, sp, #0
 722              	.LCFI17:
 723              		.cfi_def_cfa_register 7
 724 0006 7860     		str	r0, [r7, #4]
 725 0008 3960     		str	r1, [r7]
  79:../common/systime.c **** 	systime_add_(fnc, period, 0);
 726              		.loc 2 79 2
 727 000a 3968     		ldr	r1, [r7]
 728 000c 7B68     		ldr	r3, [r7, #4]
 729 000e 0022     		movs	r2, #0
 730 0010 1800     		movs	r0, r3
 731 0012 FFF7FEFF 		bl	systime_add_
  80:../common/systime.c **** }
 732              		.loc 2 80 1
 733 0016 C046     		nop
 734 0018 BD46     		mov	sp, r7
 735 001a 02B0     		add	sp, sp, #8
 736              		@ sp needed
 737 001c 80BD     		pop	{r7, pc}
 738              		.cfi_endproc
 739              	.LFE50:
 741              		.section	.text.systime_add_oneshot,"ax",%progbits
 742              		.align	1
 743              		.global	systime_add_oneshot
 744              		.syntax unified
 745              		.code	16
 746              		.thumb_func
 747              		.fpu softvfp
 749              	systime_add_oneshot:
 750              	.LFB51:
  81:../common/systime.c **** 
  82:../common/systime.c **** void systime_add_oneshot(timer_fnc fnc, uint32_t period)
  83:../common/systime.c **** {
 751              		.loc 2 83 1
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 8
 754              		@ frame_needed = 1, uses_anonymous_args = 0
 755 0000 80B5     		push	{r7, lr}
 756              	.LCFI18:
 757              		.cfi_def_cfa_offset 8
 758              		.cfi_offset 7, -8
 759              		.cfi_offset 14, -4
 760 0002 82B0     		sub	sp, sp, #8
 761              	.LCFI19:
 762              		.cfi_def_cfa_offset 16
 763 0004 00AF     		add	r7, sp, #0
 764              	.LCFI20:
 765              		.cfi_def_cfa_register 7
 766 0006 7860     		str	r0, [r7, #4]
 767 0008 3960     		str	r1, [r7]
  84:../common/systime.c **** 	systime_add_(fnc, period, 1);
 768              		.loc 2 84 2
 769 000a 3968     		ldr	r1, [r7]
 770 000c 7B68     		ldr	r3, [r7, #4]
 771 000e 0122     		movs	r2, #1
 772 0010 1800     		movs	r0, r3
 773 0012 FFF7FEFF 		bl	systime_add_
  85:../common/systime.c **** }
 774              		.loc 2 85 1
 775 0016 C046     		nop
 776 0018 BD46     		mov	sp, r7
 777 001a 02B0     		add	sp, sp, #8
 778              		@ sp needed
 779 001c 80BD     		pop	{r7, pc}
 780              		.cfi_endproc
 781              	.LFE51:
 783              		.section	.text.systime_remove,"ax",%progbits
 784              		.align	1
 785              		.global	systime_remove
 786              		.syntax unified
 787              		.code	16
 788              		.thumb_func
 789              		.fpu softvfp
 791              	systime_remove:
 792              	.LFB52:
  86:../common/systime.c **** 
  87:../common/systime.c **** void systime_remove(timer_fnc fnc)
  88:../common/systime.c **** {
 793              		.loc 2 88 1
 794              		.cfi_startproc
 795              		@ args = 0, pretend = 0, frame = 16
 796              		@ frame_needed = 1, uses_anonymous_args = 0
 797 0000 90B5     		push	{r4, r7, lr}
 798              	.LCFI21:
 799              		.cfi_def_cfa_offset 12
 800              		.cfi_offset 4, -12
 801              		.cfi_offset 7, -8
 802              		.cfi_offset 14, -4
 803 0002 85B0     		sub	sp, sp, #20
 804              	.LCFI22:
 805              		.cfi_def_cfa_offset 32
 806 0004 00AF     		add	r7, sp, #0
 807              	.LCFI23:
 808              		.cfi_def_cfa_register 7
 809 0006 7860     		str	r0, [r7, #4]
 810 0008 4B46     		mov	r3, r9
  89:../common/systime.c **** 	uint8_t i;
  90:../common/systime.c **** 
  91:../common/systime.c **** 	for (i = 0; i < ARRAY_SIZE(systime_timer); i++) {
 811              		.loc 2 91 9
 812 000a 0F22     		movs	r2, #15
 813 000c BA18     		adds	r2, r7, r2
 814 000e 0021     		movs	r1, #0
 815 0010 1170     		strb	r1, [r2]
 816              		.loc 2 91 2
 817 0012 25E0     		b	.L41
 818              	.L43:
  92:../common/systime.c **** 		if (systime_timer[i].active == 1) {
 819              		.loc 2 92 23
 820 0014 0F20     		movs	r0, #15
 821 0016 3A18     		adds	r2, r7, r0
 822 0018 1178     		ldrb	r1, [r2]
 823 001a 164A     		ldr	r2, .L44
 824 001c 9A58     		ldr	r2, [r3, r2]
 825 001e 0901     		lsls	r1, r1, #4
 826 0020 8A5C     		ldrb	r2, [r1, r2]
 827 0022 D207     		lsls	r2, r2, #31
 828 0024 D20F     		lsrs	r2, r2, #31
 829 0026 D2B2     		uxtb	r2, r2
 830              		.loc 2 92 6
 831 0028 012A     		cmp	r2, #1
 832 002a 13D1     		bne	.L42
  93:../common/systime.c **** 			if (systime_timer[i].fnc == fnc) {
 833              		.loc 2 93 24
 834 002c 3A18     		adds	r2, r7, r0
 835 002e 1278     		ldrb	r2, [r2]
 836 0030 1049     		ldr	r1, .L44
 837 0032 5958     		ldr	r1, [r3, r1]
 838 0034 1201     		lsls	r2, r2, #4
 839 0036 8A18     		adds	r2, r1, r2
 840 0038 0C32     		adds	r2, r2, #12
 841 003a 1268     		ldr	r2, [r2]
 842              		.loc 2 93 7
 843 003c 7968     		ldr	r1, [r7, #4]
 844 003e 9142     		cmp	r1, r2
 845 0040 08D1     		bne	.L42
  94:../common/systime.c **** 				systime_timer[i].active = 0;
 846              		.loc 2 94 21
 847 0042 3A18     		adds	r2, r7, r0
 848 0044 1178     		ldrb	r1, [r2]
 849              		.loc 2 94 29
 850 0046 0B4A     		ldr	r2, .L44
 851 0048 9A58     		ldr	r2, [r3, r2]
 852 004a 0901     		lsls	r1, r1, #4
 853 004c 885C     		ldrb	r0, [r1, r2]
 854 004e 0124     		movs	r4, #1
 855 0050 A043     		bics	r0, r4
 856 0052 8854     		strb	r0, [r1, r2]
 857              	.L42:
  91:../common/systime.c **** 		if (systime_timer[i].active == 1) {
 858              		.loc 2 91 46 discriminator 2
 859 0054 0F20     		movs	r0, #15
 860 0056 3A18     		adds	r2, r7, r0
 861 0058 1178     		ldrb	r1, [r2]
 862 005a 3A18     		adds	r2, r7, r0
 863 005c 0131     		adds	r1, r1, #1
 864 005e 1170     		strb	r1, [r2]
 865              	.L41:
  91:../common/systime.c **** 		if (systime_timer[i].active == 1) {
 866              		.loc 2 91 2 discriminator 1
 867 0060 0F22     		movs	r2, #15
 868 0062 BA18     		adds	r2, r7, r2
 869 0064 1278     		ldrb	r2, [r2]
 870 0066 042A     		cmp	r2, #4
 871 0068 D4D9     		bls	.L43
  95:../common/systime.c **** 			}
  96:../common/systime.c **** 		}
  97:../common/systime.c **** 	}
  98:../common/systime.c **** }
 872              		.loc 2 98 1
 873 006a C046     		nop
 874 006c C046     		nop
 875 006e BD46     		mov	sp, r7
 876 0070 05B0     		add	sp, sp, #20
 877              		@ sp needed
 878 0072 90BD     		pop	{r4, r7, pc}
 879              	.L45:
 880              		.align	2
 881              	.L44:
 882 0074 00000000 		.word	systime_timer(GOT)
 883              		.cfi_endproc
 884              	.LFE52:
 886              		.section	.text.systime_delay,"ax",%progbits
 887              		.align	1
 888              		.global	systime_delay
 889              		.syntax unified
 890              		.code	16
 891              		.thumb_func
 892              		.fpu softvfp
 894              	systime_delay:
 895              	.LFB53:
  99:../common/systime.c **** 
 100:../common/systime.c **** void systime_delay(uint32_t delay)
 101:../common/systime.c **** {
 896              		.loc 2 101 1
 897              		.cfi_startproc
 898              		@ args = 0, pretend = 0, frame = 16
 899              		@ frame_needed = 1, uses_anonymous_args = 0
 900 0000 80B5     		push	{r7, lr}
 901              	.LCFI24:
 902              		.cfi_def_cfa_offset 8
 903              		.cfi_offset 7, -8
 904              		.cfi_offset 14, -4
 905 0002 84B0     		sub	sp, sp, #16
 906              	.LCFI25:
 907              		.cfi_def_cfa_offset 24
 908 0004 00AF     		add	r7, sp, #0
 909              	.LCFI26:
 910              		.cfi_def_cfa_register 7
 911 0006 7860     		str	r0, [r7, #4]
 912 0008 4B46     		mov	r3, r9
 102:../common/systime.c **** 	uint32_t time;
 103:../common/systime.c **** 
 104:../common/systime.c **** 	time = systime_localtime + delay;
 913              		.loc 2 104 27
 914 000a 094A     		ldr	r2, .L48
 915 000c 9A58     		ldr	r2, [r3, r2]
 916 000e 1268     		ldr	r2, [r2]
 917              		.loc 2 104 7
 918 0010 7968     		ldr	r1, [r7, #4]
 919 0012 8A18     		adds	r2, r1, r2
 920 0014 FA60     		str	r2, [r7, #12]
 105:../common/systime.c **** 
 106:../common/systime.c **** 	while(time > systime_localtime);
 921              		.loc 2 106 7
 922 0016 C046     		nop
 923              	.L47:
 924              		.loc 2 106 13 discriminator 1
 925 0018 054A     		ldr	r2, .L48
 926 001a 9A58     		ldr	r2, [r3, r2]
 927 001c 1268     		ldr	r2, [r2]
 928              		.loc 2 106 7 discriminator 1
 929 001e F968     		ldr	r1, [r7, #12]
 930 0020 9142     		cmp	r1, r2
 931 0022 F9D8     		bhi	.L47
 107:../common/systime.c **** }
 932              		.loc 2 107 1
 933 0024 C046     		nop
 934 0026 C046     		nop
 935 0028 BD46     		mov	sp, r7
 936 002a 04B0     		add	sp, sp, #16
 937              		@ sp needed
 938 002c 80BD     		pop	{r7, pc}
 939              	.L49:
 940 002e C046     		.align	2
 941              	.L48:
 942 0030 00000000 		.word	systime_localtime(GOT)
 943              		.cfi_endproc
 944              	.LFE53:
 946              		.section	.text.systime_get,"ax",%progbits
 947              		.align	1
 948              		.global	systime_get
 949              		.syntax unified
 950              		.code	16
 951              		.thumb_func
 952              		.fpu softvfp
 954              	systime_get:
 955              	.LFB54:
 108:../common/systime.c **** 
 109:../common/systime.c **** uint32_t systime_get(void)
 110:../common/systime.c **** {
 956              		.loc 2 110 1
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 0
 959              		@ frame_needed = 1, uses_anonymous_args = 0
 960 0000 80B5     		push	{r7, lr}
 961              	.LCFI27:
 962              		.cfi_def_cfa_offset 8
 963              		.cfi_offset 7, -8
 964              		.cfi_offset 14, -4
 965 0002 00AF     		add	r7, sp, #0
 966              	.LCFI28:
 967              		.cfi_def_cfa_register 7
 968 0004 4B46     		mov	r3, r9
 111:../common/systime.c **** 	return systime_localtime;
 969              		.loc 2 111 9
 970 0006 034A     		ldr	r2, .L52
 971 0008 9B58     		ldr	r3, [r3, r2]
 972 000a 1B68     		ldr	r3, [r3]
 112:../common/systime.c **** }
 973              		.loc 2 112 1
 974 000c 1800     		movs	r0, r3
 975 000e BD46     		mov	sp, r7
 976              		@ sp needed
 977 0010 80BD     		pop	{r7, pc}
 978              	.L53:
 979 0012 C046     		.align	2
 980              	.L52:
 981 0014 00000000 		.word	systime_localtime(GOT)
 982              		.cfi_endproc
 983              	.LFE54:
 985              		.section	.text.SysTick_Handler,"ax",%progbits
 986              		.align	1
 987              		.global	SysTick_Handler
 988              		.syntax unified
 989              		.code	16
 990              		.thumb_func
 991              		.fpu softvfp
 993              	SysTick_Handler:
 994              	.LFB55:
 113:../common/systime.c **** 
 114:../common/systime.c **** void SysTick_Handler(void)
 115:../common/systime.c **** {
 995              		.loc 2 115 1
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 0
 998              		@ frame_needed = 1, uses_anonymous_args = 0
 999 0000 80B5     		push	{r7, lr}
 1000              	.LCFI29:
 1001              		.cfi_def_cfa_offset 8
 1002              		.cfi_offset 7, -8
 1003              		.cfi_offset 14, -4
 1004 0002 00AF     		add	r7, sp, #0
 1005              	.LCFI30:
 1006              		.cfi_def_cfa_register 7
 1007 0004 4B46     		mov	r3, r9
 116:../common/systime.c **** 	systime_localtime += SYSTIME_PERIOD_MS;
 1008              		.loc 2 116 20
 1009 0006 054A     		ldr	r2, .L55
 1010 0008 9A58     		ldr	r2, [r3, r2]
 1011 000a 1268     		ldr	r2, [r2]
 1012 000c 0A32     		adds	r2, r2, #10
 1013 000e 0349     		ldr	r1, .L55
 1014 0010 5B58     		ldr	r3, [r3, r1]
 1015 0012 1A60     		str	r2, [r3]
 117:../common/systime.c **** }
 1016              		.loc 2 117 1
 1017 0014 C046     		nop
 1018 0016 BD46     		mov	sp, r7
 1019              		@ sp needed
 1020 0018 80BD     		pop	{r7, pc}
 1021              	.L56:
 1022 001a C046     		.align	2
 1023              	.L55:
 1024 001c 00000000 		.word	systime_localtime(GOT)
 1025              		.cfi_endproc
 1026              	.LFE55:
 1028              		.text
 1029              	.Letext0:
 1030              		.file 3 "/home/robot/devel-cortex-m3/lib/picolibc-pic/picolibc/arm-none-eabi/include/machine/_defa
 1031              		.file 4 "/home/robot/devel-cortex-m3/lib/picolibc-pic/picolibc/arm-none-eabi/include/sys/_stdint.h
 1032              		.file 5 "../lib/stm32h/STM32G0xx/Include/stm32g031xx.h"
 1033              		.file 6 "../lib/stm32h/STM32G0xx/Include/system_stm32g0xx.h"
 1034              		.file 7 "./platform.h"
 1035              		.file 8 "../common/systime.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 systime.c
     /tmp/cc2qzYi2.s:16     .text.__NVIC_SetPriority:0000000000000000 $t
     /tmp/cc2qzYi2.s:23     .text.__NVIC_SetPriority:0000000000000000 __NVIC_SetPriority
     /tmp/cc2qzYi2.s:184    .text.__NVIC_SetPriority:00000000000000d4 $d
     /tmp/cc2qzYi2.s:190    .text.SysTick_Config:0000000000000000 $t
     /tmp/cc2qzYi2.s:196    .text.SysTick_Config:0000000000000000 SysTick_Config
     /tmp/cc2qzYi2.s:261    .text.SysTick_Config:0000000000000044 $d
                            *COM*:0000000000000050 systime_timer
     /tmp/cc2qzYi2.s:271    .bss.systime_localtime:0000000000000000 systime_localtime
     /tmp/cc2qzYi2.s:268    .bss.systime_localtime:0000000000000000 $d
     /tmp/cc2qzYi2.s:275    .text.systime_init:0000000000000000 $t
     /tmp/cc2qzYi2.s:282    .text.systime_init:0000000000000000 systime_init
     /tmp/cc2qzYi2.s:357    .text.systime_init:000000000000005c $d
     /tmp/cc2qzYi2.s:364    .text.systime_periodic:0000000000000000 $t
     /tmp/cc2qzYi2.s:371    .text.systime_periodic:0000000000000000 systime_periodic
     /tmp/cc2qzYi2.s:529    .text.systime_periodic:00000000000000d8 $d
     /tmp/cc2qzYi2.s:535    .text.systime_add_:0000000000000000 $t
     /tmp/cc2qzYi2.s:541    .text.systime_add_:0000000000000000 systime_add_
     /tmp/cc2qzYi2.s:694    .text.systime_add_:00000000000000d4 $d
     /tmp/cc2qzYi2.s:700    .text.systime_add:0000000000000000 $t
     /tmp/cc2qzYi2.s:707    .text.systime_add:0000000000000000 systime_add
     /tmp/cc2qzYi2.s:742    .text.systime_add_oneshot:0000000000000000 $t
     /tmp/cc2qzYi2.s:749    .text.systime_add_oneshot:0000000000000000 systime_add_oneshot
     /tmp/cc2qzYi2.s:784    .text.systime_remove:0000000000000000 $t
     /tmp/cc2qzYi2.s:791    .text.systime_remove:0000000000000000 systime_remove
     /tmp/cc2qzYi2.s:882    .text.systime_remove:0000000000000074 $d
     /tmp/cc2qzYi2.s:887    .text.systime_delay:0000000000000000 $t
     /tmp/cc2qzYi2.s:894    .text.systime_delay:0000000000000000 systime_delay
     /tmp/cc2qzYi2.s:942    .text.systime_delay:0000000000000030 $d
     /tmp/cc2qzYi2.s:947    .text.systime_get:0000000000000000 $t
     /tmp/cc2qzYi2.s:954    .text.systime_get:0000000000000000 systime_get
     /tmp/cc2qzYi2.s:981    .text.systime_get:0000000000000014 $d
     /tmp/cc2qzYi2.s:986    .text.SysTick_Handler:0000000000000000 $t
     /tmp/cc2qzYi2.s:993    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/cc2qzYi2.s:1024   .text.SysTick_Handler:000000000000001c $d

UNDEFINED SYMBOLS
__aeabi_uidiv
SystemCoreClock
