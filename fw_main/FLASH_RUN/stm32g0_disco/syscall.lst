   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"syscall.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.bss.heap,"aw",%nobits
  16              		.align	2
  19              	heap:
  20 0000 00000000 		.space	4
  21              		.section	.text._sbrk,"ax",%progbits
  22              		.align	1
  23              		.global	_sbrk
  24              		.arch armv6s-m
  25              		.syntax unified
  26              		.code	16
  27              		.thumb_func
  28              		.fpu softvfp
  30              	_sbrk:
  31              	.LFB70:
  32              		.file 1 "syscall.c"
   1:syscall.c     **** #include "platform.h"
   2:syscall.c     **** 
   3:syscall.c     **** #include <stdio.h>
   4:syscall.c     **** #include <stdlib.h>
   5:syscall.c     **** #include <string.h>
   6:syscall.c     **** #include <errno.h>
   7:syscall.c     **** #include <sys/time.h>
   8:syscall.c     **** #include <sys/stat.h>
   9:syscall.c     **** #include <sys/unistd.h>
  10:syscall.c     **** 
  11:syscall.c     **** /* sbrk stuff*/
  12:syscall.c     **** extern unsigned int _end_ram; // end of ram
  13:syscall.c     **** extern unsigned int _end_sram; // end of bss
  14:syscall.c     **** 
  15:syscall.c     **** static caddr_t heap = NULL;
  16:syscall.c     **** 
  17:syscall.c     **** // low level bulk memory allocator - used by malloc
  18:syscall.c     **** caddr_t _sbrk ( int increment )
  19:syscall.c     **** {
  33              		.loc 1 19 1
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 16
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 84B0     		sub	sp, sp, #16
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 24
  45 0004 00AF     		add	r7, sp, #0
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
  48 0006 7860     		str	r0, [r7, #4]
  49 0008 4B46     		mov	r3, r9
  20:syscall.c     **** 	caddr_t prevHeap;
  21:syscall.c     **** 	caddr_t nextHeap;
  22:syscall.c     **** 
  23:syscall.c     **** 	if (heap == NULL) {
  50              		.loc 1 23 11
  51 000a 134A     		ldr	r2, .L5
  52 000c 9A58     		ldr	r2, [r3, r2]
  53 000e 1268     		ldr	r2, [r2]
  54              		.loc 1 23 5
  55 0010 002A     		cmp	r2, #0
  56 0012 04D1     		bne	.L2
  24:syscall.c     **** 		// first allocation
  25:syscall.c     **** 		heap = (caddr_t)&_end_sram;
  57              		.loc 1 25 8
  58 0014 104A     		ldr	r2, .L5
  59 0016 9A58     		ldr	r2, [r3, r2]
  60 0018 1049     		ldr	r1, .L5+4
  61 001a 5958     		ldr	r1, [r3, r1]
  62 001c 1160     		str	r1, [r2]
  63              	.L2:
  26:syscall.c     **** 	}
  27:syscall.c     **** 
  28:syscall.c     **** 	prevHeap = heap;
  64              		.loc 1 28 11
  65 001e 0E4A     		ldr	r2, .L5
  66 0020 9A58     		ldr	r2, [r3, r2]
  67 0022 1268     		ldr	r2, [r2]
  68 0024 FA60     		str	r2, [r7, #12]
  29:syscall.c     **** 
  30:syscall.c     **** 	// Always return data aligned on a 8 byte boundary
  31:syscall.c     **** 	nextHeap = (caddr_t)(((unsigned int)(heap + increment) + 7) & ~7);
  69              		.loc 1 31 44
  70 0026 0C4A     		ldr	r2, .L5
  71 0028 9A58     		ldr	r2, [r3, r2]
  72 002a 1168     		ldr	r1, [r2]
  73 002c 7A68     		ldr	r2, [r7, #4]
  74 002e 8A18     		adds	r2, r1, r2
  75              		.loc 1 31 57
  76 0030 0732     		adds	r2, r2, #7
  77              		.loc 1 31 62
  78 0032 0721     		movs	r1, #7
  79 0034 8A43     		bics	r2, r1
  80              		.loc 1 31 11
  81 0036 BA60     		str	r2, [r7, #8]
  32:syscall.c     **** 
  33:syscall.c     **** 	// get current stack pointer
  34:syscall.c     **** 	//register caddr_t stackPtr asm ("sp");
  35:syscall.c     **** 
  36:syscall.c     **** 	// Check enough space and there is no collision with stack coming the other way
  37:syscall.c     **** 	// if stack is above start of heap
  38:syscall.c     **** 	if (nextHeap >= (caddr_t)&_end_ram) {
  82              		.loc 1 38 5
  83 0038 BA68     		ldr	r2, [r7, #8]
  84 003a 0949     		ldr	r1, .L5+8
  85 003c 5958     		ldr	r1, [r3, r1]
  86 003e 8A42     		cmp	r2, r1
  87 0040 01D3     		bcc	.L3
  39:syscall.c     **** 		return NULL; // error - no more memory
  88              		.loc 1 39 10
  89 0042 0023     		movs	r3, #0
  90 0044 04E0     		b	.L4
  91              	.L3:
  40:syscall.c     **** 	} else {
  41:syscall.c     **** 		heap = nextHeap;
  92              		.loc 1 41 8
  93 0046 044A     		ldr	r2, .L5
  94 0048 9B58     		ldr	r3, [r3, r2]
  95 004a BA68     		ldr	r2, [r7, #8]
  96 004c 1A60     		str	r2, [r3]
  42:syscall.c     **** 		return (caddr_t) prevHeap;
  97              		.loc 1 42 10
  98 004e FB68     		ldr	r3, [r7, #12]
  99              	.L4:
  43:syscall.c     **** 	}
  44:syscall.c     **** }
 100              		.loc 1 44 1
 101 0050 1800     		movs	r0, r3
 102 0052 BD46     		mov	sp, r7
 103 0054 04B0     		add	sp, sp, #16
 104              		@ sp needed
 105 0056 80BD     		pop	{r7, pc}
 106              	.L6:
 107              		.align	2
 108              	.L5:
 109 0058 00000000 		.word	heap(GOT)
 110 005c 00000000 		.word	_end_sram(GOT)
 111 0060 00000000 		.word	_end_ram(GOT)
 112              		.cfi_endproc
 113              	.LFE70:
 115              		.text
 116              	.Letext0:
 117              		.file 2 "/home/robot/devel-cortex-m3/lib/picolibc-pic/picolibc/arm-none-eabi/include/machine/_defa
 118              		.file 3 "/home/robot/devel-cortex-m3/lib/picolibc-pic/picolibc/arm-none-eabi/include/sys/_stdint.h
 119              		.file 4 "../lib/stm32h/STM32G0xx/Include/system_stm32g0xx.h"
 120              		.file 5 "platform.h"
 121              		.file 6 "/home/robot/devel-cortex-m3/lib/picolibc-pic/picolibc/arm-none-eabi/include/sys/types.h"
 122              		.file 7 "/home/robot/devel-cortex-m3/lib/picolibc-pic/picolibc/arm-none-eabi/include/stdio.h"
 123              		.file 8 "/home/robot/devel-cortex-m3/lib/picolibc-pic/picolibc/arm-none-eabi/include/stdlib.h"
 124              		.file 9 "/home/robot/devel-cortex-m3/lib/picolibc-pic/picolibc/arm-none-eabi/include/sys/errno.h"
 125              		.file 10 "/home/robot/devel-cortex-m3/lib/picolibc-pic/picolibc/arm-none-eabi/include/time.h"
 126              		.file 11 "/home/robot/devel-cortex-m3/lib/picolibc-pic/picolibc/arm-none-eabi/include/sys/unistd.h
DEFINED SYMBOLS
                            *ABS*:0000000000000000 syscall.c
     /tmp/cceru2LM.s:16     .bss.heap:0000000000000000 $d
     /tmp/cceru2LM.s:19     .bss.heap:0000000000000000 heap
     /tmp/cceru2LM.s:22     .text._sbrk:0000000000000000 $t
     /tmp/cceru2LM.s:30     .text._sbrk:0000000000000000 _sbrk
     /tmp/cceru2LM.s:109    .text._sbrk:0000000000000058 $d

UNDEFINED SYMBOLS
_end_sram
_end_ram
