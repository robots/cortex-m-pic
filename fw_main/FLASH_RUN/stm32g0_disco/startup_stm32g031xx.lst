   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"startup_stm32g031xx.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	g_pfnVectors
  16              		.section	.isr_vectors,"aw"
  17              		.align	2
  20              	g_pfnVectors:
  21 0000 00000000 		.word	__stack_end
  22 0004 00000000 		.word	Reset_Handler
  23 0008 00000000 		.word	NMI_Handler
  24 000c 00000000 		.word	HardFault_Handler
  25 0010 00000000 		.word	0
  26 0014 00000000 		.word	0
  27 0018 00000000 		.word	0
  28 001c 00000000 		.word	0
  29 0020 00000000 		.word	0
  30 0024 00000000 		.word	0
  31 0028 00000000 		.word	0
  32 002c 00000000 		.word	SVC_Handler
  33 0030 00000000 		.word	0
  34 0034 00000000 		.word	0
  35 0038 00000000 		.word	PendSV_Handler
  36 003c 00000000 		.word	SysTick_Handler
  37 0040 00000000 		.word	WWDG_IRQHandler
  38 0044 00000000 		.word	PVD_IRQHandler
  39 0048 00000000 		.word	RTC_TAMP_IRQHandler
  40 004c 00000000 		.word	FLASH_IRQHandler
  41 0050 00000000 		.word	RCC_IRQHandler
  42 0054 00000000 		.word	EXTI0_1_IRQHandler
  43 0058 00000000 		.word	EXTI2_3_IRQHandler
  44 005c 00000000 		.word	EXTI4_15_IRQHandler
  45 0060 00000000 		.word	0
  46 0064 00000000 		.word	DMA1_Channel1_IRQHandler
  47 0068 00000000 		.word	DMA1_Channel2_3_IRQHandler
  48 006c 00000000 		.word	DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler
  49 0070 00000000 		.word	ADC1_IRQHandler
  50 0074 00000000 		.word	TIM1_BRK_UP_TRG_COM_IRQHandler
  51 0078 00000000 		.word	TIM1_CC_IRQHandler
  52 007c 00000000 		.word	TIM2_IRQHandler
  53 0080 00000000 		.word	TIM3_IRQHandler
  54 0084 00000000 		.word	LPTIM1_IRQHandler
  55 0088 00000000 		.word	LPTIM2_IRQHandler
  56 008c 00000000 		.word	TIM14_IRQHandler
  57 0090 00000000 		.word	0
  58 0094 00000000 		.word	TIM16_IRQHandler
  59 0098 00000000 		.word	TIM17_IRQHandler
  60 009c 00000000 		.word	I2C1_IRQHandler
  61 00a0 00000000 		.word	I2C2_IRQHandler
  62 00a4 00000000 		.word	SPI1_IRQHandler
  63 00a8 00000000 		.word	SPI2_IRQHandler
  64 00ac 00000000 		.word	USART1_IRQHandler
  65 00b0 00000000 		.word	USART2_IRQHandler
  66 00b4 00000000 		.word	LPUSART1_IRQHandler
  67 00b8 00000000 		.word	0
  68              		.section	.text.Default_Handler,"ax",%progbits
  69              		.align	1
  70              		.global	Default_Handler
  71              		.arch armv6s-m
  72              		.syntax unified
  73              		.code	16
  74              		.thumb_func
  75              		.fpu softvfp
  77              	Default_Handler:
  78              	.LFB0:
  79              		.file 1 "startup_stm32g031xx.c"
   1:startup_stm32g031xx.c **** /**
   2:startup_stm32g031xx.c ****  ******************************************************************************
   3:startup_stm32g031xx.c ****  * @file      startup_stm32f10x_md.c
   4:startup_stm32g031xx.c ****  * @author    MCD Application Team, modif. Martin Thomas
   5:startup_stm32g031xx.c ****  * @version   V3.0.0-mthomas
   6:startup_stm32g031xx.c ****  * @date      04/17/2009
   7:startup_stm32g031xx.c ****  * @brief     STM32F10x Medium Density Devices vector table for GNU toolchain.
   8:startup_stm32g031xx.c ****  *            This module performs:
   9:startup_stm32g031xx.c ****  *                - Set the initial SP
  10:startup_stm32g031xx.c ****  *                - Set the initial PC == Reset_Handler,
  11:startup_stm32g031xx.c ****  *                - Set the vector table entries with the exceptions ISR address,
  12:startup_stm32g031xx.c ****  *                - Branches to main in the C library (which eventually
  13:startup_stm32g031xx.c ****  *                  calls main()).
  14:startup_stm32g031xx.c ****  *            After Reset the Cortex-M3 processor is in Thread mode,
  15:startup_stm32g031xx.c ****  *            priority is Privileged, and the Stack is set to Main.
  16:startup_stm32g031xx.c ****  *******************************************************************************
  17:startup_stm32g031xx.c ****  * @copy
  18:startup_stm32g031xx.c ****  *
  19:startup_stm32g031xx.c ****  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  20:startup_stm32g031xx.c ****  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  21:startup_stm32g031xx.c ****  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  22:startup_stm32g031xx.c ****  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  23:startup_stm32g031xx.c ****  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  24:startup_stm32g031xx.c ****  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  25:startup_stm32g031xx.c ****  *
  26:startup_stm32g031xx.c ****  * <h2><center>&copy; COPYRIGHT 2009 STMicroelectronics</center></h2>
  27:startup_stm32g031xx.c ****  */
  28:startup_stm32g031xx.c **** 
  29:startup_stm32g031xx.c **** /* Modified by Martin Thomas
  30:startup_stm32g031xx.c ****    - to take VECT_TAB_RAM setting into account, also see the linker-script
  31:startup_stm32g031xx.c ****    - to avoid warning "ISO C forbids initialization between function pointer and 'void *'".
  32:startup_stm32g031xx.c ****    - added optional startup-delay to avoid unwanted operations while connecting with
  33:startup_stm32g031xx.c ****      debugger/programmer
  34:startup_stm32g031xx.c ****    - tested with the GNU arm-eabi toolchain as in CS G++ lite Q1/2009-161
  35:startup_stm32g031xx.c **** 
  36:startup_stm32g031xx.c **** 	 Michal Demin:
  37:startup_stm32g031xx.c **** 	 - added FreeRTOS Hooks
  38:startup_stm32g031xx.c **** 	 - sbrk for newlib's allocator
  39:startup_stm32g031xx.c **** */
  40:startup_stm32g031xx.c **** 
  41:startup_stm32g031xx.c **** /* Includes ------------------------------------------------------------------*/
  42:startup_stm32g031xx.c **** /* Private typedef -----------------------------------------------------------*/
  43:startup_stm32g031xx.c **** /* Private typedef -----------------------------------------------------------*/
  44:startup_stm32g031xx.c **** typedef void( *const intfunc )( void );
  45:startup_stm32g031xx.c **** 
  46:startup_stm32g031xx.c **** /* Private define ------------------------------------------------------------*/
  47:startup_stm32g031xx.c **** #define WEAK __attribute__ ((weak))
  48:startup_stm32g031xx.c **** 
  49:startup_stm32g031xx.c **** extern char __stack_end[];
  50:startup_stm32g031xx.c **** 
  51:startup_stm32g031xx.c **** /* Private variables ---------------------------------------------------------*/
  52:startup_stm32g031xx.c **** 
  53:startup_stm32g031xx.c **** /* Private function prototypes -----------------------------------------------*/
  54:startup_stm32g031xx.c **** extern void Reset_Handler(void);
  55:startup_stm32g031xx.c **** extern int main(void);
  56:startup_stm32g031xx.c **** void __Init_Data(void);
  57:startup_stm32g031xx.c **** void Default_Handler(void);
  58:startup_stm32g031xx.c **** 
  59:startup_stm32g031xx.c **** 
  60:startup_stm32g031xx.c **** /*******************************************************************************
  61:startup_stm32g031xx.c **** *
  62:startup_stm32g031xx.c **** *            Forward declaration of the default fault handlers.
  63:startup_stm32g031xx.c **** *
  64:startup_stm32g031xx.c **** *******************************************************************************/
  65:startup_stm32g031xx.c **** //mthomas void WEAK Reset_Handler(void);
  66:startup_stm32g031xx.c **** void WEAK NMI_Handler(void);
  67:startup_stm32g031xx.c **** void WEAK HardFault_Handler(void);
  68:startup_stm32g031xx.c **** void WEAK SVC_Handler(void);
  69:startup_stm32g031xx.c **** void WEAK PendSV_Handler(void);
  70:startup_stm32g031xx.c **** void WEAK SysTick_Handler(void);
  71:startup_stm32g031xx.c **** 
  72:startup_stm32g031xx.c **** void WEAK WWDG_IRQHandler(void);
  73:startup_stm32g031xx.c **** void WEAK PVD_IRQHandler(void);
  74:startup_stm32g031xx.c **** void WEAK RTC_TAMP_IRQHandler(void);
  75:startup_stm32g031xx.c **** void WEAK FLASH_IRQHandler(void);
  76:startup_stm32g031xx.c **** void WEAK RCC_IRQHandler(void);
  77:startup_stm32g031xx.c **** void WEAK EXTI0_1_IRQHandler(void);
  78:startup_stm32g031xx.c **** void WEAK EXTI2_3_IRQHandler(void);
  79:startup_stm32g031xx.c **** void WEAK EXTI4_15_IRQHandler(void);
  80:startup_stm32g031xx.c **** void WEAK DMA1_Channel1_IRQHandler(void);
  81:startup_stm32g031xx.c **** void WEAK DMA1_Channel2_3_IRQHandler(void);
  82:startup_stm32g031xx.c **** void WEAK DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler(void);
  83:startup_stm32g031xx.c **** void WEAK ADC1_IRQHandler(void);
  84:startup_stm32g031xx.c **** void WEAK TIM1_BRK_UP_TRG_COM_IRQHandler(void);
  85:startup_stm32g031xx.c **** void WEAK TIM1_CC_IRQHandler(void);
  86:startup_stm32g031xx.c **** void WEAK TIM2_IRQHandler(void);
  87:startup_stm32g031xx.c **** void WEAK TIM3_IRQHandler(void);
  88:startup_stm32g031xx.c **** void WEAK LPTIM1_IRQHandler(void);
  89:startup_stm32g031xx.c **** void WEAK LPTIM2_IRQHandler(void);
  90:startup_stm32g031xx.c **** void WEAK TIM14_IRQHandler(void);
  91:startup_stm32g031xx.c **** void WEAK TIM16_IRQHandler(void);
  92:startup_stm32g031xx.c **** void WEAK TIM17_IRQHandler(void);
  93:startup_stm32g031xx.c **** void WEAK I2C1_IRQHandler(void);
  94:startup_stm32g031xx.c **** void WEAK I2C2_IRQHandler(void);
  95:startup_stm32g031xx.c **** void WEAK SPI1_IRQHandler(void);
  96:startup_stm32g031xx.c **** void WEAK SPI2_IRQHandler(void);
  97:startup_stm32g031xx.c **** void WEAK USART1_IRQHandler(void);
  98:startup_stm32g031xx.c **** void WEAK USART2_IRQHandler(void);
  99:startup_stm32g031xx.c **** void WEAK LPUSART1_IRQHandler(void);
 100:startup_stm32g031xx.c **** 
 101:startup_stm32g031xx.c **** 
 102:startup_stm32g031xx.c **** /* Private functions ---------------------------------------------------------*/
 103:startup_stm32g031xx.c **** /******************************************************************************
 104:startup_stm32g031xx.c **** *
 105:startup_stm32g031xx.c **** * mthomas: If been built with VECT_TAB_RAM this creates two tables:
 106:startup_stm32g031xx.c **** * (1) a minimal table (stack-pointer, reset-vector) used during startup
 107:startup_stm32g031xx.c **** *     before relocation of the vector table using SCB_VTOR
 108:startup_stm32g031xx.c **** * (2) a full table which is copied to RAM and used after vector relocation
 109:startup_stm32g031xx.c **** *     (NVIC_SetVectorTable)
 110:startup_stm32g031xx.c **** * If been built without VECT_TAB_RAM the following comment from STM is valid:
 111:startup_stm32g031xx.c **** * The minimal vector table for a Cortex M3.  Note that the proper constructs
 112:startup_stm32g031xx.c **** * must be placed on this to ensure that it ends up at physical address
 113:startup_stm32g031xx.c **** * 0x0000.0000.
 114:startup_stm32g031xx.c **** *
 115:startup_stm32g031xx.c **** ******************************************************************************/
 116:startup_stm32g031xx.c **** 
 117:startup_stm32g031xx.c **** __attribute__ ((section(".isr_vectors")))
 118:startup_stm32g031xx.c **** void (* const g_pfnVectors[])(void) =
 119:startup_stm32g031xx.c **** {
 120:startup_stm32g031xx.c ****     (intfunc)((unsigned long)&__stack_end), /* The stack pointer after relocation */
 121:startup_stm32g031xx.c ****     Reset_Handler,              /* Reset Handler */
 122:startup_stm32g031xx.c ****     NMI_Handler,                /* NMI Handler */
 123:startup_stm32g031xx.c ****     HardFault_Handler,          /* Hard Fault Handler */
 124:startup_stm32g031xx.c ****     0,
 125:startup_stm32g031xx.c ****     0,
 126:startup_stm32g031xx.c ****     0,
 127:startup_stm32g031xx.c ****     0,                          /* Reserved */
 128:startup_stm32g031xx.c ****     0,                          /* Reserved */
 129:startup_stm32g031xx.c ****     0,                          /* Reserved */
 130:startup_stm32g031xx.c ****     0,                          /* Reserved */
 131:startup_stm32g031xx.c **** 		SVC_Handler,                /* SVCall Handler - RTOS HOOK */
 132:startup_stm32g031xx.c ****     0,
 133:startup_stm32g031xx.c ****     0,                          /* Reserved */
 134:startup_stm32g031xx.c ****     PendSV_Handler,             /* PendSV Handler - RTOS HOOK */
 135:startup_stm32g031xx.c ****     SysTick_Handler,            /* SysTick Handler - RTOS HOOK */
 136:startup_stm32g031xx.c **** 
 137:startup_stm32g031xx.c ****     /* External Interrupts */
 138:startup_stm32g031xx.c ****     WWDG_IRQHandler,            /* Window Watchdog */
 139:startup_stm32g031xx.c ****     PVD_IRQHandler,             /* PVD through EXTI Line detect */
 140:startup_stm32g031xx.c ****     RTC_TAMP_IRQHandler,          /* Tamper */
 141:startup_stm32g031xx.c ****     FLASH_IRQHandler,           /* Flash */
 142:startup_stm32g031xx.c ****     RCC_IRQHandler,             /* RCC */
 143:startup_stm32g031xx.c ****     EXTI0_1_IRQHandler,           /* EXTI Line 0 */
 144:startup_stm32g031xx.c ****     EXTI2_3_IRQHandler,           /* EXTI Line 2 */
 145:startup_stm32g031xx.c ****     EXTI4_15_IRQHandler,           /* EXTI Line 4 */
 146:startup_stm32g031xx.c **** 		0,
 147:startup_stm32g031xx.c ****     DMA1_Channel1_IRQHandler,   /* DMA1 Channel 1 */
 148:startup_stm32g031xx.c ****     DMA1_Channel2_3_IRQHandler,   /* DMA1 Channel 2 */
 149:startup_stm32g031xx.c ****     DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler,   /* DMA1 Channel 4 */
 150:startup_stm32g031xx.c ****     ADC1_IRQHandler,          /* ADC1 & ADC2 */
 151:startup_stm32g031xx.c ****     TIM1_BRK_UP_TRG_COM_IRQHandler,        /* TIM1 Break */
 152:startup_stm32g031xx.c ****     TIM1_CC_IRQHandler,         /* TIM1 Capture Compare */
 153:startup_stm32g031xx.c ****     TIM2_IRQHandler,            /* TIM2 */
 154:startup_stm32g031xx.c ****     TIM3_IRQHandler,            /* TIM3 */
 155:startup_stm32g031xx.c ****     LPTIM1_IRQHandler,            /* TIM2 */
 156:startup_stm32g031xx.c ****     LPTIM2_IRQHandler,            /* TIM3 */
 157:startup_stm32g031xx.c ****     TIM14_IRQHandler,            /* TIM2 */
 158:startup_stm32g031xx.c **** 		0,
 159:startup_stm32g031xx.c ****     TIM16_IRQHandler,            /* TIM3 */
 160:startup_stm32g031xx.c ****     TIM17_IRQHandler,            /* TIM3 */
 161:startup_stm32g031xx.c ****     I2C1_IRQHandler,         /* I2C1 Event */
 162:startup_stm32g031xx.c ****     I2C2_IRQHandler,         /* I2C2 Event */
 163:startup_stm32g031xx.c ****     SPI1_IRQHandler,            /* SPI1 */
 164:startup_stm32g031xx.c ****     SPI2_IRQHandler,            /* SPI2 */
 165:startup_stm32g031xx.c ****     USART1_IRQHandler,          /* USART1 */
 166:startup_stm32g031xx.c ****     USART2_IRQHandler,          /* USART2 */
 167:startup_stm32g031xx.c ****     LPUSART1_IRQHandler,          /* USART3 */
 168:startup_stm32g031xx.c ****     0,
 169:startup_stm32g031xx.c **** };
 170:startup_stm32g031xx.c **** 
 171:startup_stm32g031xx.c **** 
 172:startup_stm32g031xx.c **** 
 173:startup_stm32g031xx.c **** /*******************************************************************************
 174:startup_stm32g031xx.c **** *
 175:startup_stm32g031xx.c **** * Provide weak aliases for each Exception handler to the Default_Handler.
 176:startup_stm32g031xx.c **** * As they are weak aliases, any function with the same name will override
 177:startup_stm32g031xx.c **** * this definition.
 178:startup_stm32g031xx.c **** *
 179:startup_stm32g031xx.c **** *******************************************************************************/
 180:startup_stm32g031xx.c **** #pragma weak NMI_Handler = Default_Handler
 181:startup_stm32g031xx.c **** #pragma weak HardFault_Handler = Default_Handler
 182:startup_stm32g031xx.c **** #pragma weak MemManage_Handler = Default_Handler
 183:startup_stm32g031xx.c **** #pragma weak SVC_Handler = Default_Handler
 184:startup_stm32g031xx.c **** #pragma weak PendSV_Handler = Default_Handler
 185:startup_stm32g031xx.c **** #pragma weak SysTick_Handler = Default_Handler
 186:startup_stm32g031xx.c **** #pragma weak WWDG_IRQHandler = Default_Handler
 187:startup_stm32g031xx.c **** #pragma weak PVD_IRQHandler = Default_Handler
 188:startup_stm32g031xx.c **** #pragma weak RTC_TAMP_IRQHandler = Default_Handler
 189:startup_stm32g031xx.c **** #pragma weak FLASH_IRQHandler = Default_Handler
 190:startup_stm32g031xx.c **** #pragma weak RCC_IRQHandler = Default_Handler
 191:startup_stm32g031xx.c **** #pragma weak EXTI0_1_IRQHandler = Default_Handler
 192:startup_stm32g031xx.c **** #pragma weak EXTI2_3_IRQHandler = Default_Handler
 193:startup_stm32g031xx.c **** #pragma weak EXTI4_15_IRQHandler = Default_Handler
 194:startup_stm32g031xx.c **** #pragma weak DMA1_Channel1_IRQHandler = Default_Handler
 195:startup_stm32g031xx.c **** #pragma weak DMA1_Channel2_3_IRQHandler = Default_Handler
 196:startup_stm32g031xx.c **** #pragma weak DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler = Default_Handler
 197:startup_stm32g031xx.c **** #pragma weak ADC1_IRQHandler = Default_Handler
 198:startup_stm32g031xx.c **** #pragma weak TIM1_BRK_UP_TRG_COM_IRQHandler = Default_Handler
 199:startup_stm32g031xx.c **** #pragma weak TIM1_CC_IRQHandler = Default_Handler
 200:startup_stm32g031xx.c **** #pragma weak TIM2_IRQHandler = Default_Handler
 201:startup_stm32g031xx.c **** #pragma weak TIM3_IRQHandler = Default_Handler
 202:startup_stm32g031xx.c **** #pragma weak LPTIM1_IRQHandler = Default_Handler
 203:startup_stm32g031xx.c **** #pragma weak LPTIM2_IRQHandler = Default_Handler
 204:startup_stm32g031xx.c **** #pragma weak TIM14_IRQHandler = Default_Handler
 205:startup_stm32g031xx.c **** #pragma weak TIM16_IRQHandler = Default_Handler
 206:startup_stm32g031xx.c **** #pragma weak TIM17_IRQHandler = Default_Handler
 207:startup_stm32g031xx.c **** #pragma weak I2C1_IRQHandler = Default_Handler
 208:startup_stm32g031xx.c **** #pragma weak I2C2_IRQHandler = Default_Handler
 209:startup_stm32g031xx.c **** #pragma weak SPI1_IRQHandler = Default_Handler
 210:startup_stm32g031xx.c **** #pragma weak SPI2_IRQHandler = Default_Handler
 211:startup_stm32g031xx.c **** #pragma weak USART1_IRQHandler = Default_Handler
 212:startup_stm32g031xx.c **** #pragma weak USART2_IRQHandler = Default_Handler
 213:startup_stm32g031xx.c **** #pragma weak LPUSART1_IRQHandler = Default_Handler
 214:startup_stm32g031xx.c **** 
 215:startup_stm32g031xx.c **** /**
 216:startup_stm32g031xx.c ****  * @brief  This is the code that gets called when the processor receives an
 217:startup_stm32g031xx.c ****  *         unexpected interrupt.  This simply enters an infinite loop, preserving
 218:startup_stm32g031xx.c ****  *         the system state for examination by a debugger.
 219:startup_stm32g031xx.c ****  *
 220:startup_stm32g031xx.c ****  * @param  None
 221:startup_stm32g031xx.c ****  * @retval : None
 222:startup_stm32g031xx.c **** */
 223:startup_stm32g031xx.c **** 
 224:startup_stm32g031xx.c **** void Default_Handler(void)
 225:startup_stm32g031xx.c **** {
  80              		.loc 1 225 1
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 1, uses_anonymous_args = 0
  84 0000 80B5     		push	{r7, lr}
  85              	.LCFI0:
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 00AF     		add	r7, sp, #0
  90              	.LCFI1:
  91              		.cfi_def_cfa_register 7
  92              	.L2:
 226:startup_stm32g031xx.c ****   /* Go into an infinite loop. */
 227:startup_stm32g031xx.c ****   while (1)
  93              		.loc 1 227 9 discriminator 1
  94 0004 FEE7     		b	.L2
  95              		.cfi_endproc
  96              	.LFE0:
  98              		.weak	MemManage_Handler
  99              		.thumb_set MemManage_Handler,Default_Handler
 100              		.weak	LPUSART1_IRQHandler
 101              		.thumb_set LPUSART1_IRQHandler,Default_Handler
 102              		.weak	USART2_IRQHandler
 103              		.thumb_set USART2_IRQHandler,Default_Handler
 104              		.weak	USART1_IRQHandler
 105              		.thumb_set USART1_IRQHandler,Default_Handler
 106              		.weak	SPI2_IRQHandler
 107              		.thumb_set SPI2_IRQHandler,Default_Handler
 108              		.weak	SPI1_IRQHandler
 109              		.thumb_set SPI1_IRQHandler,Default_Handler
 110              		.weak	I2C2_IRQHandler
 111              		.thumb_set I2C2_IRQHandler,Default_Handler
 112              		.weak	I2C1_IRQHandler
 113              		.thumb_set I2C1_IRQHandler,Default_Handler
 114              		.weak	TIM17_IRQHandler
 115              		.thumb_set TIM17_IRQHandler,Default_Handler
 116              		.weak	TIM16_IRQHandler
 117              		.thumb_set TIM16_IRQHandler,Default_Handler
 118              		.weak	TIM14_IRQHandler
 119              		.thumb_set TIM14_IRQHandler,Default_Handler
 120              		.weak	LPTIM2_IRQHandler
 121              		.thumb_set LPTIM2_IRQHandler,Default_Handler
 122              		.weak	LPTIM1_IRQHandler
 123              		.thumb_set LPTIM1_IRQHandler,Default_Handler
 124              		.weak	TIM3_IRQHandler
 125              		.thumb_set TIM3_IRQHandler,Default_Handler
 126              		.weak	TIM2_IRQHandler
 127              		.thumb_set TIM2_IRQHandler,Default_Handler
 128              		.weak	TIM1_CC_IRQHandler
 129              		.thumb_set TIM1_CC_IRQHandler,Default_Handler
 130              		.weak	TIM1_BRK_UP_TRG_COM_IRQHandler
 131              		.thumb_set TIM1_BRK_UP_TRG_COM_IRQHandler,Default_Handler
 132              		.weak	ADC1_IRQHandler
 133              		.thumb_set ADC1_IRQHandler,Default_Handler
 134              		.weak	DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler
 135              		.thumb_set DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler,Default_Handler
 136              		.weak	DMA1_Channel2_3_IRQHandler
 137              		.thumb_set DMA1_Channel2_3_IRQHandler,Default_Handler
 138              		.weak	DMA1_Channel1_IRQHandler
 139              		.thumb_set DMA1_Channel1_IRQHandler,Default_Handler
 140              		.weak	EXTI4_15_IRQHandler
 141              		.thumb_set EXTI4_15_IRQHandler,Default_Handler
 142              		.weak	EXTI2_3_IRQHandler
 143              		.thumb_set EXTI2_3_IRQHandler,Default_Handler
 144              		.weak	EXTI0_1_IRQHandler
 145              		.thumb_set EXTI0_1_IRQHandler,Default_Handler
 146              		.weak	RCC_IRQHandler
 147              		.thumb_set RCC_IRQHandler,Default_Handler
 148              		.weak	FLASH_IRQHandler
 149              		.thumb_set FLASH_IRQHandler,Default_Handler
 150              		.weak	RTC_TAMP_IRQHandler
 151              		.thumb_set RTC_TAMP_IRQHandler,Default_Handler
 152              		.weak	PVD_IRQHandler
 153              		.thumb_set PVD_IRQHandler,Default_Handler
 154              		.weak	WWDG_IRQHandler
 155              		.thumb_set WWDG_IRQHandler,Default_Handler
 156              		.weak	SysTick_Handler
 157              		.thumb_set SysTick_Handler,Default_Handler
 158              		.weak	PendSV_Handler
 159              		.thumb_set PendSV_Handler,Default_Handler
 160              		.weak	SVC_Handler
 161              		.thumb_set SVC_Handler,Default_Handler
 162              		.weak	HardFault_Handler
 163              		.thumb_set HardFault_Handler,Default_Handler
 164              		.weak	NMI_Handler
 165              		.thumb_set NMI_Handler,Default_Handler
 166              		.text
 167              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 startup_stm32g031xx.c
     /tmp/ccN9ewzD.s:20     .isr_vectors:0000000000000000 g_pfnVectors
     /tmp/ccN9ewzD.s:17     .isr_vectors:0000000000000000 $d
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 NMI_Handler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 HardFault_Handler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 SVC_Handler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 PendSV_Handler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 SysTick_Handler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 WWDG_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 PVD_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 RTC_TAMP_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 FLASH_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 RCC_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 EXTI0_1_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 EXTI2_3_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 EXTI4_15_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 DMA1_Channel1_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 DMA1_Channel2_3_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 ADC1_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 TIM1_BRK_UP_TRG_COM_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 TIM1_CC_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 TIM2_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 TIM3_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 LPTIM1_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 LPTIM2_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 TIM14_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 TIM16_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 TIM17_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 I2C1_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 I2C2_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 SPI1_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 SPI2_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 USART1_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 USART2_IRQHandler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 LPUSART1_IRQHandler
     /tmp/ccN9ewzD.s:69     .text.Default_Handler:0000000000000000 $t
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 Default_Handler
     /tmp/ccN9ewzD.s:77     .text.Default_Handler:0000000000000000 MemManage_Handler

UNDEFINED SYMBOLS
__stack_end
Reset_Handler
