
FLASH_RUN/stm32g0_disco/stm32g0_disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vectors  000000bc  20000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  1 .text         00001338  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  2 .rodata       000001f7  080013f8  080013f8  000113f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data.rel.ro  00000004  080015f0  080015f0  000115f0  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  4 .got          00000064  200000bc  080015f4  000115f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000120  08001658  00020120  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  6 .tbss_space   00000000  20000138  20000138  00020138  2**0
                  CONTENTS
  7 .bss          00000078  20000140  08000140  00020140  2**4
                  ALLOC
  8 .heap         00000000  200001b8  200001b8  00020138  2**0
                  CONTENTS
  9 .stack        00001000  200001b8  080001b8  00020140  2**0
                  ALLOC
 10 .comment      00000079  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 11 .ARM.attributes 00000032  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000268  00000000  00000000  000201e8  2**3
                  CONTENTS, RELOC, READONLY, DEBUGGING
 13 .debug_info   00003303  00000000  00000000  00020450  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 14 .debug_abbrev 000011df  00000000  00000000  00023753  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00001f60  00000000  00000000  00024932  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 16 .debug_frame  000004a0  00000000  00000000  00026894  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 17 .debug_str    00000ee1  00000000  00000000  00026d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000142e  00000000  00000000  00027c15  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 19 .debug_ranges 000001d0  00000000  00000000  00029043  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
	mov r2, pc
 80000c0:	467a      	mov	r2, pc
	ldr r7, =Reset_Handler
 80000c2:	4f48      	ldr	r7, [pc, #288]	; (80001e4 <LoopForever+0x4>)
	subs r7, r2, r7 // subtract stored pc and reset_handler address
 80000c4:	1bd7      	subs	r7, r2, r7
	subs r7, r7, 3 // adjust for instruction size
 80000c6:	3f03      	subs	r7, #3

  ldr   r0, =__stack_end
 80000c8:	4847      	ldr	r0, [pc, #284]	; (80001e8 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
 80000ca:	4685      	mov	sp, r0

  // store firmware offset 
  ldr r2, =gu32FirmwareOffset
 80000cc:	4a47      	ldr	r2, [pc, #284]	; (80001ec <LoopForever+0xc>)
  str r7, [r2]
 80000ce:	6017      	str	r7, [r2, #0]

  // calculate absolute position of firmware
  ldr r1, =__flash_begin;
 80000d0:	4947      	ldr	r1, [pc, #284]	; (80001f0 <LoopForever+0x10>)
	adds r1, r1, r7
 80000d2:	19c9      	adds	r1, r1, r7
  ldr r2, =gu32FirmwareAbsPosition
 80000d4:	4a47      	ldr	r2, [pc, #284]	; (80001f4 <LoopForever+0x14>)
  str r1, [r2]
 80000d6:	6011      	str	r1, [r2, #0]

  // Store vector table RAM being address dynamically so systemconfig can map it
  ldr r7, =__ram_vector_table_begin
 80000d8:	4f47      	ldr	r7, [pc, #284]	; (80001f8 <LoopForever+0x18>)
  ldr r2, =gu32RamVectorTableBegin
 80000da:	4a48      	ldr	r2, [pc, #288]	; (80001fc <LoopForever+0x1c>)
  str r7, [r2]
 80000dc:	6017      	str	r7, [r2, #0]

080000de <GlobalOffsetTableCopyPatchInit>:



  // GOT needs to be in RAM in every case
GlobalOffsetTableCopyPatchInit:
  movs r0, #0 // Loop variable
 80000de:	2000      	movs	r0, #0
  movs r1, #0 // Pointer (just introduction)
 80000e0:	2100      	movs	r1, #0

080000e2 <GlobalOffsetTableCopyPatchLoopCond>:

GlobalOffsetTableCopyPatchLoopCond:
  ldr r2, =__flash_global_offset_table_begin // Need global offset table table beginning for pointer
 80000e2:	4a47      	ldr	r2, [pc, #284]	; (8000200 <LoopForever+0x20>)
  ldr r3, =__flash_global_offset_table_end // And need end for checking loop
 80000e4:	4b47      	ldr	r3, [pc, #284]	; (8000204 <LoopForever+0x24>)
  ldr r4, =gu32FirmwareOffset // Need also data offset variable address
 80000e6:	4c41      	ldr	r4, [pc, #260]	; (80001ec <LoopForever+0xc>)
  ldr r4, [r4] // And the actual offset value
 80000e8:	6824      	ldr	r4, [r4, #0]
  adds r2, r2, r4 // Patching flash global offset table begin to honour offset
 80000ea:	1912      	adds	r2, r2, r4
  adds r3, r3, r4 // Patching flash global offset table end to honour offset
 80000ec:	191b      	adds	r3, r3, r4
  adds r1, r0, r2 // Pointer value is loop variable + offsetted flash global offset table begin
 80000ee:	1881      	adds	r1, r0, r2
  cmp r1, r3 // Compare pointer against global offset table flash end
 80000f0:	4299      	cmp	r1, r3
  bhs GlobalOffsetTableCopyPatchEnd // If getting past limits, go to end
 80000f2:	d20e      	bcs.n	8000112 <GlobalOffsetTableCopyPatchEnd>

080000f4 <GlobalOffsetTableCopyPatchLoopBody>:

GlobalOffsetTableCopyPatchLoopBody:
  ldr r2, [r1] // Load the actual data via pointer
 80000f4:	680a      	ldr	r2, [r1, #0]
  ldr r3, =__flash_begin // Need flash begin boundary for checking
 80000f6:	4b3e      	ldr	r3, [pc, #248]	; (80001f0 <LoopForever+0x10>)
  ldr r4, =__flash_end // Need also flash end boundary for checking
 80000f8:	4c43      	ldr	r4, [pc, #268]	; (8000208 <LoopForever+0x28>)
  cmp r2, r3 // Comparing loaded data to flash begin
 80000fa:	429a      	cmp	r2, r3
  blo GlobalOffsetTableStoreData // If less than flash begin, jump to store
 80000fc:	d304      	bcc.n	8000108 <GlobalOffsetTableStoreData>
  cmp r2, r4 // Comparing loaded data to flash end
 80000fe:	42a2      	cmp	r2, r4
  bhs GlobalOffsetTableStoreData // If more than or equal to end, jump to store
 8000100:	d202      	bcs.n	8000108 <GlobalOffsetTableStoreData>

08000102 <GlobalOffsetTablePatchData>:

GlobalOffsetTablePatchData:
  ldr r3, =gu32FirmwareOffset // Need data offset variable address
 8000102:	4b3a      	ldr	r3, [pc, #232]	; (80001ec <LoopForever+0xc>)
  ldr r3, [r3] // And then the actual data
 8000104:	681b      	ldr	r3, [r3, #0]
  adds r2, r2, r3 // Patch the data
 8000106:	18d2      	adds	r2, r2, r3

08000108 <GlobalOffsetTableStoreData>:

GlobalOffsetTableStoreData:
  ldr r3, =__ram_global_offset_table_begin // Get global offset table begin in ram for ram data pointer
 8000108:	4b40      	ldr	r3, [pc, #256]	; (800020c <LoopForever+0x2c>)
  adds r3, r3, r0 // Add loop variable
 800010a:	181b      	adds	r3, r3, r0
  str r2, [r3] // Store the data
 800010c:	601a      	str	r2, [r3, #0]

0800010e <GlobalOffsetTableLoopIncrements>:

GlobalOffsetTableLoopIncrements:
  adds r0, r0, #4 // Increment loop
 800010e:	3004      	adds	r0, #4
  b GlobalOffsetTableCopyPatchLoopCond // Jump to loop condition checking
 8000110:	e7e7      	b.n	80000e2 <GlobalOffsetTableCopyPatchLoopCond>

08000112 <GlobalOffsetTableCopyPatchEnd>:

GlobalOffsetTableCopyPatchEnd:
  ldr r0, =__ram_global_offset_table_begin
 8000112:	483e      	ldr	r0, [pc, #248]	; (800020c <LoopForever+0x2c>)
  mov r9, r0 // Stupid trick to put global offset table location to r9, for Cortex-M0
 8000114:	4681      	mov	r9, r0

08000116 <VectorTableCopyPatchInit>:


  // Need to copy and patch vector table in assembly so nobody comes to mess around
VectorTableCopyPatchInit:
  movs r0, #0 // Loop variable
 8000116:	2000      	movs	r0, #0
  movs r1, #0 // Pointer (just introduction)
 8000118:	2100      	movs	r1, #0

0800011a <VectorTableCopyPatchLoopCond>:

VectorTableCopyPatchLoopCond:
  ldr r2, =__flash_vector_table_begin // Need vector table beginning for pointer
 800011a:	4a3d      	ldr	r2, [pc, #244]	; (8000210 <LoopForever+0x30>)
  ldr r3, =__flash_vector_table_end // And need end for checking loop
 800011c:	4b3d      	ldr	r3, [pc, #244]	; (8000214 <LoopForever+0x34>)
  ldr r4, =gu32FirmwareOffset // Need also data offset variable address
 800011e:	4c33      	ldr	r4, [pc, #204]	; (80001ec <LoopForever+0xc>)
  ldr r4, [r4] // And the actual offset value
 8000120:	6824      	ldr	r4, [r4, #0]
  adds r2, r2, r4 // Patching flash vector table begin to honour offset
 8000122:	1912      	adds	r2, r2, r4
  adds r3, r3, r4 // Patching flash vector table end to honour offset
 8000124:	191b      	adds	r3, r3, r4
  adds r1, r0, r2 // Pointer value is loop variable + offsetted flash vector table begin
 8000126:	1881      	adds	r1, r0, r2
  cmp r1, r3 // Compare pointer against vector table flash end
 8000128:	4299      	cmp	r1, r3
  bhs VectorTableCopyPatchEnd // If getting past limits, go to end
 800012a:	d20b      	bcs.n	8000144 <VectorTableCopyPatchEnd>

0800012c <VectorTableCopyPatchLoopBody>:

VectorTableCopyPatchLoopBody:
  ldr r2, [r1] // Load the actual data via pointer
 800012c:	680a      	ldr	r2, [r1, #0]
  ldr r3, =__flash_begin // Need flash begin boundary for checking
 800012e:	4b30      	ldr	r3, [pc, #192]	; (80001f0 <LoopForever+0x10>)
  ldr r4, =__flash_end // Need also flash end boundary for checking
 8000130:	4c35      	ldr	r4, [pc, #212]	; (8000208 <LoopForever+0x28>)
  cmp r2, r3 // Comparing loaded data to flash begin
 8000132:	429a      	cmp	r2, r3
  blo VectorTableStoreData // If less than flash begin, jump to store
 8000134:	d301      	bcc.n	800013a <VectorTableStoreData>
  cmp r2, r4 // Comparing loaded data to flash end
 8000136:	42a2      	cmp	r2, r4
  bhs VectorTableStoreData // If more than or equal to end, jump to store
 8000138:	d2ff      	bcs.n	800013a <VectorTableStoreData>

0800013a <VectorTableStoreData>:
#  ldr r3, =gu32FirmwareOffset // Need data offset variable address
#  ldr r3, [r3] // And then the actual data
#  adds r2, r2, r3 // Patch the data

VectorTableStoreData:
  ldr r3, =__ram_vector_table_begin // Get vector table begin in ram for ram data pointer
 800013a:	4b2f      	ldr	r3, [pc, #188]	; (80001f8 <LoopForever+0x18>)
  adds r3, r3, r0 // Add loop variable
 800013c:	181b      	adds	r3, r3, r0
  str r2, [r3] // Store the data
 800013e:	601a      	str	r2, [r3, #0]

08000140 <VectorTableLoopIncrements>:

VectorTableLoopIncrements:
  adds r0, r0, #4 // Increment loop
 8000140:	3004      	adds	r0, #4
  b VectorTableCopyPatchLoopCond // Jump to loop condition checking
 8000142:	e7ea      	b.n	800011a <VectorTableCopyPatchLoopCond>

08000144 <VectorTableCopyPatchEnd>:

VectorTableCopyPatchEnd:


  // Copy the data segment initializers from flash to SRAM.
  ldr r0, =__data_start
 8000144:	4834      	ldr	r0, [pc, #208]	; (8000218 <LoopForever+0x38>)
  ldr r1, =__data_end
 8000146:	4935      	ldr	r1, [pc, #212]	; (800021c <LoopForever+0x3c>)
  ldr r2, =__data_source
 8000148:	4a35      	ldr	r2, [pc, #212]	; (8000220 <LoopForever+0x40>)
  ldr r7, =gu32FirmwareOffset // Load firmware offset variable address
 800014a:	4f28      	ldr	r7, [pc, #160]	; (80001ec <LoopForever+0xc>)
  ldr r7, [r7] // Load the actual firmware offset variable data
 800014c:	683f      	ldr	r7, [r7, #0]
  adds r2, r2, r7 // Patch the sidata location with offset
 800014e:	19d2      	adds	r2, r2, r7
  movs r3, #0
 8000150:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000152:	e002      	b.n	800015a <LoopCopyDataInit>

08000154 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000154:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000156:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000158:	3304      	adds	r3, #4

0800015a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800015a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800015c:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800015e:	d3f9      	bcc.n	8000154 <CopyDataInit>

  // Zero fill the bss segment.
  ldr r2, =__bss_start
 8000160:	4a30      	ldr	r2, [pc, #192]	; (8000224 <LoopForever+0x44>)
  ldr r4, =__bss_end
 8000162:	4c31      	ldr	r4, [pc, #196]	; (8000228 <LoopForever+0x48>)
  movs r3, #0
 8000164:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000166:	e00a      	b.n	800017e <LoopFillZerobss>

08000168 <FillZerobss>:

FillZerobss:
  // Here we need to check that we are not zeroing out addresses or needed symbols

  ldr r6, =gu32FirmwareAbsPosition // Load address of absolute firmware position variable
 8000168:	4e22      	ldr	r6, [pc, #136]	; (80001f4 <LoopForever+0x14>)
  cmp r2, r6 // Compare with what we are going to zero
 800016a:	42b2      	cmp	r2, r6
  beq FillZerobssSkip // If we should skip zeroing, jump away
 800016c:	d006      	beq.n	800017c <FillZerobssSkip>

  ldr r6, =gu32FirmwareOffset // Load address of firmware offset variable
 800016e:	4e1f      	ldr	r6, [pc, #124]	; (80001ec <LoopForever+0xc>)
  cmp r2, r6 // Compare with what we are going to zero
 8000170:	42b2      	cmp	r2, r6
  beq FillZerobssSkip // If we should skip zeroing, jump away
 8000172:	d003      	beq.n	800017c <FillZerobssSkip>

  ldr r6, =gu32RamVectorTableBegin // Vector table location in RAM
 8000174:	4e21      	ldr	r6, [pc, #132]	; (80001fc <LoopForever+0x1c>)
  cmp r2, r6 // Compare with what we are going to zero
 8000176:	42b2      	cmp	r2, r6
  beq FillZerobssSkip // If we should skip zeroing, jump away
 8000178:	d000      	beq.n	800017c <FillZerobssSkip>

  str  r3, [r2] // If not escaped yet, make the store
 800017a:	6013      	str	r3, [r2, #0]

0800017c <FillZerobssSkip>:

FillZerobssSkip:
  adds r2, r2, #4
 800017c:	3204      	adds	r2, #4

0800017e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800017e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000180:	d3f2      	bcc.n	8000168 <FillZerobss>


// patch relocations
  ldr r5, =gu32FirmwareOffset // Load address of firmware offset variable
 8000182:	4d1a      	ldr	r5, [pc, #104]	; (80001ec <LoopForever+0xc>)
	ldr r5, [r5] // load offset
 8000184:	682d      	ldr	r5, [r5, #0]

	// the "best" way would be to get __end_of_flash from GOT
  ldr r2, =__end_of_flash // Load address of absolute firmware position variable
 8000186:	4a29      	ldr	r2, [pc, #164]	; (800022c <LoopForever+0x4c>)
	adds r2, r2, r5 // add offset to __end_of_flash,
 8000188:	1952      	adds	r2, r2, r5
  ldr r6, [r2] // load relocation count
 800018a:	6816      	ldr	r6, [r2, #0]

0800018c <LoopRelocations>:

LoopRelocations:

	cmp r6, 0
 800018c:	2e00      	cmp	r6, #0
	beq LoopRelocationsEnd
 800018e:	d006      	beq.n	800019e <CallPreinitsInit>

	adds r2, r2, 4 // next member of table
 8000190:	3204      	adds	r2, #4

	ldr r3, [r2] // load address from table
 8000192:	6813      	ldr	r3, [r2, #0]

	ldr r4, [r3]    // load value from ram 
 8000194:	681c      	ldr	r4, [r3, #0]
	// TODO: check sanity of address: only addresses pointing to FLASH are to be relocated
	adds r4, r4, r5 // patch ram value
 8000196:	1964      	adds	r4, r4, r5
	str r4, [r3]    // put value back
 8000198:	601c      	str	r4, [r3, #0]

	subs r6, r6, 1 // decrement
 800019a:	3e01      	subs	r6, #1
	b LoopRelocations
 800019c:	e7f6      	b.n	800018c <LoopRelocations>

0800019e <CallPreinitsInit>:
LoopRelocationsEnd:


  // Make our own __libc_init_array
CallPreinitsInit:
  ldr r7, =gu32FirmwareOffset
 800019e:	4f13      	ldr	r7, [pc, #76]	; (80001ec <LoopForever+0xc>)
  ldr r7, [r7]
 80001a0:	683f      	ldr	r7, [r7, #0]
  ldr r0, =__preinit_array_start
 80001a2:	4823      	ldr	r0, [pc, #140]	; (8000230 <LoopForever+0x50>)
  adds r0, r7
 80001a4:	19c0      	adds	r0, r0, r7
  ldr r1, =__preinit_array_end
 80001a6:	4923      	ldr	r1, [pc, #140]	; (8000234 <LoopForever+0x54>)
  adds r1, r7
 80001a8:	19c9      	adds	r1, r1, r7

080001aa <CallPreinitsLoopCond>:

CallPreinitsLoopCond:
  cmp r0, r1
 80001aa:	4288      	cmp	r0, r1
  beq CallPreinitsEnd// If same, it is at end, go away
 80001ac:	d007      	beq.n	80001be <CallInitsInit>

080001ae <CallPreinitsLoop>:

CallPreinitsLoop:
  ldr r5, =__init_array_start
 80001ae:	4d22      	ldr	r5, [pc, #136]	; (8000238 <LoopForever+0x58>)
  ldr r4, =__init_array_end // Yes, order is funny to say the least
 80001b0:	4c22      	ldr	r4, [pc, #136]	; (800023c <LoopForever+0x5c>)
  ldr r3, [r0]
 80001b2:	6803      	ldr	r3, [r0, #0]
  push {r0, r1, r2, r3, r4, r5, r6, r7} // Save context because calling externals
 80001b4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
  blx r3
 80001b6:	4798      	blx	r3
  pop {r0, r1, r2, r3, r4, r5, r6, r7} // Retrieve context
 80001b8:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
  adds r0, r0, #4
 80001ba:	3004      	adds	r0, #4
  b CallPreinitsLoopCond
 80001bc:	e7f5      	b.n	80001aa <CallPreinitsLoopCond>

080001be <CallInitsInit>:
#  push {r0, r1, r2, r3, r4, r5, r6, r7} // Save context because calling externals
#  blx r3
#  pop {r0, r1, r2, r3, r4, r5, r6, r7} // Retrieve context

CallInitsInit:
  ldr r5, =__init_array_start
 80001be:	4d1e      	ldr	r5, [pc, #120]	; (8000238 <LoopForever+0x58>)
  adds r5, r7
 80001c0:	19ed      	adds	r5, r5, r7
  ldr r4, =__init_array_end
 80001c2:	4c1e      	ldr	r4, [pc, #120]	; (800023c <LoopForever+0x5c>)
  adds r4, r7
 80001c4:	19e4      	adds	r4, r4, r7
  ldr r7, =gu32FirmwareOffset
 80001c6:	4f09      	ldr	r7, [pc, #36]	; (80001ec <LoopForever+0xc>)
  ldr r7, [r7]
 80001c8:	683f      	ldr	r7, [r7, #0]

080001ca <CallInitsLoopCond>:

CallInitsLoopCond:
  cmp r5, r4
 80001ca:	42a5      	cmp	r5, r4
  beq CallInitsEnd
 80001cc:	d006      	beq.n	80001dc <CallInitsEnd>

080001ce <CallInitsLoop>:

CallInitsLoop:
  ldr r3, [r5]
 80001ce:	682b      	ldr	r3, [r5, #0]
  add r3, r3, r7
 80001d0:	443b      	add	r3, r7
  push {r0, r1, r2, r3, r4, r5, r6, r7} // Save context because calling externals
 80001d2:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
  blx r3
 80001d4:	4798      	blx	r3
  pop {r0, r1, r2, r3, r4, r5, r6, r7} // Retrieve context
 80001d6:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
  adds r5, r5, #4
 80001d8:	3504      	adds	r5, #4
  b CallInitsLoopCond
 80001da:	e7f6      	b.n	80001ca <CallInitsLoopCond>

080001dc <CallInitsEnd>:

CallInitsEnd:

/* Call the application s entry point.*/
  bl main
 80001dc:	f000 f838 	bl	8000250 <main>
			80001dc: R_ARM_THM_CALL	main

080001e0 <LoopForever>:

LoopForever:
  b LoopForever
 80001e0:	e7fe      	b.n	80001e0 <LoopForever>
 80001e2:	0000      	.short	0x0000
	ldr r7, =Reset_Handler
 80001e4:	080000c1 	.word	0x080000c1
			80001e4: R_ARM_ABS32	Reset_Handler
  ldr   r0, =__stack_end
 80001e8:	200011b8 	.word	0x200011b8
			80001e8: R_ARM_ABS32	__stack_end
  ldr r2, =gu32FirmwareOffset
 80001ec:	20000140 	.word	0x20000140
			80001ec: R_ARM_ABS32	gu32FirmwareOffset
  ldr r1, =__flash_begin;
 80001f0:	08000000 	.word	0x08000000
			80001f0: R_ARM_ABS32	__flash_begin
  ldr r2, =gu32FirmwareAbsPosition
 80001f4:	20000144 	.word	0x20000144
			80001f4: R_ARM_ABS32	gu32FirmwareAbsPosition
  ldr r7, =__ram_vector_table_begin
 80001f8:	20000000 	.word	0x20000000
			80001f8: R_ARM_ABS32	__ram_vector_table_begin
  ldr r2, =gu32RamVectorTableBegin
 80001fc:	20000148 	.word	0x20000148
			80001fc: R_ARM_ABS32	gu32RamVectorTableBegin
  ldr r2, =__flash_global_offset_table_begin // Need global offset table table beginning for pointer
 8000200:	080015f4 	.word	0x080015f4
			8000200: R_ARM_ABS32	__flash_global_offset_table_begin
  ldr r3, =__flash_global_offset_table_end // And need end for checking loop
 8000204:	08001658 	.word	0x08001658
			8000204: R_ARM_ABS32	__flash_global_offset_table_end
  ldr r4, =__flash_end // Need also flash end boundary for checking
 8000208:	08008000 	.word	0x08008000
			8000208: R_ARM_ABS32	__flash_end
  ldr r3, =__ram_global_offset_table_begin // Get global offset table begin in ram for ram data pointer
 800020c:	200000bc 	.word	0x200000bc
			800020c: R_ARM_ABS32	__ram_global_offset_table_begin
  ldr r2, =__flash_vector_table_begin // Need vector table beginning for pointer
 8000210:	08000000 	.word	0x08000000
			8000210: R_ARM_ABS32	__flash_vector_table_begin
  ldr r3, =__flash_vector_table_end // And need end for checking loop
 8000214:	080000bc 	.word	0x080000bc
			8000214: R_ARM_ABS32	__flash_vector_table_end
  ldr r0, =__data_start
 8000218:	20000120 	.word	0x20000120
			8000218: R_ARM_ABS32	__data_start
  ldr r1, =__data_end
 800021c:	20000138 	.word	0x20000138
			800021c: R_ARM_ABS32	__data_end
  ldr r2, =__data_source
 8000220:	08001658 	.word	0x08001658
			8000220: R_ARM_ABS32	__data_source
  ldr r2, =__bss_start
 8000224:	20000138 	.word	0x20000138
			8000224: R_ARM_ABS32	__bss_start
  ldr r4, =__bss_end
 8000228:	200001b8 	.word	0x200001b8
			8000228: R_ARM_ABS32	__bss_end
  ldr r2, =__end_of_flash // Load address of absolute firmware position variable
 800022c:	08001670 	.word	0x08001670
			800022c: R_ARM_ABS32	__end_of_flash
  ldr r0, =__preinit_array_start
 8000230:	080013f8 	.word	0x080013f8
			8000230: R_ARM_ABS32	__preinit_array_start
  ldr r1, =__preinit_array_end
 8000234:	080013f8 	.word	0x080013f8
			8000234: R_ARM_ABS32	__preinit_array_end
  ldr r5, =__init_array_start
 8000238:	080013f8 	.word	0x080013f8
			8000238: R_ARM_ABS32	__init_array_start
  ldr r4, =__init_array_end // Yes, order is funny to say the least
 800023c:	080013f8 	.word	0x080013f8
			800023c: R_ARM_ABS32	__init_array_end

08000240 <test>:

#include "systime.h"
#include "led.h"

void test(void *arg)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	(void) arg;
//	while(1);
	return;
 8000248:	46c0      	nop			; (mov r8, r8)
}
 800024a:	46bd      	mov	sp, r7
 800024c:	b002      	add	sp, #8
 800024e:	bd80      	pop	{r7, pc}

08000250 <main>:

extern char __end_of_flash[];

int main(void)
{
 8000250:	b5b0      	push	{r4, r5, r7, lr}
 8000252:	af00      	add	r7, sp, #0
 8000254:	464c      	mov	r4, r9
	SystemInit();
 8000256:	f000 fcc7 	bl	8000be8 <SystemInit>
			8000256: R_ARM_THM_CALL	SystemInit
	SystemCoreClockUpdate();
 800025a:	f000 fcd5 	bl	8000c08 <SystemCoreClockUpdate>
			800025a: R_ARM_THM_CALL	SystemCoreClockUpdate

	RCC->IOPENR |= 0x2f;
 800025e:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <main+0x58>)
 8000260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000262:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <main+0x58>)
 8000264:	212f      	movs	r1, #47	; 0x2f
 8000266:	430a      	orrs	r2, r1
 8000268:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->APBENR2 |= RCC_APBENR2_SYSCFGEN;
 800026a:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <main+0x58>)
 800026c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <main+0x58>)
 8000270:	2101      	movs	r1, #1
 8000272:	430a      	orrs	r2, r1
 8000274:	641a      	str	r2, [r3, #64]	; 0x40

	systime_init();
 8000276:	f000 fbf3 	bl	8000a60 <systime_init>
			8000276: R_ARM_THM_CALL	systime_init
	led_init();
 800027a:	f000 f9cf 	bl	800061c <led_init>
			800027a: R_ARM_THM_CALL	led_init

	led_set(0, LED_3BLINK);	
 800027e:	2186      	movs	r1, #134	; 0x86
 8000280:	2000      	movs	r0, #0
 8000282:	f000 f9ff 	bl	8000684 <led_set>
			8000282: R_ARM_THM_CALL	led_set

	printf("ou yeah! %08x %08x\n", __end_of_flash, test);
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <main+0x5c>)
 8000288:	58e3      	ldr	r3, [r4, r3]
 800028a:	001a      	movs	r2, r3
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <main+0x60>)
 800028e:	58e3      	ldr	r3, [r4, r3]
 8000290:	0019      	movs	r1, r3
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <main+0x64>)
 8000294:	58e3      	ldr	r3, [r4, r3]
 8000296:	0018      	movs	r0, r3
 8000298:	f000 fd88 	bl	8000dac <printf>
			8000298: R_ARM_THM_CALL	printf

	while (1) {
		systime_periodic();
 800029c:	f000 fc14 	bl	8000ac8 <systime_periodic>
			800029c: R_ARM_THM_CALL	systime_periodic
		led_periodic();
 80002a0:	f000 fa18 	bl	80006d4 <led_periodic>
			80002a0: R_ARM_THM_CALL	led_periodic
		systime_periodic();
 80002a4:	e7fa      	b.n	800029c <main+0x4c>
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	40021000 	.word	0x40021000
 80002ac:	00000040 	.word	0x00000040
			80002ac: R_ARM_GOT32	test
 80002b0:	00000048 	.word	0x00000048
			80002b0: R_ARM_GOT32	__end_of_flash
 80002b4:	0000000c 	.word	0x0000000c
			80002b4: R_ARM_GOT32	.LC0

080002b8 <gpio_init>:

#include "gpio.h"


void gpio_init(const struct gpio_init_table_t *t, int num)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b087      	sub	sp, #28
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	6039      	str	r1, [r7, #0]
	int i;
#if defined(STM32F4XX) || defined(STM32F0XX) || defined(STM32G0)
	uint32_t reg;
	for (i = 0; i < num; i++) {
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]
 80002c6:	e180      	b.n	80005ca <gpio_init+0x312>
		uint16_t pos = 0;
 80002c8:	2412      	movs	r4, #18
 80002ca:	193b      	adds	r3, r7, r4
 80002cc:	2200      	movs	r2, #0
 80002ce:	801a      	strh	r2, [r3, #0]

		gpio_set(&t[i], t[i].state);
 80002d0:	697a      	ldr	r2, [r7, #20]
 80002d2:	0013      	movs	r3, r2
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	189b      	adds	r3, r3, r2
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	001a      	movs	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	1898      	adds	r0, r3, r2
 80002e0:	697a      	ldr	r2, [r7, #20]
 80002e2:	0013      	movs	r3, r2
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	189b      	adds	r3, r3, r2
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	001a      	movs	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	189b      	adds	r3, r3, r2
 80002f0:	7a9b      	ldrb	r3, [r3, #10]
 80002f2:	0019      	movs	r1, r3
 80002f4:	f000 f973 	bl	80005de <gpio_set>
			80002f4: R_ARM_THM_CALL	gpio_set

		for (pos = 0; pos < 16; pos++) {
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	2200      	movs	r2, #0
 80002fc:	801a      	strh	r2, [r3, #0]
 80002fe:	e15b      	b.n	80005b8 <gpio_init+0x300>
			if (!(t[i].pin & (1 << pos))) {
 8000300:	697a      	ldr	r2, [r7, #20]
 8000302:	0013      	movs	r3, r2
 8000304:	005b      	lsls	r3, r3, #1
 8000306:	189b      	adds	r3, r3, r2
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	001a      	movs	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	189b      	adds	r3, r3, r2
 8000310:	889b      	ldrh	r3, [r3, #4]
 8000312:	001a      	movs	r2, r3
 8000314:	2112      	movs	r1, #18
 8000316:	187b      	adds	r3, r7, r1
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	411a      	asrs	r2, r3
 800031c:	0013      	movs	r3, r2
 800031e:	2201      	movs	r2, #1
 8000320:	4013      	ands	r3, r2
 8000322:	d100      	bne.n	8000326 <gpio_init+0x6e>
 8000324:	e141      	b.n	80005aa <gpio_init+0x2f2>
				continue;
			}

			if (t[i].af) {
 8000326:	697a      	ldr	r2, [r7, #20]
 8000328:	0013      	movs	r3, r2
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	189b      	adds	r3, r3, r2
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	001a      	movs	r2, r3
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	189b      	adds	r3, r3, r2
 8000336:	891b      	ldrh	r3, [r3, #8]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d03f      	beq.n	80003bc <gpio_init+0x104>
				uint32_t idx = ((uint32_t)(pos & (uint32_t)0x07U) * 4U);
 800033c:	187b      	adds	r3, r7, r1
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	2207      	movs	r2, #7
 8000342:	4013      	ands	r3, r2
 8000344:	009b      	lsls	r3, r3, #2
 8000346:	60fb      	str	r3, [r7, #12]
				reg = t[i].gpio->AFR[pos >> 3];
 8000348:	697a      	ldr	r2, [r7, #20]
 800034a:	0013      	movs	r3, r2
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	189b      	adds	r3, r3, r2
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	001a      	movs	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	189b      	adds	r3, r3, r2
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	187a      	adds	r2, r7, r1
 800035c:	8812      	ldrh	r2, [r2, #0]
 800035e:	08d2      	lsrs	r2, r2, #3
 8000360:	b292      	uxth	r2, r2
 8000362:	3208      	adds	r2, #8
 8000364:	0092      	lsls	r2, r2, #2
 8000366:	58d3      	ldr	r3, [r2, r3]
 8000368:	60bb      	str	r3, [r7, #8]
				reg &= ~((uint32_t)0xFU << idx) ;
 800036a:	220f      	movs	r2, #15
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	409a      	lsls	r2, r3
 8000370:	0013      	movs	r3, r2
 8000372:	43da      	mvns	r2, r3
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	4013      	ands	r3, r2
 8000378:	60bb      	str	r3, [r7, #8]
				reg |= ((uint32_t)(t[i].af) << idx);
 800037a:	697a      	ldr	r2, [r7, #20]
 800037c:	0013      	movs	r3, r2
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	189b      	adds	r3, r3, r2
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	001a      	movs	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	189b      	adds	r3, r3, r2
 800038a:	891b      	ldrh	r3, [r3, #8]
 800038c:	001a      	movs	r2, r3
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	409a      	lsls	r2, r3
 8000392:	0013      	movs	r3, r2
 8000394:	68ba      	ldr	r2, [r7, #8]
 8000396:	4313      	orrs	r3, r2
 8000398:	60bb      	str	r3, [r7, #8]
				t[i].gpio->AFR[pos >> 3] = reg;
 800039a:	697a      	ldr	r2, [r7, #20]
 800039c:	0013      	movs	r3, r2
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	189b      	adds	r3, r3, r2
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	001a      	movs	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	189b      	adds	r3, r3, r2
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	187a      	adds	r2, r7, r1
 80003ae:	8812      	ldrh	r2, [r2, #0]
 80003b0:	08d2      	lsrs	r2, r2, #3
 80003b2:	b292      	uxth	r2, r2
 80003b4:	3208      	adds	r2, #8
 80003b6:	0092      	lsls	r2, r2, #2
 80003b8:	68b9      	ldr	r1, [r7, #8]
 80003ba:	50d1      	str	r1, [r2, r3]
			}

			if (((t[i].mode & 3) == 1) || ((t[i].mode & 3) == 2)) {
 80003bc:	697a      	ldr	r2, [r7, #20]
 80003be:	0013      	movs	r3, r2
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	189b      	adds	r3, r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	001a      	movs	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	189b      	adds	r3, r3, r2
 80003cc:	799b      	ldrb	r3, [r3, #6]
 80003ce:	001a      	movs	r2, r3
 80003d0:	2303      	movs	r3, #3
 80003d2:	4013      	ands	r3, r2
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d00d      	beq.n	80003f4 <gpio_init+0x13c>
 80003d8:	697a      	ldr	r2, [r7, #20]
 80003da:	0013      	movs	r3, r2
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	189b      	adds	r3, r3, r2
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	001a      	movs	r2, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	189b      	adds	r3, r3, r2
 80003e8:	799b      	ldrb	r3, [r3, #6]
 80003ea:	001a      	movs	r2, r3
 80003ec:	2303      	movs	r3, #3
 80003ee:	4013      	ands	r3, r2
 80003f0:	2b02      	cmp	r3, #2
 80003f2:	d16c      	bne.n	80004ce <gpio_init+0x216>
				reg = t[i].gpio->OSPEEDR;
 80003f4:	697a      	ldr	r2, [r7, #20]
 80003f6:	0013      	movs	r3, r2
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	189b      	adds	r3, r3, r2
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	001a      	movs	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	189b      	adds	r3, r3, r2
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	60bb      	str	r3, [r7, #8]
				reg &= ~(3 << (pos * 2));
 800040a:	2112      	movs	r1, #18
 800040c:	187b      	adds	r3, r7, r1
 800040e:	881b      	ldrh	r3, [r3, #0]
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	2203      	movs	r2, #3
 8000414:	409a      	lsls	r2, r3
 8000416:	0013      	movs	r3, r2
 8000418:	43db      	mvns	r3, r3
 800041a:	001a      	movs	r2, r3
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	4013      	ands	r3, r2
 8000420:	60bb      	str	r3, [r7, #8]
				reg |= (t[i].speed << (pos * 2));
 8000422:	697a      	ldr	r2, [r7, #20]
 8000424:	0013      	movs	r3, r2
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	189b      	adds	r3, r3, r2
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	001a      	movs	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	189b      	adds	r3, r3, r2
 8000432:	79db      	ldrb	r3, [r3, #7]
 8000434:	001a      	movs	r2, r3
 8000436:	187b      	adds	r3, r7, r1
 8000438:	881b      	ldrh	r3, [r3, #0]
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	409a      	lsls	r2, r3
 800043e:	0013      	movs	r3, r2
 8000440:	001a      	movs	r2, r3
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	4313      	orrs	r3, r2
 8000446:	60bb      	str	r3, [r7, #8]
				t[i].gpio->OSPEEDR = reg;
 8000448:	697a      	ldr	r2, [r7, #20]
 800044a:	0013      	movs	r3, r2
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	189b      	adds	r3, r3, r2
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	001a      	movs	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	189b      	adds	r3, r3, r2
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	68ba      	ldr	r2, [r7, #8]
 800045c:	609a      	str	r2, [r3, #8]

				reg = t[i].gpio->OTYPER;
 800045e:	697a      	ldr	r2, [r7, #20]
 8000460:	0013      	movs	r3, r2
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	189b      	adds	r3, r3, r2
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	001a      	movs	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	189b      	adds	r3, r3, r2
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	60bb      	str	r3, [r7, #8]
				reg &= ~(1 << pos);
 8000474:	187b      	adds	r3, r7, r1
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	2201      	movs	r2, #1
 800047a:	409a      	lsls	r2, r3
 800047c:	0013      	movs	r3, r2
 800047e:	43db      	mvns	r3, r3
 8000480:	001a      	movs	r2, r3
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	4013      	ands	r3, r2
 8000486:	60bb      	str	r3, [r7, #8]
				reg |= (((t[i].mode >> 4) & 1) << pos);
 8000488:	697a      	ldr	r2, [r7, #20]
 800048a:	0013      	movs	r3, r2
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	189b      	adds	r3, r3, r2
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	001a      	movs	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	189b      	adds	r3, r3, r2
 8000498:	799b      	ldrb	r3, [r3, #6]
 800049a:	091b      	lsrs	r3, r3, #4
 800049c:	b2db      	uxtb	r3, r3
 800049e:	001a      	movs	r2, r3
 80004a0:	2301      	movs	r3, #1
 80004a2:	401a      	ands	r2, r3
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	881b      	ldrh	r3, [r3, #0]
 80004a8:	409a      	lsls	r2, r3
 80004aa:	0013      	movs	r3, r2
 80004ac:	001a      	movs	r2, r3
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	60bb      	str	r3, [r7, #8]
				t[i].gpio->OTYPER = (uint16_t)reg;
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	b299      	uxth	r1, r3
 80004b8:	697a      	ldr	r2, [r7, #20]
 80004ba:	0013      	movs	r3, r2
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	189b      	adds	r3, r3, r2
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	001a      	movs	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	189b      	adds	r3, r3, r2
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	000a      	movs	r2, r1
 80004cc:	605a      	str	r2, [r3, #4]
			}

			reg = t[i].gpio->MODER;
 80004ce:	697a      	ldr	r2, [r7, #20]
 80004d0:	0013      	movs	r3, r2
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	189b      	adds	r3, r3, r2
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	001a      	movs	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	189b      	adds	r3, r3, r2
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	60bb      	str	r3, [r7, #8]
			reg &= ~(3 << (pos * 2));
 80004e4:	2112      	movs	r1, #18
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	881b      	ldrh	r3, [r3, #0]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	2203      	movs	r2, #3
 80004ee:	409a      	lsls	r2, r3
 80004f0:	0013      	movs	r3, r2
 80004f2:	43db      	mvns	r3, r3
 80004f4:	001a      	movs	r2, r3
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4013      	ands	r3, r2
 80004fa:	60bb      	str	r3, [r7, #8]
			reg |= (t[i].mode << (pos * 2));
 80004fc:	697a      	ldr	r2, [r7, #20]
 80004fe:	0013      	movs	r3, r2
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	189b      	adds	r3, r3, r2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	001a      	movs	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	189b      	adds	r3, r3, r2
 800050c:	799b      	ldrb	r3, [r3, #6]
 800050e:	001a      	movs	r2, r3
 8000510:	187b      	adds	r3, r7, r1
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	409a      	lsls	r2, r3
 8000518:	0013      	movs	r3, r2
 800051a:	001a      	movs	r2, r3
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	4313      	orrs	r3, r2
 8000520:	60bb      	str	r3, [r7, #8]
			t[i].gpio->MODER = reg;
 8000522:	697a      	ldr	r2, [r7, #20]
 8000524:	0013      	movs	r3, r2
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	189b      	adds	r3, r3, r2
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	001a      	movs	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	189b      	adds	r3, r3, r2
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	68ba      	ldr	r2, [r7, #8]
 8000536:	601a      	str	r2, [r3, #0]

			reg = t[i].gpio->PUPDR;
 8000538:	697a      	ldr	r2, [r7, #20]
 800053a:	0013      	movs	r3, r2
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	189b      	adds	r3, r3, r2
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	001a      	movs	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	189b      	adds	r3, r3, r2
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	60bb      	str	r3, [r7, #8]
			reg &= ~(3 << (pos * 2));
 800054e:	187b      	adds	r3, r7, r1
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	2203      	movs	r2, #3
 8000556:	409a      	lsls	r2, r3
 8000558:	0013      	movs	r3, r2
 800055a:	43db      	mvns	r3, r3
 800055c:	001a      	movs	r2, r3
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	4013      	ands	r3, r2
 8000562:	60bb      	str	r3, [r7, #8]
			reg |= (((t[i].mode >> 6) & 1) << (pos * 2));
 8000564:	697a      	ldr	r2, [r7, #20]
 8000566:	0013      	movs	r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	189b      	adds	r3, r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	001a      	movs	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	189b      	adds	r3, r3, r2
 8000574:	799b      	ldrb	r3, [r3, #6]
 8000576:	099b      	lsrs	r3, r3, #6
 8000578:	b2db      	uxtb	r3, r3
 800057a:	001a      	movs	r2, r3
 800057c:	2301      	movs	r3, #1
 800057e:	401a      	ands	r2, r3
 8000580:	187b      	adds	r3, r7, r1
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	409a      	lsls	r2, r3
 8000588:	0013      	movs	r3, r2
 800058a:	001a      	movs	r2, r3
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	4313      	orrs	r3, r2
 8000590:	60bb      	str	r3, [r7, #8]
			t[i].gpio->PUPDR = reg;
 8000592:	697a      	ldr	r2, [r7, #20]
 8000594:	0013      	movs	r3, r2
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	189b      	adds	r3, r3, r2
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	001a      	movs	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	189b      	adds	r3, r3, r2
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	e000      	b.n	80005ac <gpio_init+0x2f4>
				continue;
 80005aa:	46c0      	nop			; (mov r8, r8)
		for (pos = 0; pos < 16; pos++) {
 80005ac:	2112      	movs	r1, #18
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	881a      	ldrh	r2, [r3, #0]
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	3201      	adds	r2, #1
 80005b6:	801a      	strh	r2, [r3, #0]
 80005b8:	2312      	movs	r3, #18
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	2b0f      	cmp	r3, #15
 80005c0:	d800      	bhi.n	80005c4 <gpio_init+0x30c>
 80005c2:	e69d      	b.n	8000300 <gpio_init+0x48>
	for (i = 0; i < num; i++) {
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	3301      	adds	r3, #1
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	697a      	ldr	r2, [r7, #20]
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	da00      	bge.n	80005d4 <gpio_init+0x31c>
 80005d2:	e679      	b.n	80002c8 <gpio_init+0x10>
		if (!(t[i].mode == GPIO_MODE_AIN || t[i].mode == GPIO_MODE_IN_FLOATING || t[i].mode == GPIO_MODE_IPD || t[i].mode == GPIO_MODE_IPU)) {
			gpio_set(&t[i], t[i].state);
		}
	}
#endif
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b007      	add	sp, #28
 80005dc:	bd90      	pop	{r4, r7, pc}

080005de <gpio_set>:

	return (time > 0)?0:1;
}

void gpio_set(const struct gpio_init_table_t *gpio, uint8_t state)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	000a      	movs	r2, r1
 80005e8:	1cfb      	adds	r3, r7, #3
 80005ea:	701a      	strb	r2, [r3, #0]
	switch (state) {
 80005ec:	1cfb      	adds	r3, r7, #3
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d007      	beq.n	8000604 <gpio_set+0x26>
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d10b      	bne.n	8000610 <gpio_set+0x32>
		case GPIO_SET:
#if defined(STM32F4XX)
			gpio->gpio->BSRRL = gpio->pin;
#else
			gpio->gpio->BSRR = gpio->pin;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	889a      	ldrh	r2, [r3, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	619a      	str	r2, [r3, #24]
#endif
			break;
 8000602:	e006      	b.n	8000612 <gpio_set+0x34>
		case GPIO_RESET:
#if defined(STM32F4XX)
			gpio->gpio->BSRRH = gpio->pin;
#else
			gpio->gpio->BRR = gpio->pin;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	889a      	ldrh	r2, [r3, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
#endif
			break;
 800060e:	e000      	b.n	8000612 <gpio_set+0x34>
		default:
			break;
 8000610:	46c0      	nop			; (mov r8, r8)
	}
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b002      	add	sp, #8
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <led_init>:
uint8_t led_state[2];
uint8_t led_mode[2];
uint8_t led_nextmode[2];

void led_init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	464c      	mov	r4, r9
	gpio_init(led_gpio, led_gpio_cnt); 
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <led_init+0x58>)
 8000626:	58e3      	ldr	r3, [r4, r3]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	001a      	movs	r2, r3
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <led_init+0x5c>)
 800062e:	58e3      	ldr	r3, [r4, r3]
 8000630:	0011      	movs	r1, r2
 8000632:	0018      	movs	r0, r3
 8000634:	f7ff fe40 	bl	80002b8 <gpio_init>
			8000634: R_ARM_THM_CALL	gpio_init

	for (uint32_t i = 0; i < led_gpio_cnt; i++) {
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	e00e      	b.n	800065c <led_init+0x40>
		led_mode[i] = 0;
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <led_init+0x60>)
 8000640:	58e2      	ldr	r2, [r4, r3]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	18d3      	adds	r3, r2, r3
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
		led_nextmode[i] = 0xff;
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <led_init+0x64>)
 800064c:	58e2      	ldr	r2, [r4, r3]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	18d3      	adds	r3, r2, r3
 8000652:	22ff      	movs	r2, #255	; 0xff
 8000654:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < led_gpio_cnt; i++) {
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3301      	adds	r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <led_init+0x58>)
 800065e:	58e3      	ldr	r3, [r4, r3]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	429a      	cmp	r2, r3
 8000666:	d3ea      	bcc.n	800063e <led_init+0x22>

#ifdef DEBUG
	console_add_command(&led_cmd);
	console_printf(CON_INFO, "Led: menu added\r\n");
#endif
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b003      	add	sp, #12
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	0000004c 	.word	0x0000004c
			8000674: R_ARM_GOT32	led_gpio_cnt
 8000678:	0000002c 	.word	0x0000002c
			8000678: R_ARM_GOT32	led_gpio
 800067c:	00000054 	.word	0x00000054
			800067c: R_ARM_GOT32	led_mode
 8000680:	00000058 	.word	0x00000058
			8000680: R_ARM_GOT32	led_nextmode

08000684 <led_set>:

void led_set(uint8_t led, uint8_t mode)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	0002      	movs	r2, r0
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	701a      	strb	r2, [r3, #0]
 8000690:	1dbb      	adds	r3, r7, #6
 8000692:	1c0a      	adds	r2, r1, #0
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	464b      	mov	r3, r9
	if (led >= led_gpio_cnt)
 8000698:	1dfa      	adds	r2, r7, #7
 800069a:	7811      	ldrb	r1, [r2, #0]
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <led_set+0x48>)
 800069e:	589a      	ldr	r2, [r3, r2]
 80006a0:	6812      	ldr	r2, [r2, #0]
 80006a2:	4291      	cmp	r1, r2
 80006a4:	d20c      	bcs.n	80006c0 <led_set+0x3c>
		return;

	if ((mode & 0x7f) >= ARRAY_SIZE(led_timing))
 80006a6:	1dba      	adds	r2, r7, #6
 80006a8:	7812      	ldrb	r2, [r2, #0]
 80006aa:	2178      	movs	r1, #120	; 0x78
 80006ac:	400a      	ands	r2, r1
 80006ae:	d109      	bne.n	80006c4 <led_set+0x40>
		return;

	led_nextmode[led] = mode;
 80006b0:	1dfa      	adds	r2, r7, #7
 80006b2:	7812      	ldrb	r2, [r2, #0]
 80006b4:	4906      	ldr	r1, [pc, #24]	; (80006d0 <led_set+0x4c>)
 80006b6:	585b      	ldr	r3, [r3, r1]
 80006b8:	1db9      	adds	r1, r7, #6
 80006ba:	7809      	ldrb	r1, [r1, #0]
 80006bc:	5499      	strb	r1, [r3, r2]
 80006be:	e002      	b.n	80006c6 <led_set+0x42>
		return;
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	e000      	b.n	80006c6 <led_set+0x42>
		return;
 80006c4:	46c0      	nop			; (mov r8, r8)
}
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b002      	add	sp, #8
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	0000004c 	.word	0x0000004c
			80006cc: R_ARM_GOT32	led_gpio_cnt
 80006d0:	00000058 	.word	0x00000058
			80006d0: R_ARM_GOT32	led_nextmode

080006d4 <led_periodic>:

	gpio_set(&led_gpio[led], state ? GPIO_RESET : GPIO_SET);
}

void led_periodic()
{
 80006d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	464c      	mov	r4, r9
	static uint32_t time_last = 0;
	uint8_t mode;
	uint32_t state;

	uint32_t diff = systime_get() - time_last;
 80006dc:	f000 fa64 	bl	8000ba8 <systime_get>
			80006dc: R_ARM_THM_CALL	systime_get
 80006e0:	0002      	movs	r2, r0
 80006e2:	4b8d      	ldr	r3, [pc, #564]	; (8000918 <led_periodic+0x244>)
 80006e4:	58e3      	ldr	r3, [r4, r3]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	60bb      	str	r3, [r7, #8]
	time_last = systime_get();
 80006ec:	f000 fa5c 	bl	8000ba8 <systime_get>
			80006ec: R_ARM_THM_CALL	systime_get
 80006f0:	0002      	movs	r2, r0
 80006f2:	4b89      	ldr	r3, [pc, #548]	; (8000918 <led_periodic+0x244>)
 80006f4:	58e3      	ldr	r3, [r4, r3]
 80006f6:	601a      	str	r2, [r3, #0]

	for (uint8_t i = 0; i < led_gpio_cnt; i++) {
 80006f8:	230e      	movs	r3, #14
 80006fa:	18fb      	adds	r3, r7, r3
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
 8000700:	e0fb      	b.n	80008fa <led_periodic+0x226>
		mode = led_mode[i] & 0x7f;
 8000702:	200e      	movs	r0, #14
 8000704:	183b      	adds	r3, r7, r0
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4a84      	ldr	r2, [pc, #528]	; (800091c <led_periodic+0x248>)
 800070a:	58a2      	ldr	r2, [r4, r2]
 800070c:	5cd2      	ldrb	r2, [r2, r3]
 800070e:	250f      	movs	r5, #15
 8000710:	197b      	adds	r3, r7, r5
 8000712:	217f      	movs	r1, #127	; 0x7f
 8000714:	400a      	ands	r2, r1
 8000716:	701a      	strb	r2, [r3, #0]

		if (mode == 0) {
 8000718:	197b      	adds	r3, r7, r5
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d125      	bne.n	800076c <led_periodic+0x98>
			if (led_nextmode[i] != 0xff) {
 8000720:	183b      	adds	r3, r7, r0
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4a7e      	ldr	r2, [pc, #504]	; (8000920 <led_periodic+0x24c>)
 8000726:	58a2      	ldr	r2, [r4, r2]
 8000728:	5cd3      	ldrb	r3, [r2, r3]
 800072a:	2bff      	cmp	r3, #255	; 0xff
 800072c:	d100      	bne.n	8000730 <led_periodic+0x5c>
 800072e:	e0de      	b.n	80008ee <led_periodic+0x21a>
				led_mode[i] = led_nextmode[i];
 8000730:	183b      	adds	r3, r7, r0
 8000732:	781a      	ldrb	r2, [r3, #0]
 8000734:	183b      	adds	r3, r7, r0
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4979      	ldr	r1, [pc, #484]	; (8000920 <led_periodic+0x24c>)
 800073a:	5861      	ldr	r1, [r4, r1]
 800073c:	5c89      	ldrb	r1, [r1, r2]
 800073e:	4a77      	ldr	r2, [pc, #476]	; (800091c <led_periodic+0x248>)
 8000740:	58a2      	ldr	r2, [r4, r2]
 8000742:	54d1      	strb	r1, [r2, r3]
				led_nextmode[i] = 0xff;
 8000744:	183b      	adds	r3, r7, r0
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4a75      	ldr	r2, [pc, #468]	; (8000920 <led_periodic+0x24c>)
 800074a:	58a2      	ldr	r2, [r4, r2]
 800074c:	21ff      	movs	r1, #255	; 0xff
 800074e:	54d1      	strb	r1, [r2, r3]
				led_state[i] = 0;
 8000750:	183b      	adds	r3, r7, r0
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4a73      	ldr	r2, [pc, #460]	; (8000924 <led_periodic+0x250>)
 8000756:	58a2      	ldr	r2, [r4, r2]
 8000758:	2100      	movs	r1, #0
 800075a:	54d1      	strb	r1, [r2, r3]
				led_timer[i] = 0;
 800075c:	183b      	adds	r3, r7, r0
 800075e:	781a      	ldrb	r2, [r3, #0]
 8000760:	4b71      	ldr	r3, [pc, #452]	; (8000928 <led_periodic+0x254>)
 8000762:	58e3      	ldr	r3, [r4, r3]
 8000764:	0092      	lsls	r2, r2, #2
 8000766:	2100      	movs	r1, #0
 8000768:	50d1      	str	r1, [r2, r3]
 800076a:	e0c0      	b.n	80008ee <led_periodic+0x21a>
			}
		} else if (led_timer[i] == 0) {
 800076c:	250e      	movs	r5, #14
 800076e:	197b      	adds	r3, r7, r5
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	4b6d      	ldr	r3, [pc, #436]	; (8000928 <led_periodic+0x254>)
 8000774:	58e3      	ldr	r3, [r4, r3]
 8000776:	0092      	lsls	r2, r2, #2
 8000778:	58d3      	ldr	r3, [r2, r3]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d000      	beq.n	8000780 <led_periodic+0xac>
 800077e:	e094      	b.n	80008aa <led_periodic+0x1d6>

			// is end of pattern?
			if (led_state[i] >= led_timing[mode].num) {
 8000780:	197b      	adds	r3, r7, r5
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4a67      	ldr	r2, [pc, #412]	; (8000924 <led_periodic+0x250>)
 8000786:	58a2      	ldr	r2, [r4, r2]
 8000788:	5cd2      	ldrb	r2, [r2, r3]
 800078a:	230f      	movs	r3, #15
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	7819      	ldrb	r1, [r3, #0]
 8000790:	4b66      	ldr	r3, [pc, #408]	; (800092c <led_periodic+0x258>)
 8000792:	58e3      	ldr	r3, [r4, r3]
 8000794:	202c      	movs	r0, #44	; 0x2c
 8000796:	4341      	muls	r1, r0
 8000798:	5ccb      	ldrb	r3, [r1, r3]
 800079a:	429a      	cmp	r2, r3
 800079c:	d33a      	bcc.n	8000814 <led_periodic+0x140>
				led_state[i] = 0;
 800079e:	197b      	adds	r3, r7, r5
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4a60      	ldr	r2, [pc, #384]	; (8000924 <led_periodic+0x250>)
 80007a4:	58a2      	ldr	r2, [r4, r2]
 80007a6:	2100      	movs	r1, #0
 80007a8:	54d1      	strb	r1, [r2, r3]
				if (led_mode[i] & 0x80) {
 80007aa:	197b      	adds	r3, r7, r5
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	4a5b      	ldr	r2, [pc, #364]	; (800091c <led_periodic+0x248>)
 80007b0:	58a2      	ldr	r2, [r4, r2]
 80007b2:	5cd3      	ldrb	r3, [r2, r3]
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	da1f      	bge.n	80007fa <led_periodic+0x126>
					if (led_nextmode[i] != 0xff) {
 80007ba:	197b      	adds	r3, r7, r5
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	4a58      	ldr	r2, [pc, #352]	; (8000920 <led_periodic+0x24c>)
 80007c0:	58a2      	ldr	r2, [r4, r2]
 80007c2:	5cd3      	ldrb	r3, [r2, r3]
 80007c4:	2bff      	cmp	r3, #255	; 0xff
 80007c6:	d025      	beq.n	8000814 <led_periodic+0x140>
						led_mode[i] = led_nextmode[i];
 80007c8:	197b      	adds	r3, r7, r5
 80007ca:	781a      	ldrb	r2, [r3, #0]
 80007cc:	0028      	movs	r0, r5
 80007ce:	197b      	adds	r3, r7, r5
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	4953      	ldr	r1, [pc, #332]	; (8000920 <led_periodic+0x24c>)
 80007d4:	5861      	ldr	r1, [r4, r1]
 80007d6:	5c89      	ldrb	r1, [r1, r2]
 80007d8:	4a50      	ldr	r2, [pc, #320]	; (800091c <led_periodic+0x248>)
 80007da:	58a2      	ldr	r2, [r4, r2]
 80007dc:	54d1      	strb	r1, [r2, r3]
						led_nextmode[i] = 0xff;
 80007de:	183b      	adds	r3, r7, r0
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4a4f      	ldr	r2, [pc, #316]	; (8000920 <led_periodic+0x24c>)
 80007e4:	58a2      	ldr	r2, [r4, r2]
 80007e6:	21ff      	movs	r1, #255	; 0xff
 80007e8:	54d1      	strb	r1, [r2, r3]
						led_timer[i] = 0;
 80007ea:	183b      	adds	r3, r7, r0
 80007ec:	781a      	ldrb	r2, [r3, #0]
 80007ee:	4b4e      	ldr	r3, [pc, #312]	; (8000928 <led_periodic+0x254>)
 80007f0:	58e3      	ldr	r3, [r4, r3]
 80007f2:	0092      	lsls	r2, r2, #2
 80007f4:	2100      	movs	r1, #0
 80007f6:	50d1      	str	r1, [r2, r3]
						continue;
 80007f8:	e079      	b.n	80008ee <led_periodic+0x21a>
					}
				} else {
					mode = led_mode[i] = 0;
 80007fa:	230e      	movs	r3, #14
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4a46      	ldr	r2, [pc, #280]	; (800091c <led_periodic+0x248>)
 8000802:	58a2      	ldr	r2, [r4, r2]
 8000804:	2100      	movs	r1, #0
 8000806:	54d1      	strb	r1, [r2, r3]
 8000808:	220f      	movs	r2, #15
 800080a:	18ba      	adds	r2, r7, r2
 800080c:	4943      	ldr	r1, [pc, #268]	; (800091c <led_periodic+0x248>)
 800080e:	5861      	ldr	r1, [r4, r1]
 8000810:	5ccb      	ldrb	r3, [r1, r3]
 8000812:	7013      	strb	r3, [r2, #0]
				}
			}

			led_timer[i] = led_timing[mode].time[led_state[i]];
 8000814:	230f      	movs	r3, #15
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	260e      	movs	r6, #14
 800081c:	19bb      	adds	r3, r7, r6
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4940      	ldr	r1, [pc, #256]	; (8000924 <led_periodic+0x250>)
 8000822:	5861      	ldr	r1, [r4, r1]
 8000824:	5ccb      	ldrb	r3, [r1, r3]
 8000826:	001d      	movs	r5, r3
 8000828:	19bb      	adds	r3, r7, r6
 800082a:	7818      	ldrb	r0, [r3, #0]
 800082c:	4b3f      	ldr	r3, [pc, #252]	; (800092c <led_periodic+0x258>)
 800082e:	58e1      	ldr	r1, [r4, r3]
 8000830:	0013      	movs	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	189b      	adds	r3, r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	189b      	adds	r3, r3, r2
 800083a:	195b      	adds	r3, r3, r5
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	18cb      	adds	r3, r1, r3
 8000840:	3304      	adds	r3, #4
 8000842:	6819      	ldr	r1, [r3, #0]
 8000844:	4b38      	ldr	r3, [pc, #224]	; (8000928 <led_periodic+0x254>)
 8000846:	58e3      	ldr	r3, [r4, r3]
 8000848:	0082      	lsls	r2, r0, #2
 800084a:	50d1      	str	r1, [r2, r3]
			state = (led_state[i] % 0x02) ^ led_pol[i];
 800084c:	19bb      	adds	r3, r7, r6
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4a34      	ldr	r2, [pc, #208]	; (8000924 <led_periodic+0x250>)
 8000852:	58a2      	ldr	r2, [r4, r2]
 8000854:	5cd3      	ldrb	r3, [r2, r3]
 8000856:	2201      	movs	r2, #1
 8000858:	4013      	ands	r3, r2
 800085a:	b2da      	uxtb	r2, r3
 800085c:	19bb      	adds	r3, r7, r6
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4933      	ldr	r1, [pc, #204]	; (8000930 <led_periodic+0x25c>)
 8000862:	5861      	ldr	r1, [r4, r1]
 8000864:	5ccb      	ldrb	r3, [r1, r3]
 8000866:	4053      	eors	r3, r2
 8000868:	b2db      	uxtb	r3, r3
 800086a:	607b      	str	r3, [r7, #4]

			gpio_set(&led_gpio[i], state ? GPIO_RESET : GPIO_SET);
 800086c:	19bb      	adds	r3, r7, r6
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	0013      	movs	r3, r2
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	189b      	adds	r3, r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4a2e      	ldr	r2, [pc, #184]	; (8000934 <led_periodic+0x260>)
 800087a:	58a2      	ldr	r2, [r4, r2]
 800087c:	189a      	adds	r2, r3, r2
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <led_periodic+0x1b4>
 8000884:	2301      	movs	r3, #1
 8000886:	e000      	b.n	800088a <led_periodic+0x1b6>
 8000888:	2302      	movs	r3, #2
 800088a:	0019      	movs	r1, r3
 800088c:	0010      	movs	r0, r2
 800088e:	f7ff fea6 	bl	80005de <gpio_set>
			800088e: R_ARM_THM_CALL	gpio_set

			led_state[i]++;
 8000892:	230e      	movs	r3, #14
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4a22      	ldr	r2, [pc, #136]	; (8000924 <led_periodic+0x250>)
 800089a:	58a2      	ldr	r2, [r4, r2]
 800089c:	5cd2      	ldrb	r2, [r2, r3]
 800089e:	3201      	adds	r2, #1
 80008a0:	b2d1      	uxtb	r1, r2
 80008a2:	4a20      	ldr	r2, [pc, #128]	; (8000924 <led_periodic+0x250>)
 80008a4:	58a2      	ldr	r2, [r4, r2]
 80008a6:	54d1      	strb	r1, [r2, r3]
 80008a8:	e021      	b.n	80008ee <led_periodic+0x21a>
		} else {
			if (led_timer[i] >= diff) {
 80008aa:	210e      	movs	r1, #14
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <led_periodic+0x254>)
 80008b2:	58e3      	ldr	r3, [r4, r3]
 80008b4:	0092      	lsls	r2, r2, #2
 80008b6:	58d3      	ldr	r3, [r2, r3]
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d80f      	bhi.n	80008de <led_periodic+0x20a>
				led_timer[i] -= diff;
 80008be:	0008      	movs	r0, r1
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <led_periodic+0x254>)
 80008c6:	58e3      	ldr	r3, [r4, r3]
 80008c8:	0092      	lsls	r2, r2, #2
 80008ca:	58d1      	ldr	r1, [r2, r3]
 80008cc:	183b      	adds	r3, r7, r0
 80008ce:	781a      	ldrb	r2, [r3, #0]
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	1ac9      	subs	r1, r1, r3
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <led_periodic+0x254>)
 80008d6:	58e3      	ldr	r3, [r4, r3]
 80008d8:	0092      	lsls	r2, r2, #2
 80008da:	50d1      	str	r1, [r2, r3]
 80008dc:	e007      	b.n	80008ee <led_periodic+0x21a>
			} else {
				led_timer[i] = 0;
 80008de:	230e      	movs	r3, #14
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <led_periodic+0x254>)
 80008e6:	58e3      	ldr	r3, [r4, r3]
 80008e8:	0092      	lsls	r2, r2, #2
 80008ea:	2100      	movs	r1, #0
 80008ec:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < led_gpio_cnt; i++) {
 80008ee:	210e      	movs	r1, #14
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	781a      	ldrb	r2, [r3, #0]
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	3201      	adds	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	230e      	movs	r3, #14
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	781a      	ldrb	r2, [r3, #0]
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <led_periodic+0x264>)
 8000902:	58e3      	ldr	r3, [r4, r3]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	429a      	cmp	r2, r3
 8000908:	d200      	bcs.n	800090c <led_periodic+0x238>
 800090a:	e6fa      	b.n	8000702 <led_periodic+0x2e>
			}
		}
	}
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	b005      	add	sp, #20
 8000914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	00000010 	.word	0x00000010
			8000918: R_ARM_GOT32	time_last.5180
 800091c:	00000054 	.word	0x00000054
			800091c: R_ARM_GOT32	led_mode
 8000920:	00000058 	.word	0x00000058
			8000920: R_ARM_GOT32	led_nextmode
 8000924:	00000024 	.word	0x00000024
			8000924: R_ARM_GOT32	led_state
 8000928:	00000038 	.word	0x00000038
			8000928: R_ARM_GOT32	led_timer
 800092c:	00000060 	.word	0x00000060
			800092c: R_ARM_GOT32	led_timing
 8000930:	00000030 	.word	0x00000030
			8000930: R_ARM_GOT32	led_pol
 8000934:	0000002c 	.word	0x0000002c
			8000934: R_ARM_GOT32	led_gpio
 8000938:	0000004c 	.word	0x0000004c
			8000938: R_ARM_GOT32	led_gpio_cnt

0800093c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	0002      	movs	r2, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b7f      	cmp	r3, #127	; 0x7f
 8000950:	d828      	bhi.n	80009a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000952:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <__NVIC_SetPriority+0xd4>)
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b25b      	sxtb	r3, r3
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	33c0      	adds	r3, #192	; 0xc0
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	589b      	ldr	r3, [r3, r2]
 8000962:	1dfa      	adds	r2, r7, #7
 8000964:	7812      	ldrb	r2, [r2, #0]
 8000966:	0011      	movs	r1, r2
 8000968:	2203      	movs	r2, #3
 800096a:	400a      	ands	r2, r1
 800096c:	00d2      	lsls	r2, r2, #3
 800096e:	21ff      	movs	r1, #255	; 0xff
 8000970:	4091      	lsls	r1, r2
 8000972:	000a      	movs	r2, r1
 8000974:	43d2      	mvns	r2, r2
 8000976:	401a      	ands	r2, r3
 8000978:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	019b      	lsls	r3, r3, #6
 800097e:	22ff      	movs	r2, #255	; 0xff
 8000980:	401a      	ands	r2, r3
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	0018      	movs	r0, r3
 8000988:	2303      	movs	r3, #3
 800098a:	4003      	ands	r3, r0
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000990:	481f      	ldr	r0, [pc, #124]	; (8000a10 <__NVIC_SetPriority+0xd4>)
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b25b      	sxtb	r3, r3
 8000998:	089b      	lsrs	r3, r3, #2
 800099a:	430a      	orrs	r2, r1
 800099c:	33c0      	adds	r3, #192	; 0xc0
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009a2:	e031      	b.n	8000a08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a4:	4a1b      	ldr	r2, [pc, #108]	; (8000a14 <__NVIC_SetPriority+0xd8>)
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	0019      	movs	r1, r3
 80009ac:	230f      	movs	r3, #15
 80009ae:	400b      	ands	r3, r1
 80009b0:	3b08      	subs	r3, #8
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	3306      	adds	r3, #6
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	18d3      	adds	r3, r2, r3
 80009ba:	3304      	adds	r3, #4
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	1dfa      	adds	r2, r7, #7
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	0011      	movs	r1, r2
 80009c4:	2203      	movs	r2, #3
 80009c6:	400a      	ands	r2, r1
 80009c8:	00d2      	lsls	r2, r2, #3
 80009ca:	21ff      	movs	r1, #255	; 0xff
 80009cc:	4091      	lsls	r1, r2
 80009ce:	000a      	movs	r2, r1
 80009d0:	43d2      	mvns	r2, r2
 80009d2:	401a      	ands	r2, r3
 80009d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	019b      	lsls	r3, r3, #6
 80009da:	22ff      	movs	r2, #255	; 0xff
 80009dc:	401a      	ands	r2, r3
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	0018      	movs	r0, r3
 80009e4:	2303      	movs	r3, #3
 80009e6:	4003      	ands	r3, r0
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <__NVIC_SetPriority+0xd8>)
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	001c      	movs	r4, r3
 80009f4:	230f      	movs	r3, #15
 80009f6:	4023      	ands	r3, r4
 80009f8:	3b08      	subs	r3, #8
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	430a      	orrs	r2, r1
 80009fe:	3306      	adds	r3, #6
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	18c3      	adds	r3, r0, r3
 8000a04:	3304      	adds	r3, #4
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b003      	add	sp, #12
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	1e5a      	subs	r2, r3, #1
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	045b      	lsls	r3, r3, #17
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d301      	bcc.n	8000a30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e010      	b.n	8000a52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <SysTick_Config+0x44>)
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	3a01      	subs	r2, #1
 8000a36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a38:	2301      	movs	r3, #1
 8000a3a:	425b      	negs	r3, r3
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f7ff ff7c 	bl	800093c <__NVIC_SetPriority>
			8000a40: R_ARM_THM_CALL	__NVIC_SetPriority
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <SysTick_Config+0x44>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SysTick_Config+0x44>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	0018      	movs	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b002      	add	sp, #8
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <systime_init>:
} systime_timer[SYSTIME_TIMERS];

volatile uint32_t systime_localtime = 0;

void systime_init()
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	464b      	mov	r3, r9
	uint32_t i;

	systime_localtime = 0;
 8000a68:	4a14      	ldr	r2, [pc, #80]	; (8000abc <systime_init+0x5c>)
 8000a6a:	589a      	ldr	r2, [r3, r2]
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	6011      	str	r1, [r2, #0]

	for (i = 0; i < SYSTIME_TIMERS; i++) {
 8000a70:	2200      	movs	r2, #0
 8000a72:	607a      	str	r2, [r7, #4]
 8000a74:	e00a      	b.n	8000a8c <systime_init+0x2c>
		systime_timer[i].active = 0;
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <systime_init+0x60>)
 8000a78:	589a      	ldr	r2, [r3, r2]
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	0109      	lsls	r1, r1, #4
 8000a7e:	5c88      	ldrb	r0, [r1, r2]
 8000a80:	2401      	movs	r4, #1
 8000a82:	43a0      	bics	r0, r4
 8000a84:	5488      	strb	r0, [r1, r2]
	for (i = 0; i < SYSTIME_TIMERS; i++) {
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	3201      	adds	r2, #1
 8000a8a:	607a      	str	r2, [r7, #4]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	2a04      	cmp	r2, #4
 8000a90:	d9f1      	bls.n	8000a76 <systime_init+0x16>
	}

	SysTick_Config(SystemCoreClock / 100);
 8000a92:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <systime_init+0x64>)
 8000a94:	589b      	ldr	r3, [r3, r2]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2164      	movs	r1, #100	; 0x64
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 fc20 	bl	80012e0 <__udivsi3>
			8000a9c: R_ARM_THM_CALL	__aeabi_uidiv
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff ffb8 	bl	8000a18 <SysTick_Config>
			8000aa4: R_ARM_THM_CALL	SysTick_Config

	/* Update the SysTick IRQ priority should be higher than the Ethernet IRQ */
	/* The Localtime should be updated during the Ethernet packets processing */
	NVIC_SetPriority (SysTick_IRQn, 1);
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	425b      	negs	r3, r3
 8000aac:	2101      	movs	r1, #1
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f7ff ff44 	bl	800093c <__NVIC_SetPriority>
			8000ab0: R_ARM_THM_CALL	__NVIC_SetPriority
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b003      	add	sp, #12
 8000aba:	bd90      	pop	{r4, r7, pc}
 8000abc:	0000003c 	.word	0x0000003c
			8000abc: R_ARM_GOT32	systime_localtime
 8000ac0:	00000050 	.word	0x00000050
			8000ac0: R_ARM_GOT32	systime_timer
 8000ac4:	00000028 	.word	0x00000028
			8000ac4: R_ARM_GOT32	SystemCoreClock

08000ac8 <systime_periodic>:

void systime_periodic(void)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	464c      	mov	r4, r9
	for (uint8_t i = 0; i < ARRAY_SIZE(systime_timer); i++) {
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	e059      	b.n	8000b8c <systime_periodic+0xc4>
		if (systime_timer[i].active == 0)
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <systime_periodic+0xd8>)
 8000ade:	58e3      	ldr	r3, [r4, r3]
 8000ae0:	0112      	lsls	r2, r2, #4
 8000ae2:	5cd3      	ldrb	r3, [r2, r3]
 8000ae4:	07db      	lsls	r3, r3, #31
 8000ae6:	0fdb      	lsrs	r3, r3, #31
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d048      	beq.n	8000b80 <systime_periodic+0xb8>
			continue;

		if (systime_localtime - systime_timer[i].time_last > systime_timer[i].period) {
 8000aee:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <systime_periodic+0xdc>)
 8000af0:	58e3      	ldr	r3, [r4, r3]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4929      	ldr	r1, [pc, #164]	; (8000ba0 <systime_periodic+0xd8>)
 8000afa:	5861      	ldr	r1, [r4, r1]
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	18cb      	adds	r3, r1, r3
 8000b00:	3304      	adds	r3, #4
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	1ad2      	subs	r2, r2, r3
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	4925      	ldr	r1, [pc, #148]	; (8000ba0 <systime_periodic+0xd8>)
 8000b0c:	5861      	ldr	r1, [r4, r1]
 8000b0e:	011b      	lsls	r3, r3, #4
 8000b10:	18cb      	adds	r3, r1, r3
 8000b12:	3308      	adds	r3, #8
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d933      	bls.n	8000b82 <systime_periodic+0xba>
			if (systime_timer[i].fnc) {
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	4a20      	ldr	r2, [pc, #128]	; (8000ba0 <systime_periodic+0xd8>)
 8000b20:	58a2      	ldr	r2, [r4, r2]
 8000b22:	011b      	lsls	r3, r3, #4
 8000b24:	18d3      	adds	r3, r2, r3
 8000b26:	330c      	adds	r3, #12
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d008      	beq.n	8000b40 <systime_periodic+0x78>
				systime_timer[i].fnc();
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <systime_periodic+0xd8>)
 8000b34:	58a2      	ldr	r2, [r4, r2]
 8000b36:	011b      	lsls	r3, r3, #4
 8000b38:	18d3      	adds	r3, r2, r3
 8000b3a:	330c      	adds	r3, #12
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4798      	blx	r3
			}

			if (systime_timer[i].oneshot) {
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <systime_periodic+0xd8>)
 8000b46:	58e3      	ldr	r3, [r4, r3]
 8000b48:	0112      	lsls	r2, r2, #4
 8000b4a:	5cd3      	ldrb	r3, [r2, r3]
 8000b4c:	079b      	lsls	r3, r3, #30
 8000b4e:	0fdb      	lsrs	r3, r3, #31
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d008      	beq.n	8000b68 <systime_periodic+0xa0>
				systime_timer[i].active = 0;
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <systime_periodic+0xd8>)
 8000b5c:	58e3      	ldr	r3, [r4, r3]
 8000b5e:	0112      	lsls	r2, r2, #4
 8000b60:	5cd1      	ldrb	r1, [r2, r3]
 8000b62:	2001      	movs	r0, #1
 8000b64:	4381      	bics	r1, r0
 8000b66:	54d1      	strb	r1, [r2, r3]
			}

			systime_timer[i].time_last = systime_localtime;
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	7818      	ldrb	r0, [r3, #0]
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <systime_periodic+0xdc>)
 8000b6e:	58e3      	ldr	r3, [r4, r3]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <systime_periodic+0xd8>)
 8000b74:	58e1      	ldr	r1, [r4, r3]
 8000b76:	0103      	lsls	r3, r0, #4
 8000b78:	18cb      	adds	r3, r1, r3
 8000b7a:	3304      	adds	r3, #4
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	e000      	b.n	8000b82 <systime_periodic+0xba>
			continue;
 8000b80:	46c0      	nop			; (mov r8, r8)
	for (uint8_t i = 0; i < ARRAY_SIZE(systime_timer); i++) {
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781a      	ldrb	r2, [r3, #0]
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	3201      	adds	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d9a1      	bls.n	8000ad8 <systime_periodic+0x10>
		}
	}
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b003      	add	sp, #12
 8000b9c:	bd90      	pop	{r4, r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	00000050 	.word	0x00000050
			8000ba0: R_ARM_GOT32	systime_timer
 8000ba4:	0000003c 	.word	0x0000003c
			8000ba4: R_ARM_GOT32	systime_localtime

08000ba8 <systime_get>:

	while(time > systime_localtime);
}

uint32_t systime_get(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	464b      	mov	r3, r9
	return systime_localtime;
 8000bae:	4a03      	ldr	r2, [pc, #12]	; (8000bbc <systime_get+0x14>)
 8000bb0:	589b      	ldr	r3, [r3, r2]
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	0000003c 	.word	0x0000003c
			8000bbc: R_ARM_GOT32	systime_localtime

08000bc0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	464b      	mov	r3, r9
	systime_localtime += SYSTIME_PERIOD_MS;
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SysTick_Handler+0x1c>)
 8000bc8:	589a      	ldr	r2, [r3, r2]
 8000bca:	6812      	ldr	r2, [r2, #0]
 8000bcc:	320a      	adds	r2, #10
 8000bce:	4903      	ldr	r1, [pc, #12]	; (8000bdc <SysTick_Handler+0x1c>)
 8000bd0:	585b      	ldr	r3, [r3, r1]
 8000bd2:	601a      	str	r2, [r3, #0]
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	0000003c 	.word	0x0000003c
			8000bdc: R_ARM_GOT32	systime_localtime

08000be0 <Default_Handler>:
 * @param  None
 * @retval : None
*/

void Default_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Go into an infinite loop. */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Default_Handler+0x4>
	...

08000be8 <SystemInit>:
  * @param  None
  * @retval None
  */
extern uint32_t gu32RamVectorTableBegin;
void SystemInit(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	464b      	mov	r3, r9
  SCB->VTOR = gu32RamVectorTableBegin; /* Vector Table Relocation in Internal SRAM */
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <SystemInit+0x18>)
 8000bf0:	4904      	ldr	r1, [pc, #16]	; (8000c04 <SystemInit+0x1c>)
 8000bf2:	585b      	ldr	r3, [r3, r1]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	6093      	str	r3, [r2, #8]
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	e000ed00 	.word	0xe000ed00
 8000c04:	0000005c 	.word	0x0000005c
			8000c04: R_ARM_GOT32	gu32RamVectorTableBegin

08000c08 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	464c      	mov	r4, r9
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c10:	4b5f      	ldr	r3, [pc, #380]	; (8000d90 <SystemCoreClockUpdate+0x188>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	2238      	movs	r2, #56	; 0x38
 8000c16:	4013      	ands	r3, r2
 8000c18:	3b08      	subs	r3, #8
 8000c1a:	2b18      	cmp	r3, #24
 8000c1c:	d900      	bls.n	8000c20 <SystemCoreClockUpdate+0x18>
 8000c1e:	e07b      	b.n	8000d18 <SystemCoreClockUpdate+0x110>
 8000c20:	0018      	movs	r0, r3
 8000c22:	f000 fb51 	bl	80012c8 <__gnu_thumb1_case_si>
			8000c22: R_ARM_THM_CALL	__gnu_thumb1_case_si
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	00000064 	.word	0x00000064
 8000c2c:	000000f0 	.word	0x000000f0
 8000c30:	000000f0 	.word	0x000000f0
 8000c34:	000000f0 	.word	0x000000f0
 8000c38:	000000f0 	.word	0x000000f0
 8000c3c:	000000f0 	.word	0x000000f0
 8000c40:	000000f0 	.word	0x000000f0
 8000c44:	000000f0 	.word	0x000000f0
 8000c48:	00000086 	.word	0x00000086
 8000c4c:	000000f0 	.word	0x000000f0
 8000c50:	000000f0 	.word	0x000000f0
 8000c54:	000000f0 	.word	0x000000f0
 8000c58:	000000f0 	.word	0x000000f0
 8000c5c:	000000f0 	.word	0x000000f0
 8000c60:	000000f0 	.word	0x000000f0
 8000c64:	000000f0 	.word	0x000000f0
 8000c68:	0000006e 	.word	0x0000006e
 8000c6c:	000000f0 	.word	0x000000f0
 8000c70:	000000f0 	.word	0x000000f0
 8000c74:	000000f0 	.word	0x000000f0
 8000c78:	000000f0 	.word	0x000000f0
 8000c7c:	000000f0 	.word	0x000000f0
 8000c80:	000000f0 	.word	0x000000f0
 8000c84:	000000f0 	.word	0x000000f0
 8000c88:	0000007a 	.word	0x0000007a
  {
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000c8c:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <SystemCoreClockUpdate+0x18c>)
 8000c8e:	58e3      	ldr	r3, [r4, r3]
 8000c90:	4a41      	ldr	r2, [pc, #260]	; (8000d98 <SystemCoreClockUpdate+0x190>)
 8000c92:	601a      	str	r2, [r3, #0]
      break;
 8000c94:	e053      	b.n	8000d3e <SystemCoreClockUpdate+0x136>

    case RCC_CFGR_SWS_LSI:  /* LSI used as system clock */
      SystemCoreClock = LSI_VALUE;
 8000c96:	4b3f      	ldr	r3, [pc, #252]	; (8000d94 <SystemCoreClockUpdate+0x18c>)
 8000c98:	58e3      	ldr	r3, [r4, r3]
 8000c9a:	22fa      	movs	r2, #250	; 0xfa
 8000c9c:	01d2      	lsls	r2, r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
      break;
 8000ca0:	e04d      	b.n	8000d3e <SystemCoreClockUpdate+0x136>

    case RCC_CFGR_SWS_LSE:  /* LSE used as system clock */
      SystemCoreClock = LSE_VALUE;
 8000ca2:	4b3c      	ldr	r3, [pc, #240]	; (8000d94 <SystemCoreClockUpdate+0x18c>)
 8000ca4:	58e3      	ldr	r3, [r4, r3]
 8000ca6:	2280      	movs	r2, #128	; 0x80
 8000ca8:	0212      	lsls	r2, r2, #8
 8000caa:	601a      	str	r2, [r3, #0]
      break;
 8000cac:	e047      	b.n	8000d3e <SystemCoreClockUpdate+0x136>

    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000cae:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <SystemCoreClockUpdate+0x188>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL;
 8000cb8:	4b35      	ldr	r3, [pc, #212]	; (8000d90 <SystemCoreClockUpdate+0x188>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	091b      	lsrs	r3, r3, #4
 8000cbe:	2207      	movs	r2, #7
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	60fb      	str	r3, [r7, #12]

      if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d106      	bne.n	8000cda <SystemCoreClockUpdate+0xd2>
      {
        pllvco = (HSE_VALUE / pllm);
 8000ccc:	68f9      	ldr	r1, [r7, #12]
 8000cce:	4832      	ldr	r0, [pc, #200]	; (8000d98 <SystemCoreClockUpdate+0x190>)
 8000cd0:	f000 fb06 	bl	80012e0 <__udivsi3>
			8000cd0: R_ARM_THM_CALL	__aeabi_uidiv
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e005      	b.n	8000ce6 <SystemCoreClockUpdate+0xde>
      }
      else /* HSI used as PLL clock source */
      {
          pllvco = (HSI_VALUE / pllm);
 8000cda:	68f9      	ldr	r1, [r7, #12]
 8000cdc:	482f      	ldr	r0, [pc, #188]	; (8000d9c <SystemCoreClockUpdate+0x194>)
 8000cde:	f000 faff 	bl	80012e0 <__udivsi3>
			8000cde: R_ARM_THM_CALL	__aeabi_uidiv
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	617b      	str	r3, [r7, #20]
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <SystemCoreClockUpdate+0x188>)
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	0a1b      	lsrs	r3, r3, #8
 8000cec:	227f      	movs	r2, #127	; 0x7f
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	4353      	muls	r3, r2
 8000cf4:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000cf6:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <SystemCoreClockUpdate+0x188>)
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	0f5b      	lsrs	r3, r3, #29
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	4013      	ands	r3, r2
 8000d00:	3301      	adds	r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]

      SystemCoreClock = pllvco/pllr;
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f000 faea 	bl	80012e0 <__udivsi3>
			8000d08: R_ARM_THM_CALL	__aeabi_uidiv
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	001a      	movs	r2, r3
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <SystemCoreClockUpdate+0x18c>)
 8000d12:	58e3      	ldr	r3, [r4, r3]
 8000d14:	601a      	str	r2, [r3, #0]
      break;
 8000d16:	e012      	b.n	8000d3e <SystemCoreClockUpdate+0x136>
      
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
    default:                /* HSI used as system clock */
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV))>> RCC_CR_HSIDIV_Pos));
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <SystemCoreClockUpdate+0x188>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	0adb      	lsrs	r3, r3, #11
 8000d1e:	2207      	movs	r2, #7
 8000d20:	4013      	ands	r3, r2
 8000d22:	2201      	movs	r2, #1
 8000d24:	409a      	lsls	r2, r3
 8000d26:	0013      	movs	r3, r2
 8000d28:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (HSI_VALUE/hsidiv);
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	481b      	ldr	r0, [pc, #108]	; (8000d9c <SystemCoreClockUpdate+0x194>)
 8000d2e:	f000 fad7 	bl	80012e0 <__udivsi3>
			8000d2e: R_ARM_THM_CALL	__aeabi_uidiv
 8000d32:	0003      	movs	r3, r0
 8000d34:	001a      	movs	r2, r3
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <SystemCoreClockUpdate+0x18c>)
 8000d38:	58e3      	ldr	r3, [r4, r3]
 8000d3a:	601a      	str	r2, [r3, #0]
      break;
 8000d3c:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <SystemCoreClockUpdate+0x188>)
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	0a1b      	lsrs	r3, r3, #8
 8000d44:	220f      	movs	r2, #15
 8000d46:	401a      	ands	r2, r3
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <SystemCoreClockUpdate+0x198>)
 8000d4a:	58e3      	ldr	r3, [r4, r3]
 8000d4c:	0092      	lsls	r2, r2, #2
 8000d4e:	58d3      	ldr	r3, [r2, r3]
 8000d50:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <SystemCoreClockUpdate+0x18c>)
 8000d54:	58e3      	ldr	r3, [r4, r3]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	40da      	lsrs	r2, r3
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <SystemCoreClockUpdate+0x18c>)
 8000d5e:	58e3      	ldr	r3, [r4, r3]
 8000d60:	601a      	str	r2, [r3, #0]

  tmp = APBPrescTable[((RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos)];
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <SystemCoreClockUpdate+0x188>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	0b1b      	lsrs	r3, r3, #12
 8000d68:	2207      	movs	r2, #7
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <SystemCoreClockUpdate+0x19c>)
 8000d6e:	58e3      	ldr	r3, [r4, r3]
 8000d70:	0092      	lsls	r2, r2, #2
 8000d72:	58d3      	ldr	r3, [r2, r3]
 8000d74:	603b      	str	r3, [r7, #0]
  SystemAPBClock >>= tmp;
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <SystemCoreClockUpdate+0x1a0>)
 8000d78:	58e3      	ldr	r3, [r4, r3]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	40da      	lsrs	r2, r3
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <SystemCoreClockUpdate+0x1a0>)
 8000d82:	58e3      	ldr	r3, [r4, r3]
 8000d84:	601a      	str	r2, [r3, #0]
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b007      	add	sp, #28
 8000d8c:	bd90      	pop	{r4, r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	40021000 	.word	0x40021000
 8000d94:	00000028 	.word	0x00000028
			8000d94: R_ARM_GOT32	SystemCoreClock
 8000d98:	007a1200 	.word	0x007a1200
 8000d9c:	00f42400 	.word	0x00f42400
 8000da0:	00000044 	.word	0x00000044
			8000da0: R_ARM_GOT32	AHBPrescTable
 8000da4:	0000001c 	.word	0x0000001c
			8000da4: R_ARM_GOT32	APBPrescTable
 8000da8:	00000034 	.word	0x00000034
			8000da8: R_ARM_GOT32	SystemAPBClock

08000dac <printf>:
#include <stdarg.h>
#include <stdio.h>

int
printf(const char *fmt, ...)
{
 8000dac:	b40f      	push	{r0, r1, r2, r3}
 8000dae:	464b      	mov	r3, r9
	va_list ap;
	int i;

	va_start(ap, fmt);
	i = vfprintf(stdout, fmt, ap);
 8000db0:	4648      	mov	r0, r9
{
 8000db2:	b508      	push	{r3, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	aa04      	add	r2, sp, #16
 8000db8:	ca02      	ldmia	r2!, {r1}
	i = vfprintf(stdout, fmt, ap);
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <printf+0x28>)
	va_start(ap, fmt);
 8000dbc:	9201      	str	r2, [sp, #4]
	i = vfprintf(stdout, fmt, ap);
 8000dbe:	58c3      	ldr	r3, [r0, r3]
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	f000 f825 	bl	8000e10 <__i_vfprintf>
			8000dc2: R_ARM_THM_CALL	vfprintf
	va_end(ap);

	return i;
}
 8000dc6:	b002      	add	sp, #8
 8000dc8:	bc04      	pop	{r2}
 8000dca:	4691      	mov	r9, r2
 8000dcc:	bc08      	pop	{r3}
 8000dce:	b004      	add	sp, #16
 8000dd0:	4718      	bx	r3
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	00000020 	.word	0x00000020
			8000dd4: R_ARM_GOT32	stdout

08000dd8 <__ultoa_invert>:
#endif
#endif

static __noinline char *
__ultoa_invert(ultoa_unsigned_t val, char *str, int base)
{
 8000dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char hex = ('a' - '0' - 10 + 16) - base;
 8000dda:	2637      	movs	r6, #55	; 0x37
{
 8000ddc:	0014      	movs	r4, r2
	char hex = ('a' - '0' - 10 + 16) - base;
 8000dde:	1ab6      	subs	r6, r6, r2

        base &= 31;
 8000de0:	221f      	movs	r2, #31
{
 8000de2:	0007      	movs	r7, r0
 8000de4:	000d      	movs	r5, r1
	char hex = ('a' - '0' - 10 + 16) - base;
 8000de6:	b2f6      	uxtb	r6, r6
        base &= 31;
 8000de8:	4014      	ands	r4, r2
		char	v;

#ifdef FANCY_DIVMOD
                val = udivmod(val, base, &v);
#else
                v = val % base;
 8000dea:	0038      	movs	r0, r7
 8000dec:	0021      	movs	r1, r4
 8000dee:	f000 fafd 	bl	80013ec <__aeabi_uidivmod>
			8000dee: R_ARM_THM_CALL	__aeabi_uidivmod
 8000df2:	003a      	movs	r2, r7
 8000df4:	b2cb      	uxtb	r3, r1
                val /= base;
 8000df6:	0007      	movs	r7, r0
#endif
		if (v > 9)
 8000df8:	2909      	cmp	r1, #9
 8000dfa:	d901      	bls.n	8000e00 <__ultoa_invert+0x28>
                        v += hex;
 8000dfc:	18f3      	adds	r3, r6, r3
 8000dfe:	b2db      	uxtb	r3, r3
                v += '0';
 8000e00:	3330      	adds	r3, #48	; 0x30
 8000e02:	1c68      	adds	r0, r5, #1
		*str++ = v;
 8000e04:	702b      	strb	r3, [r5, #0]
	} while (val);
 8000e06:	4294      	cmp	r4, r2
 8000e08:	d900      	bls.n	8000e0c <__ultoa_invert+0x34>
	return str;
}
 8000e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e0c:	0005      	movs	r5, r0
 8000e0e:	e7ec      	b.n	8000dea <__ultoa_invert+0x12>

08000e10 <__i_vfprintf>:
    }
}
#endif

int vfprintf (FILE * stream, const CHAR *fmt, va_list ap_orig)
{
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	46ce      	mov	lr, r9
 8000e14:	464b      	mov	r3, r9
 8000e16:	b500      	push	{lr}
 8000e18:	b08e      	sub	sp, #56	; 0x38
 8000e1a:	9308      	str	r3, [sp, #32]
#define dtoa	(u.__dtoa)

    int stream_len = 0;

#ifndef my_putc
    int (*put)(char, FILE *) = stream->put;
 8000e1c:	6843      	ldr	r3, [r0, #4]
{
 8000e1e:	9002      	str	r0, [sp, #8]
 8000e20:	9200      	str	r2, [sp, #0]
    int (*put)(char, FILE *) = stream->put;
 8000e22:	9305      	str	r3, [sp, #20]
#define my_putc(c, stream) do { ++stream_len; if (put(c, stream) < 0) goto fail; } while(0)
#endif

    if ((stream->flags & __SWR) == 0)
 8000e24:	7883      	ldrb	r3, [r0, #2]
    int stream_len = 0;
 8000e26:	2700      	movs	r7, #0
    if ((stream->flags & __SWR) == 0)
 8000e28:	079b      	lsls	r3, r3, #30
 8000e2a:	d500      	bpl.n	8000e2e <__i_vfprintf+0x1e>
 8000e2c:	e20f      	b.n	800124e <__i_vfprintf+0x43e>
	return EOF;
 8000e2e:	2701      	movs	r7, #1
 8000e30:	427f      	negs	r7, r7
 8000e32:	e057      	b.n	8000ee4 <__i_vfprintf+0xd4>

	for (;;) {
	    c = *fmt++;
	    if (!c) goto ret;
	    if (c == '%') {
		c = *fmt++;
 8000e34:	784e      	ldrb	r6, [r1, #1]
 8000e36:	1c8b      	adds	r3, r1, #2
 8000e38:	9306      	str	r3, [sp, #24]
		if (c != '%') break;
 8000e3a:	2e25      	cmp	r6, #37	; 0x25
 8000e3c:	d100      	bne.n	8000e40 <__i_vfprintf+0x30>
 8000e3e:	e20f      	b.n	8001260 <__i_vfprintf+0x450>
	    my_putc (c, stream);
	}

	flags = 0;
	width = 0;
	prec = 0;
 8000e40:	2200      	movs	r2, #0
	flags = 0;
 8000e42:	0015      	movs	r5, r2
 8000e44:	9b06      	ldr	r3, [sp, #24]
	prec = 0;
 8000e46:	9201      	str	r2, [sp, #4]
	width = 0;
 8000e48:	9203      	str	r2, [sp, #12]
 8000e4a:	9306      	str	r3, [sp, #24]
#ifdef _NEED_IO_POS_ARGS
        argno = 0;
#endif

	do {
	    if (flags < FL_WIDTH) {
 8000e4c:	2d1f      	cmp	r5, #31
 8000e4e:	d819      	bhi.n	8000e84 <__i_vfprintf+0x74>
		switch (c) {
 8000e50:	0030      	movs	r0, r6
 8000e52:	3820      	subs	r0, #32
 8000e54:	2810      	cmp	r0, #16
 8000e56:	d817      	bhi.n	8000e88 <__i_vfprintf+0x78>
 8000e58:	f000 fa2c 	bl	80012b4 <__gnu_thumb1_case_uqi>
			8000e58: R_ARM_THM_CALL	__gnu_thumb1_case_uqi
 8000e5c:	1216160e 	.word	0x1216160e
 8000e60:	34161616 	.word	0x34161616
 8000e64:	0c161616 	.word	0x0c161616
 8000e68:	16161016 	.word	0x16161016
 8000e6c:	09          	.byte	0x09
 8000e6d:	00          	.byte	0x00
		  case '0':
		    flags |= FL_ZFILL;
 8000e6e:	2201      	movs	r2, #1
                    continue;
                }
#endif
	    }

            CHECK_INT_SIZES(c, flags);
 8000e70:	4315      	orrs	r5, r2
 8000e72:	e027      	b.n	8000ec4 <__i_vfprintf+0xb4>
		    flags |= FL_PLUS;
 8000e74:	2202      	movs	r2, #2
 8000e76:	4315      	orrs	r5, r2
		    flags |= FL_SPACE;
 8000e78:	2204      	movs	r2, #4
 8000e7a:	e7f9      	b.n	8000e70 <__i_vfprintf+0x60>
		    flags |= FL_LPAD;
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	e7f7      	b.n	8000e70 <__i_vfprintf+0x60>
		    flags |= FL_ALT;
 8000e80:	2210      	movs	r2, #16
 8000e82:	e7f5      	b.n	8000e70 <__i_vfprintf+0x60>
	    if (flags < FL_LONG) {
 8000e84:	2d7f      	cmp	r5, #127	; 0x7f
 8000e86:	d832      	bhi.n	8000eee <__i_vfprintf+0xde>
		if (c >= '0' && c <= '9') {
 8000e88:	0032      	movs	r2, r6
 8000e8a:	3a30      	subs	r2, #48	; 0x30
 8000e8c:	2a09      	cmp	r2, #9
 8000e8e:	d80d      	bhi.n	8000eac <__i_vfprintf+0x9c>
		    if (flags & FL_PREC) {
 8000e90:	240a      	movs	r4, #10
 8000e92:	0669      	lsls	r1, r5, #25
 8000e94:	d504      	bpl.n	8000ea0 <__i_vfprintf+0x90>
			prec = 10*prec + c;
 8000e96:	9901      	ldr	r1, [sp, #4]
 8000e98:	434c      	muls	r4, r1
 8000e9a:	18a2      	adds	r2, r4, r2
 8000e9c:	9201      	str	r2, [sp, #4]
 8000e9e:	e011      	b.n	8000ec4 <__i_vfprintf+0xb4>
		    width = 10*width + c;
 8000ea0:	9903      	ldr	r1, [sp, #12]
 8000ea2:	434c      	muls	r4, r1
 8000ea4:	18a2      	adds	r2, r4, r2
 8000ea6:	9203      	str	r2, [sp, #12]
		    flags |= FL_WIDTH;
 8000ea8:	2220      	movs	r2, #32
 8000eaa:	e7e1      	b.n	8000e70 <__i_vfprintf+0x60>
		if (c == '*') {
 8000eac:	2e2a      	cmp	r6, #42	; 0x2a
 8000eae:	d114      	bne.n	8000eda <__i_vfprintf+0xca>
		    if (flags & FL_PREC) {
 8000eb0:	9900      	ldr	r1, [sp, #0]
 8000eb2:	c904      	ldmia	r1!, {r2}
 8000eb4:	9100      	str	r1, [sp, #0]
 8000eb6:	0669      	lsls	r1, r5, #25
 8000eb8:	d4f0      	bmi.n	8000e9c <__i_vfprintf+0x8c>
			if (width < 0) {
 8000eba:	2a00      	cmp	r2, #0
 8000ebc:	db09      	blt.n	8000ed2 <__i_vfprintf+0xc2>
			flags |= FL_WIDTH;
 8000ebe:	2120      	movs	r1, #32
 8000ec0:	9203      	str	r2, [sp, #12]
 8000ec2:	430d      	orrs	r5, r1

	    break;
	} while ( (c = *fmt++) != 0);
 8000ec4:	9a06      	ldr	r2, [sp, #24]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	7816      	ldrb	r6, [r2, #0]
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	d1bd      	bne.n	8000e4a <__i_vfprintf+0x3a>
 8000ece:	9306      	str	r3, [sp, #24]
 8000ed0:	e02d      	b.n	8000f2e <__i_vfprintf+0x11e>
			    width = -width;
 8000ed2:	4252      	negs	r2, r2
 8000ed4:	9203      	str	r2, [sp, #12]
			    flags |= FL_LPAD;
 8000ed6:	2228      	movs	r2, #40	; 0x28
 8000ed8:	e7ca      	b.n	8000e70 <__i_vfprintf+0x60>
		if (c == '.') {
 8000eda:	2e2e      	cmp	r6, #46	; 0x2e
 8000edc:	d107      	bne.n	8000eee <__i_vfprintf+0xde>
		    if (flags & FL_PREC)
 8000ede:	2240      	movs	r2, #64	; 0x40
 8000ee0:	4215      	tst	r5, r2
 8000ee2:	d0c5      	beq.n	8000e70 <__i_vfprintf+0x60>
#undef my_putc
#undef ap
  fail:
    stream_len = -1;
    goto ret;
}
 8000ee4:	0038      	movs	r0, r7
 8000ee6:	b00e      	add	sp, #56	; 0x38
 8000ee8:	bc04      	pop	{r2}
 8000eea:	4691      	mov	r9, r2
 8000eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
            CHECK_INT_SIZES(c, flags);
 8000eee:	2e6c      	cmp	r6, #108	; 0x6c
 8000ef0:	d107      	bne.n	8000f02 <__i_vfprintf+0xf2>
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	4215      	tst	r5, r2
 8000ef6:	d002      	beq.n	8000efe <__i_vfprintf+0xee>
 8000ef8:	3281      	adds	r2, #129	; 0x81
 8000efa:	32ff      	adds	r2, #255	; 0xff
 8000efc:	4315      	orrs	r5, r2
 8000efe:	2280      	movs	r2, #128	; 0x80
 8000f00:	e7b6      	b.n	8000e70 <__i_vfprintf+0x60>
 8000f02:	2e68      	cmp	r6, #104	; 0x68
 8000f04:	d108      	bne.n	8000f18 <__i_vfprintf+0x108>
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	0052      	lsls	r2, r2, #1
 8000f0a:	4215      	tst	r5, r2
 8000f0c:	d001      	beq.n	8000f12 <__i_vfprintf+0x102>
 8000f0e:	1892      	adds	r2, r2, r2
 8000f10:	4315      	orrs	r5, r2
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	0052      	lsls	r2, r2, #1
 8000f16:	e7ab      	b.n	8000e70 <__i_vfprintf+0x60>
 8000f18:	2e4c      	cmp	r6, #76	; 0x4c
 8000f1a:	d102      	bne.n	8000f22 <__i_vfprintf+0x112>
 8000f1c:	22a0      	movs	r2, #160	; 0xa0
 8000f1e:	0092      	lsls	r2, r2, #2
 8000f20:	e7a6      	b.n	8000e70 <__i_vfprintf+0x60>
 8000f22:	2e6a      	cmp	r6, #106	; 0x6a
 8000f24:	d0fa      	beq.n	8000f1c <__i_vfprintf+0x10c>
 8000f26:	2e7a      	cmp	r6, #122	; 0x7a
 8000f28:	d0cc      	beq.n	8000ec4 <__i_vfprintf+0xb4>
 8000f2a:	2e74      	cmp	r6, #116	; 0x74
 8000f2c:	d0ca      	beq.n	8000ec4 <__i_vfprintf+0xb4>
	if (prec < 0) {
 8000f2e:	9b01      	ldr	r3, [sp, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	da03      	bge.n	8000f3c <__i_vfprintf+0x12c>
	    flags &= ~FL_PREC;
 8000f34:	2340      	movs	r3, #64	; 0x40
 8000f36:	439d      	bics	r5, r3
	    prec = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	9301      	str	r3, [sp, #4]
	if ((TOLOW(c) >= 'e' && TOLOW(c) <= 'g')
 8000f3c:	2320      	movs	r3, #32
 8000f3e:	4333      	orrs	r3, r6
 8000f40:	001a      	movs	r2, r3
 8000f42:	3a65      	subs	r2, #101	; 0x65
 8000f44:	2a02      	cmp	r2, #2
 8000f46:	d901      	bls.n	8000f4c <__i_vfprintf+0x13c>
            || TOLOW(c) == 'a'
 8000f48:	2b61      	cmp	r3, #97	; 0x61
 8000f4a:	d11a      	bne.n	8000f82 <__i_vfprintf+0x172>
            SKIP_FLOAT_ARG(flags, ap);
 8000f4c:	2007      	movs	r0, #7
 8000f4e:	9a00      	ldr	r2, [sp, #0]
	    pnt = "*float*";
 8000f50:	4bb5      	ldr	r3, [pc, #724]	; (8001228 <__i_vfprintf+0x418>)
            SKIP_FLOAT_ARG(flags, ap);
 8000f52:	3207      	adds	r2, #7
 8000f54:	4382      	bics	r2, r0
 8000f56:	3208      	adds	r2, #8
 8000f58:	9200      	str	r2, [sp, #0]
	    pnt = "*float*";
 8000f5a:	9a08      	ldr	r2, [sp, #32]
	    size = sizeof ("*float*") - 1;
 8000f5c:	9004      	str	r0, [sp, #16]
	    pnt = "*float*";
 8000f5e:	58d4      	ldr	r4, [r2, r3]
                if (!(flags & FL_LPAD)) {
 8000f60:	072b      	lsls	r3, r5, #28
 8000f62:	d53f      	bpl.n	8000fe4 <__i_vfprintf+0x1d4>
 8000f64:	003e      	movs	r6, r7
 8000f66:	9b03      	ldr	r3, [sp, #12]
 8000f68:	9301      	str	r3, [sp, #4]
                while (size--) {
 8000f6a:	0037      	movs	r7, r6
 8000f6c:	9b04      	ldr	r3, [sp, #16]
 8000f6e:	199b      	adds	r3, r3, r6
 8000f70:	9303      	str	r3, [sp, #12]
 8000f72:	9b03      	ldr	r3, [sp, #12]
 8000f74:	003d      	movs	r5, r7
 8000f76:	42bb      	cmp	r3, r7
 8000f78:	d136      	bne.n	8000fe8 <__i_vfprintf+0x1d8>
                width -= size;
 8000f7a:	9b01      	ldr	r3, [sp, #4]
 8000f7c:	9a04      	ldr	r2, [sp, #16]
 8000f7e:	1a9c      	subs	r4, r3, r2
 8000f80:	e10a      	b.n	8001198 <__i_vfprintf+0x388>
            if (c == 'c') {
 8000f82:	2e63      	cmp	r6, #99	; 0x63
 8000f84:	d107      	bne.n	8000f96 <__i_vfprintf+0x186>
                size = 1;
 8000f86:	2301      	movs	r3, #1
                buf[0] = va_arg (ap, int);
 8000f88:	9a00      	ldr	r2, [sp, #0]
 8000f8a:	ac0b      	add	r4, sp, #44	; 0x2c
 8000f8c:	ca02      	ldmia	r2!, {r1}
                size = 1;
 8000f8e:	9304      	str	r3, [sp, #16]
                buf[0] = va_arg (ap, int);
 8000f90:	7021      	strb	r1, [r4, #0]
 8000f92:	9200      	str	r2, [sp, #0]
                goto str_lpad;
 8000f94:	e7e4      	b.n	8000f60 <__i_vfprintf+0x150>
            } else if (c == 's') {
 8000f96:	2e73      	cmp	r6, #115	; 0x73
 8000f98:	d12f      	bne.n	8000ffa <__i_vfprintf+0x1ea>
                    pnt = va_arg (ap, char *);
 8000f9a:	9e00      	ldr	r6, [sp, #0]
 8000f9c:	ce10      	ldmia	r6!, {r4}
                if (!pnt)
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d102      	bne.n	8000fa8 <__i_vfprintf+0x198>
                    pnt = "(null)";
 8000fa2:	4ba2      	ldr	r3, [pc, #648]	; (800122c <__i_vfprintf+0x41c>)
 8000fa4:	9a08      	ldr	r2, [sp, #32]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
                size = strnlen (pnt, (flags & FL_PREC) ? (size_t) prec : SIZE_MAX);
 8000fa8:	9901      	ldr	r1, [sp, #4]
 8000faa:	066b      	lsls	r3, r5, #25
 8000fac:	d401      	bmi.n	8000fb2 <__i_vfprintf+0x1a2>
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4249      	negs	r1, r1
 8000fb2:	0020      	movs	r0, r4
 8000fb4:	f000 f95c 	bl	8001270 <strnlen>
			8000fb4: R_ARM_THM_CALL	strnlen
                    pnt = va_arg (ap, char *);
 8000fb8:	9600      	str	r6, [sp, #0]
                size = strnlen (pnt, (flags & FL_PREC) ? (size_t) prec : SIZE_MAX);
 8000fba:	9004      	str	r0, [sp, #16]
 8000fbc:	e7d0      	b.n	8000f60 <__i_vfprintf+0x150>
                        my_putc (' ', stream);
 8000fbe:	2020      	movs	r0, #32
 8000fc0:	9902      	ldr	r1, [sp, #8]
 8000fc2:	9b05      	ldr	r3, [sp, #20]
 8000fc4:	4798      	blx	r3
 8000fc6:	2800      	cmp	r0, #0
 8000fc8:	da00      	bge.n	8000fcc <__i_vfprintf+0x1bc>
 8000fca:	e730      	b.n	8000e2e <__i_vfprintf+0x1e>
                        width--;
 8000fcc:	9b01      	ldr	r3, [sp, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	9b03      	ldr	r3, [sp, #12]
                    while ((size_t) width > size) {
 8000fd4:	9a01      	ldr	r2, [sp, #4]
 8000fd6:	18fe      	adds	r6, r7, r3
 8000fd8:	9b01      	ldr	r3, [sp, #4]
 8000fda:	1af6      	subs	r6, r6, r3
 8000fdc:	9b04      	ldr	r3, [sp, #16]
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d3ed      	bcc.n	8000fbe <__i_vfprintf+0x1ae>
 8000fe2:	e7c2      	b.n	8000f6a <__i_vfprintf+0x15a>
 8000fe4:	9b03      	ldr	r3, [sp, #12]
 8000fe6:	e7f3      	b.n	8000fd0 <__i_vfprintf+0x1c0>
                        my_putc (*pnt++, stream);
 8000fe8:	1ba3      	subs	r3, r4, r6
 8000fea:	5dd8      	ldrb	r0, [r3, r7]
 8000fec:	9902      	ldr	r1, [sp, #8]
 8000fee:	9b05      	ldr	r3, [sp, #20]
 8000ff0:	4798      	blx	r3
 8000ff2:	3701      	adds	r7, #1
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	dabc      	bge.n	8000f72 <__i_vfprintf+0x162>
 8000ff8:	e719      	b.n	8000e2e <__i_vfprintf+0x1e>
                if (c == 'd' || c == 'i') {
 8000ffa:	2e64      	cmp	r6, #100	; 0x64
 8000ffc:	d001      	beq.n	8001002 <__i_vfprintf+0x1f2>
 8000ffe:	2e69      	cmp	r6, #105	; 0x69
 8001000:	d135      	bne.n	800106e <__i_vfprintf+0x25e>
                    arg_to_signed(ap, flags, x_s);
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	421d      	tst	r5, r3
 8001006:	d025      	beq.n	8001054 <__i_vfprintf+0x244>
 8001008:	05ab      	lsls	r3, r5, #22
 800100a:	d51f      	bpl.n	800104c <__i_vfprintf+0x23c>
 800100c:	2307      	movs	r3, #7
 800100e:	9a00      	ldr	r2, [sp, #0]
 8001010:	3207      	adds	r2, #7
 8001012:	439a      	bics	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	6810      	ldr	r0, [r2, #0]
 8001018:	3308      	adds	r3, #8
 800101a:	9300      	str	r3, [sp, #0]
                    if (x_s < 0) {
 800101c:	2800      	cmp	r0, #0
 800101e:	da03      	bge.n	8001028 <__i_vfprintf+0x218>
                        flags |= FL_NEGATIVE;
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	00db      	lsls	r3, r3, #3
                        x_s = -x_s;
 8001024:	4240      	negs	r0, r0
                        flags |= FL_NEGATIVE;
 8001026:	431d      	orrs	r5, r3
                    flags &= ~FL_ALT;
 8001028:	2310      	movs	r3, #16
 800102a:	002a      	movs	r2, r5
 800102c:	439a      	bics	r2, r3
 800102e:	9b01      	ldr	r3, [sp, #4]
 8001030:	9207      	str	r2, [sp, #28]
                    if (x_s == 0 && (flags & FL_PREC) && prec == 0)
 8001032:	4303      	orrs	r3, r0
 8001034:	9304      	str	r3, [sp, #16]
 8001036:	d101      	bne.n	800103c <__i_vfprintf+0x22c>
 8001038:	066b      	lsls	r3, r5, #25
 800103a:	d466      	bmi.n	800110a <__i_vfprintf+0x2fa>
                        buf_len = __ultoa_invert (x_s, buf, 10) - buf;
 800103c:	220a      	movs	r2, #10
                        buf_len = __ultoa_invert (x, buf, base) - buf;
 800103e:	ac0b      	add	r4, sp, #44	; 0x2c
 8001040:	0021      	movs	r1, r4
 8001042:	f7ff fec9 	bl	8000dd8 <__ultoa_invert>
			8001042: R_ARM_THM_CALL	__ultoa_invert
 8001046:	1b03      	subs	r3, r0, r4
 8001048:	9304      	str	r3, [sp, #16]
 800104a:	e05e      	b.n	800110a <__i_vfprintf+0x2fa>
                    arg_to_signed(ap, flags, x_s);
 800104c:	9b00      	ldr	r3, [sp, #0]
 800104e:	cb01      	ldmia	r3!, {r0}
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	e7e3      	b.n	800101c <__i_vfprintf+0x20c>
 8001054:	9b00      	ldr	r3, [sp, #0]
 8001056:	cb01      	ldmia	r3!, {r0}
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	421d      	tst	r5, r3
 8001060:	d0dc      	beq.n	800101c <__i_vfprintf+0x20c>
 8001062:	05ab      	lsls	r3, r5, #22
 8001064:	d501      	bpl.n	800106a <__i_vfprintf+0x25a>
 8001066:	b240      	sxtb	r0, r0
 8001068:	e7d8      	b.n	800101c <__i_vfprintf+0x20c>
 800106a:	b200      	sxth	r0, r0
 800106c:	e7d6      	b.n	800101c <__i_vfprintf+0x20c>
                    if (c == 'u') {
 800106e:	2e75      	cmp	r6, #117	; 0x75
 8001070:	d115      	bne.n	800109e <__i_vfprintf+0x28e>
                        flags &= ~FL_ALT;
 8001072:	2310      	movs	r3, #16
                        base = 10;
 8001074:	220a      	movs	r2, #10
                        flags &= ~FL_ALT;
 8001076:	439d      	bics	r5, r3
                    arg_to_unsigned(ap, flags, x);
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	421d      	tst	r5, r3
 800107c:	d02e      	beq.n	80010dc <__i_vfprintf+0x2cc>
 800107e:	05ab      	lsls	r3, r5, #22
 8001080:	d528      	bpl.n	80010d4 <__i_vfprintf+0x2c4>
 8001082:	2107      	movs	r1, #7
 8001084:	9b00      	ldr	r3, [sp, #0]
 8001086:	3307      	adds	r3, #7
 8001088:	438b      	bics	r3, r1
 800108a:	0019      	movs	r1, r3
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	3108      	adds	r1, #8
 8001090:	9100      	str	r1, [sp, #0]
                    if (x == 0)
 8001092:	2800      	cmp	r0, #0
 8001094:	d02f      	beq.n	80010f6 <__i_vfprintf+0x2e6>
                    flags &= ~(FL_PLUS | FL_SPACE);
 8001096:	2306      	movs	r3, #6
 8001098:	439d      	bics	r5, r3
 800109a:	9507      	str	r5, [sp, #28]
 800109c:	e7cf      	b.n	800103e <__i_vfprintf+0x22e>
                    } else if (c == 'o') {
 800109e:	2e6f      	cmp	r6, #111	; 0x6f
 80010a0:	d015      	beq.n	80010ce <__i_vfprintf+0x2be>
                    } else if (c == 'p') {
 80010a2:	2e70      	cmp	r6, #112	; 0x70
 80010a4:	d103      	bne.n	80010ae <__i_vfprintf+0x29e>
                        flags |= FL_ALT;
 80010a6:	2210      	movs	r2, #16
                        c = 'x';
 80010a8:	3608      	adds	r6, #8
                        flags |= FL_ALT;
 80010aa:	4315      	orrs	r5, r2
                        if (sizeof(void *) > sizeof(int))
 80010ac:	e7e4      	b.n	8001078 <__i_vfprintf+0x268>
                    } else if (TOLOW(c) == 'x') {
 80010ae:	2b78      	cmp	r3, #120	; 0x78
 80010b0:	d104      	bne.n	80010bc <__i_vfprintf+0x2ac>
                        base = ('x' - c) | 16;
 80010b2:	2278      	movs	r2, #120	; 0x78
 80010b4:	3b68      	subs	r3, #104	; 0x68
 80010b6:	1b92      	subs	r2, r2, r6
 80010b8:	431a      	orrs	r2, r3
 80010ba:	e7dd      	b.n	8001078 <__i_vfprintf+0x268>
                        my_putc('%', stream);
 80010bc:	2025      	movs	r0, #37	; 0x25
 80010be:	9902      	ldr	r1, [sp, #8]
 80010c0:	9b05      	ldr	r3, [sp, #20]
 80010c2:	4798      	blx	r3
 80010c4:	2800      	cmp	r0, #0
 80010c6:	da00      	bge.n	80010ca <__i_vfprintf+0x2ba>
 80010c8:	e6b1      	b.n	8000e2e <__i_vfprintf+0x1e>
                        my_putc(c, stream);
 80010ca:	3702      	adds	r7, #2
 80010cc:	e0c9      	b.n	8001262 <__i_vfprintf+0x452>
                        base = 8;
 80010ce:	2208      	movs	r2, #8
                        c = '\0';
 80010d0:	2600      	movs	r6, #0
 80010d2:	e7d1      	b.n	8001078 <__i_vfprintf+0x268>
                    arg_to_unsigned(ap, flags, x);
 80010d4:	9b00      	ldr	r3, [sp, #0]
 80010d6:	cb01      	ldmia	r3!, {r0}
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	e7da      	b.n	8001092 <__i_vfprintf+0x282>
 80010dc:	9b00      	ldr	r3, [sp, #0]
 80010de:	cb01      	ldmia	r3!, {r0}
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	421d      	tst	r5, r3
 80010e8:	d0d3      	beq.n	8001092 <__i_vfprintf+0x282>
 80010ea:	05ab      	lsls	r3, r5, #22
 80010ec:	d501      	bpl.n	80010f2 <__i_vfprintf+0x2e2>
 80010ee:	b2c0      	uxtb	r0, r0
 80010f0:	e7cf      	b.n	8001092 <__i_vfprintf+0x282>
 80010f2:	b280      	uxth	r0, r0
 80010f4:	e7cd      	b.n	8001092 <__i_vfprintf+0x282>
                        flags &= ~FL_ALT;
 80010f6:	2316      	movs	r3, #22
 80010f8:	0029      	movs	r1, r5
 80010fa:	4399      	bics	r1, r3
 80010fc:	9107      	str	r1, [sp, #28]
                    if (x == 0 && (flags & FL_PREC) && prec == 0)
 80010fe:	066b      	lsls	r3, r5, #25
 8001100:	d59d      	bpl.n	800103e <__i_vfprintf+0x22e>
 8001102:	9b01      	ldr	r3, [sp, #4]
                        buf_len = 0;
 8001104:	9004      	str	r0, [sp, #16]
                    if (x == 0 && (flags & FL_PREC) && prec == 0)
 8001106:	2b00      	cmp	r3, #0
 8001108:	d199      	bne.n	800103e <__i_vfprintf+0x22e>
                if (flags & FL_PREC) {
 800110a:	9b07      	ldr	r3, [sp, #28]
 800110c:	065b      	lsls	r3, r3, #25
 800110e:	d545      	bpl.n	800119c <__i_vfprintf+0x38c>
                    flags &= ~FL_ZFILL;
 8001110:	2301      	movs	r3, #1
 8001112:	9d07      	ldr	r5, [sp, #28]
 8001114:	9c04      	ldr	r4, [sp, #16]
 8001116:	439d      	bics	r5, r3
                    if (len < prec) {
 8001118:	9b01      	ldr	r3, [sp, #4]
 800111a:	42a3      	cmp	r3, r4
 800111c:	dd05      	ble.n	800112a <__i_vfprintf+0x31a>
                        if (c == '\0')
 800111e:	001c      	movs	r4, r3
 8001120:	2e00      	cmp	r6, #0
 8001122:	d102      	bne.n	800112a <__i_vfprintf+0x31a>
                            flags &= ~FL_ALT;
 8001124:	2311      	movs	r3, #17
 8001126:	9d07      	ldr	r5, [sp, #28]
 8001128:	439d      	bics	r5, r3
                if (flags & FL_ALT) {
 800112a:	2310      	movs	r3, #16
 800112c:	002a      	movs	r2, r5
 800112e:	401a      	ands	r2, r3
 8001130:	9209      	str	r2, [sp, #36]	; 0x24
 8001132:	421d      	tst	r5, r3
 8001134:	d035      	beq.n	80011a2 <__i_vfprintf+0x392>
                    len += 1;
 8001136:	0033      	movs	r3, r6
 8001138:	1e5a      	subs	r2, r3, #1
 800113a:	4193      	sbcs	r3, r2
 800113c:	191b      	adds	r3, r3, r4
 800113e:	1c5c      	adds	r4, r3, #1
                if (!(flags & FL_LPAD)) {
 8001140:	072b      	lsls	r3, r5, #28
 8001142:	d40b      	bmi.n	800115c <__i_vfprintf+0x34c>
                    if (flags & FL_ZFILL) {
 8001144:	07eb      	lsls	r3, r5, #31
 8001146:	d546      	bpl.n	80011d6 <__i_vfprintf+0x3c6>
                        if (len < width) {
 8001148:	9b04      	ldr	r3, [sp, #16]
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	9b03      	ldr	r3, [sp, #12]
 800114e:	42a3      	cmp	r3, r4
 8001150:	dd04      	ble.n	800115c <__i_vfprintf+0x34c>
                            prec += width - len;
 8001152:	1b1c      	subs	r4, r3, r4
 8001154:	9b04      	ldr	r3, [sp, #16]
 8001156:	18e3      	adds	r3, r4, r3
 8001158:	9c03      	ldr	r4, [sp, #12]
 800115a:	9301      	str	r3, [sp, #4]
                if (flags & FL_ALT) {
 800115c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800115e:	2b00      	cmp	r3, #0
 8001160:	d043      	beq.n	80011ea <__i_vfprintf+0x3da>
                    my_putc ('0', stream);
 8001162:	2030      	movs	r0, #48	; 0x30
 8001164:	9902      	ldr	r1, [sp, #8]
 8001166:	9b05      	ldr	r3, [sp, #20]
 8001168:	4798      	blx	r3
 800116a:	2800      	cmp	r0, #0
 800116c:	da00      	bge.n	8001170 <__i_vfprintf+0x360>
 800116e:	e65e      	b.n	8000e2e <__i_vfprintf+0x1e>
                    if (c != '\0')
 8001170:	2e00      	cmp	r6, #0
 8001172:	d132      	bne.n	80011da <__i_vfprintf+0x3ca>
                    my_putc ('0', stream);
 8001174:	3701      	adds	r7, #1
                    if (flags & FL_NEGATIVE) z = '-';
 8001176:	9707      	str	r7, [sp, #28]
                while (prec > buf_len) {
 8001178:	9b01      	ldr	r3, [sp, #4]
 800117a:	9a07      	ldr	r2, [sp, #28]
 800117c:	18fb      	adds	r3, r7, r3
 800117e:	1a9b      	subs	r3, r3, r2
 8001180:	9a04      	ldr	r2, [sp, #16]
 8001182:	429a      	cmp	r2, r3
 8001184:	db3d      	blt.n	8001202 <__i_vfprintf+0x3f2>
 8001186:	0016      	movs	r6, r2
 8001188:	9b04      	ldr	r3, [sp, #16]
 800118a:	9a07      	ldr	r2, [sp, #28]
 800118c:	189d      	adds	r5, r3, r2
 800118e:	1bad      	subs	r5, r5, r6
                while (buf_len)
 8001190:	2e00      	cmp	r6, #0
 8001192:	d140      	bne.n	8001216 <__i_vfprintf+0x406>
                width -= len;
 8001194:	9b03      	ldr	r3, [sp, #12]
 8001196:	1b1c      	subs	r4, r3, r4
 8001198:	002f      	movs	r7, r5
 800119a:	e053      	b.n	8001244 <__i_vfprintf+0x434>
 800119c:	9c04      	ldr	r4, [sp, #16]
 800119e:	9d07      	ldr	r5, [sp, #28]
 80011a0:	e7c3      	b.n	800112a <__i_vfprintf+0x31a>
                } else if (flags & (FL_NEGATIVE | FL_PLUS | FL_SPACE)) {
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <__i_vfprintf+0x420>)
 80011a4:	402b      	ands	r3, r5
                    len += 1;
 80011a6:	1e5a      	subs	r2, r3, #1
 80011a8:	4193      	sbcs	r3, r2
 80011aa:	18e4      	adds	r4, r4, r3
 80011ac:	e7c8      	b.n	8001140 <__i_vfprintf+0x330>
                        my_putc (' ', stream);
 80011ae:	2020      	movs	r0, #32
 80011b0:	9902      	ldr	r1, [sp, #8]
 80011b2:	9b05      	ldr	r3, [sp, #20]
 80011b4:	4798      	blx	r3
 80011b6:	2800      	cmp	r0, #0
 80011b8:	da00      	bge.n	80011bc <__i_vfprintf+0x3ac>
 80011ba:	e638      	b.n	8000e2e <__i_vfprintf+0x1e>
                        len++;
 80011bc:	9b07      	ldr	r3, [sp, #28]
 80011be:	3301      	adds	r3, #1
 80011c0:	9307      	str	r3, [sp, #28]
 80011c2:	9a07      	ldr	r2, [sp, #28]
 80011c4:	1b3b      	subs	r3, r7, r4
 80011c6:	189b      	adds	r3, r3, r2
                    while (len < width) {
 80011c8:	9907      	ldr	r1, [sp, #28]
 80011ca:	9a03      	ldr	r2, [sp, #12]
 80011cc:	428a      	cmp	r2, r1
 80011ce:	dcee      	bgt.n	80011ae <__i_vfprintf+0x39e>
 80011d0:	000c      	movs	r4, r1
 80011d2:	001f      	movs	r7, r3
 80011d4:	e7c2      	b.n	800115c <__i_vfprintf+0x34c>
 80011d6:	9407      	str	r4, [sp, #28]
 80011d8:	e7f3      	b.n	80011c2 <__i_vfprintf+0x3b2>
                        my_putc (c, stream);
 80011da:	3702      	adds	r7, #2
 80011dc:	b2f0      	uxtb	r0, r6
                    my_putc (z, stream);
 80011de:	9902      	ldr	r1, [sp, #8]
 80011e0:	9b05      	ldr	r3, [sp, #20]
 80011e2:	4798      	blx	r3
 80011e4:	2800      	cmp	r0, #0
 80011e6:	dac6      	bge.n	8001176 <__i_vfprintf+0x366>
 80011e8:	e621      	b.n	8000e2e <__i_vfprintf+0x1e>
                } else if (flags & (FL_NEGATIVE | FL_PLUS | FL_SPACE)) {
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <__i_vfprintf+0x420>)
 80011ec:	421d      	tst	r5, r3
 80011ee:	d0c2      	beq.n	8001176 <__i_vfprintf+0x366>
                    unsigned char z = ' ';
 80011f0:	2020      	movs	r0, #32
                    if (flags & FL_PLUS) z = '+';
 80011f2:	07ab      	lsls	r3, r5, #30
 80011f4:	d500      	bpl.n	80011f8 <__i_vfprintf+0x3e8>
 80011f6:	300b      	adds	r0, #11
                    if (flags & FL_NEGATIVE) z = '-';
 80011f8:	056b      	lsls	r3, r5, #21
 80011fa:	d500      	bpl.n	80011fe <__i_vfprintf+0x3ee>
 80011fc:	202d      	movs	r0, #45	; 0x2d
                    my_putc (z, stream);
 80011fe:	3701      	adds	r7, #1
 8001200:	e7ed      	b.n	80011de <__i_vfprintf+0x3ce>
                    my_putc ('0', stream);
 8001202:	9b07      	ldr	r3, [sp, #28]
 8001204:	2030      	movs	r0, #48	; 0x30
 8001206:	3301      	adds	r3, #1
 8001208:	9307      	str	r3, [sp, #28]
 800120a:	9902      	ldr	r1, [sp, #8]
 800120c:	9b05      	ldr	r3, [sp, #20]
 800120e:	4798      	blx	r3
 8001210:	2800      	cmp	r0, #0
 8001212:	dab1      	bge.n	8001178 <__i_vfprintf+0x368>
 8001214:	e60b      	b.n	8000e2e <__i_vfprintf+0x1e>
                    my_putc (buf[--buf_len], stream);
 8001216:	ab0b      	add	r3, sp, #44	; 0x2c
 8001218:	3e01      	subs	r6, #1
 800121a:	5cf0      	ldrb	r0, [r6, r3]
 800121c:	9902      	ldr	r1, [sp, #8]
 800121e:	9b05      	ldr	r3, [sp, #20]
 8001220:	4798      	blx	r3
 8001222:	2800      	cmp	r0, #0
 8001224:	dab0      	bge.n	8001188 <__i_vfprintf+0x378>
 8001226:	e602      	b.n	8000e2e <__i_vfprintf+0x1e>
 8001228:	00000018 	.word	0x00000018
			8001228: R_ARM_GOT32	.LC1
 800122c:	00000014 	.word	0x00000014
			800122c: R_ARM_GOT32	.LC0
 8001230:	00000406 	.word	0x00000406
	    my_putc (' ', stream);
 8001234:	2020      	movs	r0, #32
 8001236:	9902      	ldr	r1, [sp, #8]
 8001238:	9b05      	ldr	r3, [sp, #20]
 800123a:	3701      	adds	r7, #1
 800123c:	4798      	blx	r3
 800123e:	2800      	cmp	r0, #0
 8001240:	da00      	bge.n	8001244 <__i_vfprintf+0x434>
 8001242:	e5f4      	b.n	8000e2e <__i_vfprintf+0x1e>
	while (width-- > 0) {
 8001244:	1963      	adds	r3, r4, r5
 8001246:	1bdb      	subs	r3, r3, r7
 8001248:	2b00      	cmp	r3, #0
 800124a:	dcf3      	bgt.n	8001234 <__i_vfprintf+0x424>
{
 800124c:	9906      	ldr	r1, [sp, #24]
	    c = *fmt++;
 800124e:	780e      	ldrb	r6, [r1, #0]
	    if (!c) goto ret;
 8001250:	2e00      	cmp	r6, #0
 8001252:	d100      	bne.n	8001256 <__i_vfprintf+0x446>
 8001254:	e646      	b.n	8000ee4 <__i_vfprintf+0xd4>
	    if (c == '%') {
 8001256:	2e25      	cmp	r6, #37	; 0x25
 8001258:	d100      	bne.n	800125c <__i_vfprintf+0x44c>
 800125a:	e5eb      	b.n	8000e34 <__i_vfprintf+0x24>
	    c = *fmt++;
 800125c:	1c4b      	adds	r3, r1, #1
 800125e:	9306      	str	r3, [sp, #24]
	    my_putc (c, stream);
 8001260:	3701      	adds	r7, #1
                        my_putc(c, stream);
 8001262:	9902      	ldr	r1, [sp, #8]
 8001264:	9b05      	ldr	r3, [sp, #20]
 8001266:	b2f0      	uxtb	r0, r6
 8001268:	4798      	blx	r3
 800126a:	2800      	cmp	r0, #0
 800126c:	daee      	bge.n	800124c <__i_vfprintf+0x43c>
 800126e:	e5de      	b.n	8000e2e <__i_vfprintf+0x1e>

08001270 <strnlen>:
strnlen (const char *str,
	size_t n)
{
  const char *start = str;

  while (n-- > 0 && *str)
 8001270:	0003      	movs	r3, r0
 8001272:	1841      	adds	r1, r0, r1
 8001274:	428b      	cmp	r3, r1
 8001276:	d101      	bne.n	800127c <strnlen+0xc>
    str++;

  return str - start;
 8001278:	1a18      	subs	r0, r3, r0
}
 800127a:	4770      	bx	lr
  while (n-- > 0 && *str)
 800127c:	781a      	ldrb	r2, [r3, #0]
 800127e:	2a00      	cmp	r2, #0
 8001280:	d0fa      	beq.n	8001278 <strnlen+0x8>
    str++;
 8001282:	3301      	adds	r3, #1
 8001284:	e7f6      	b.n	8001274 <strnlen+0x4>

08001286 <sys_semihost_getc>:

#include "semihost-private.h"

int
sys_semihost_getc(FILE *file)
{
 8001286:	b510      	push	{r4, lr}
	(void) file;
	uint8_t ch = sys_semihost(SYS_READC, 0);
 8001288:	2100      	movs	r1, #0
 800128a:	2007      	movs	r0, #7
 800128c:	f000 f810 	bl	80012b0 <sys_semihost>
			800128c: R_ARM_THM_CALL	sys_semihost
	return ch;
 8001290:	b2c0      	uxtb	r0, r0
}
 8001292:	bd10      	pop	{r4, pc}

08001294 <sys_semihost_putc>:

#include "semihost-private.h"

int
sys_semihost_putc(char c, FILE *file)
{
 8001294:	b510      	push	{r4, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	466b      	mov	r3, sp
 800129a:	1ddc      	adds	r4, r3, #7
 800129c:	71d8      	strb	r0, [r3, #7]
	(void) file;
	sys_semihost(SYS_WRITEC, (uintptr_t) &c);
 800129e:	0021      	movs	r1, r4
 80012a0:	2003      	movs	r0, #3
 80012a2:	f000 f805 	bl	80012b0 <sys_semihost>
			80012a2: R_ARM_THM_CALL	sys_semihost
	return (unsigned char) c;
 80012a6:	7820      	ldrb	r0, [r4, #0]
}
 80012a8:	bd16      	pop	{r1, r2, r4, pc}
 80012aa:	0000      	movs	r0, r0
 80012ac:	0000      	movs	r0, r0
	...

080012b0 <sys_semihost>:
#ifdef __thumb__
	.thumb
#endif
sys_semihost:
#if __ARM_ARCH_PROFILE == 'M'
	bkpt #0xab
 80012b0:	beab      	bkpt	0x00ab
	svc #0xab
#else
	svc #0x123456
#endif
#endif
	bx lr
 80012b2:	4770      	bx	lr

080012b4 <__gnu_thumb1_case_uqi>:
 80012b4:	b402      	push	{r1}
 80012b6:	4671      	mov	r1, lr
 80012b8:	0849      	lsrs	r1, r1, #1
 80012ba:	0049      	lsls	r1, r1, #1
 80012bc:	5c09      	ldrb	r1, [r1, r0]
 80012be:	0049      	lsls	r1, r1, #1
 80012c0:	448e      	add	lr, r1
 80012c2:	bc02      	pop	{r1}
 80012c4:	4770      	bx	lr
 80012c6:	46c0      	nop			; (mov r8, r8)

080012c8 <__gnu_thumb1_case_si>:
 80012c8:	b403      	push	{r0, r1}
 80012ca:	4671      	mov	r1, lr
 80012cc:	3102      	adds	r1, #2
 80012ce:	0889      	lsrs	r1, r1, #2
 80012d0:	0080      	lsls	r0, r0, #2
 80012d2:	0089      	lsls	r1, r1, #2
 80012d4:	5808      	ldr	r0, [r1, r0]
 80012d6:	1840      	adds	r0, r0, r1
 80012d8:	4686      	mov	lr, r0
 80012da:	bc03      	pop	{r0, r1}
 80012dc:	46f7      	mov	pc, lr
 80012de:	46c0      	nop			; (mov r8, r8)

080012e0 <__udivsi3>:
 80012e0:	2200      	movs	r2, #0
 80012e2:	0843      	lsrs	r3, r0, #1
 80012e4:	428b      	cmp	r3, r1
 80012e6:	d374      	bcc.n	80013d2 <__udivsi3+0xf2>
 80012e8:	0903      	lsrs	r3, r0, #4
 80012ea:	428b      	cmp	r3, r1
 80012ec:	d35f      	bcc.n	80013ae <__udivsi3+0xce>
 80012ee:	0a03      	lsrs	r3, r0, #8
 80012f0:	428b      	cmp	r3, r1
 80012f2:	d344      	bcc.n	800137e <__udivsi3+0x9e>
 80012f4:	0b03      	lsrs	r3, r0, #12
 80012f6:	428b      	cmp	r3, r1
 80012f8:	d328      	bcc.n	800134c <__udivsi3+0x6c>
 80012fa:	0c03      	lsrs	r3, r0, #16
 80012fc:	428b      	cmp	r3, r1
 80012fe:	d30d      	bcc.n	800131c <__udivsi3+0x3c>
 8001300:	22ff      	movs	r2, #255	; 0xff
 8001302:	0209      	lsls	r1, r1, #8
 8001304:	ba12      	rev	r2, r2
 8001306:	0c03      	lsrs	r3, r0, #16
 8001308:	428b      	cmp	r3, r1
 800130a:	d302      	bcc.n	8001312 <__udivsi3+0x32>
 800130c:	1212      	asrs	r2, r2, #8
 800130e:	0209      	lsls	r1, r1, #8
 8001310:	d065      	beq.n	80013de <__udivsi3+0xfe>
 8001312:	0b03      	lsrs	r3, r0, #12
 8001314:	428b      	cmp	r3, r1
 8001316:	d319      	bcc.n	800134c <__udivsi3+0x6c>
 8001318:	e000      	b.n	800131c <__udivsi3+0x3c>
 800131a:	0a09      	lsrs	r1, r1, #8
 800131c:	0bc3      	lsrs	r3, r0, #15
 800131e:	428b      	cmp	r3, r1
 8001320:	d301      	bcc.n	8001326 <__udivsi3+0x46>
 8001322:	03cb      	lsls	r3, r1, #15
 8001324:	1ac0      	subs	r0, r0, r3
 8001326:	4152      	adcs	r2, r2
 8001328:	0b83      	lsrs	r3, r0, #14
 800132a:	428b      	cmp	r3, r1
 800132c:	d301      	bcc.n	8001332 <__udivsi3+0x52>
 800132e:	038b      	lsls	r3, r1, #14
 8001330:	1ac0      	subs	r0, r0, r3
 8001332:	4152      	adcs	r2, r2
 8001334:	0b43      	lsrs	r3, r0, #13
 8001336:	428b      	cmp	r3, r1
 8001338:	d301      	bcc.n	800133e <__udivsi3+0x5e>
 800133a:	034b      	lsls	r3, r1, #13
 800133c:	1ac0      	subs	r0, r0, r3
 800133e:	4152      	adcs	r2, r2
 8001340:	0b03      	lsrs	r3, r0, #12
 8001342:	428b      	cmp	r3, r1
 8001344:	d301      	bcc.n	800134a <__udivsi3+0x6a>
 8001346:	030b      	lsls	r3, r1, #12
 8001348:	1ac0      	subs	r0, r0, r3
 800134a:	4152      	adcs	r2, r2
 800134c:	0ac3      	lsrs	r3, r0, #11
 800134e:	428b      	cmp	r3, r1
 8001350:	d301      	bcc.n	8001356 <__udivsi3+0x76>
 8001352:	02cb      	lsls	r3, r1, #11
 8001354:	1ac0      	subs	r0, r0, r3
 8001356:	4152      	adcs	r2, r2
 8001358:	0a83      	lsrs	r3, r0, #10
 800135a:	428b      	cmp	r3, r1
 800135c:	d301      	bcc.n	8001362 <__udivsi3+0x82>
 800135e:	028b      	lsls	r3, r1, #10
 8001360:	1ac0      	subs	r0, r0, r3
 8001362:	4152      	adcs	r2, r2
 8001364:	0a43      	lsrs	r3, r0, #9
 8001366:	428b      	cmp	r3, r1
 8001368:	d301      	bcc.n	800136e <__udivsi3+0x8e>
 800136a:	024b      	lsls	r3, r1, #9
 800136c:	1ac0      	subs	r0, r0, r3
 800136e:	4152      	adcs	r2, r2
 8001370:	0a03      	lsrs	r3, r0, #8
 8001372:	428b      	cmp	r3, r1
 8001374:	d301      	bcc.n	800137a <__udivsi3+0x9a>
 8001376:	020b      	lsls	r3, r1, #8
 8001378:	1ac0      	subs	r0, r0, r3
 800137a:	4152      	adcs	r2, r2
 800137c:	d2cd      	bcs.n	800131a <__udivsi3+0x3a>
 800137e:	09c3      	lsrs	r3, r0, #7
 8001380:	428b      	cmp	r3, r1
 8001382:	d301      	bcc.n	8001388 <__udivsi3+0xa8>
 8001384:	01cb      	lsls	r3, r1, #7
 8001386:	1ac0      	subs	r0, r0, r3
 8001388:	4152      	adcs	r2, r2
 800138a:	0983      	lsrs	r3, r0, #6
 800138c:	428b      	cmp	r3, r1
 800138e:	d301      	bcc.n	8001394 <__udivsi3+0xb4>
 8001390:	018b      	lsls	r3, r1, #6
 8001392:	1ac0      	subs	r0, r0, r3
 8001394:	4152      	adcs	r2, r2
 8001396:	0943      	lsrs	r3, r0, #5
 8001398:	428b      	cmp	r3, r1
 800139a:	d301      	bcc.n	80013a0 <__udivsi3+0xc0>
 800139c:	014b      	lsls	r3, r1, #5
 800139e:	1ac0      	subs	r0, r0, r3
 80013a0:	4152      	adcs	r2, r2
 80013a2:	0903      	lsrs	r3, r0, #4
 80013a4:	428b      	cmp	r3, r1
 80013a6:	d301      	bcc.n	80013ac <__udivsi3+0xcc>
 80013a8:	010b      	lsls	r3, r1, #4
 80013aa:	1ac0      	subs	r0, r0, r3
 80013ac:	4152      	adcs	r2, r2
 80013ae:	08c3      	lsrs	r3, r0, #3
 80013b0:	428b      	cmp	r3, r1
 80013b2:	d301      	bcc.n	80013b8 <__udivsi3+0xd8>
 80013b4:	00cb      	lsls	r3, r1, #3
 80013b6:	1ac0      	subs	r0, r0, r3
 80013b8:	4152      	adcs	r2, r2
 80013ba:	0883      	lsrs	r3, r0, #2
 80013bc:	428b      	cmp	r3, r1
 80013be:	d301      	bcc.n	80013c4 <__udivsi3+0xe4>
 80013c0:	008b      	lsls	r3, r1, #2
 80013c2:	1ac0      	subs	r0, r0, r3
 80013c4:	4152      	adcs	r2, r2
 80013c6:	0843      	lsrs	r3, r0, #1
 80013c8:	428b      	cmp	r3, r1
 80013ca:	d301      	bcc.n	80013d0 <__udivsi3+0xf0>
 80013cc:	004b      	lsls	r3, r1, #1
 80013ce:	1ac0      	subs	r0, r0, r3
 80013d0:	4152      	adcs	r2, r2
 80013d2:	1a41      	subs	r1, r0, r1
 80013d4:	d200      	bcs.n	80013d8 <__udivsi3+0xf8>
 80013d6:	4601      	mov	r1, r0
 80013d8:	4152      	adcs	r2, r2
 80013da:	4610      	mov	r0, r2
 80013dc:	4770      	bx	lr
 80013de:	e7ff      	b.n	80013e0 <__udivsi3+0x100>
 80013e0:	b501      	push	{r0, lr}
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f806 	bl	80013f4 <__aeabi_idiv0>
			80013e4: R_ARM_THM_CALL	__aeabi_idiv0
 80013e8:	bd02      	pop	{r1, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)

080013ec <__aeabi_uidivmod>:
 80013ec:	2900      	cmp	r1, #0
 80013ee:	d0f7      	beq.n	80013e0 <__udivsi3+0x100>
 80013f0:	e776      	b.n	80012e0 <__udivsi3>
 80013f2:	4770      	bx	lr

080013f4 <__aeabi_idiv0>:
 80013f4:	4770      	bx	lr
 80013f6:	46c0      	nop			; (mov r8, r8)
