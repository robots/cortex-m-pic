
FLASH_RUN/stm32g0_disco/stm32g0_disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vectors  000000bc  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008f0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080009b0  080009b0  000109b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000018  20000000  08000a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .tbss_space   00000000  20000018  20000018  00020018  2**0
                  CONTENTS
  5 .bss          00000000  20000018  20000018  00000000  2**0
                  ALLOC
  6 .heap         00000000  20000018  20000018  00020018  2**0
                  CONTENTS
  7 .stack        00001000  20000018  20000018  00020018  2**0
                  ALLOC
  8 .comment      00000079  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .ARM.attributes 0000002e  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000001d0  00000000  00000000  000200c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000031fc  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000fe3  00000000  00000000  0002348c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001a2e  00000000  00000000  0002446f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000027c  00000000  00000000  00025ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000d8b  00000000  00000000  0002611c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000012d3  00000000  00000000  00026ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000160  00000000  00000000  0002817a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <main>:
#define APP_OFFSET  ((uint32_t)0x00002000)

typedef  void (*pFunction)(void);

int main(void)
{
 80000c0:	b580      	push	{r7, lr}
 80000c2:	b084      	sub	sp, #16
 80000c4:	af00      	add	r7, sp, #0
	SystemInit();
 80000c6:	f000 f86d 	bl	80001a4 <SystemInit>
	SystemCoreClockUpdate();
 80000ca:	f000 f877 	bl	80001bc <SystemCoreClockUpdate>

//	initialise_monitor_handles();

	RCC->IOPENR |= 0x2f;
 80000ce:	4b1d      	ldr	r3, [pc, #116]	; (8000144 <main+0x84>)
 80000d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80000d2:	4b1c      	ldr	r3, [pc, #112]	; (8000144 <main+0x84>)
 80000d4:	212f      	movs	r1, #47	; 0x2f
 80000d6:	430a      	orrs	r2, r1
 80000d8:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->APBENR2 |= RCC_APBENR2_SYSCFGEN;
 80000da:	4b1a      	ldr	r3, [pc, #104]	; (8000144 <main+0x84>)
 80000dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80000de:	4b19      	ldr	r3, [pc, #100]	; (8000144 <main+0x84>)
 80000e0:	2101      	movs	r1, #1
 80000e2:	430a      	orrs	r2, r1
 80000e4:	641a      	str	r2, [r3, #64]	; 0x40
//	printf("Ahoj\n");

	uint32_t stak;

	/* Check if valid stack address (RAM address) then jump to user application */
	stak = *(volatile uint32_t*)(FLASH_ORIGIN+APP_OFFSET);
 80000e6:	4b18      	ldr	r3, [pc, #96]	; (8000148 <main+0x88>)
 80000e8:	681b      	ldr	r3, [r3, #0]
 80000ea:	60fb      	str	r3, [r7, #12]

	printf("Stack: %08lx\n", stak);
 80000ec:	68fa      	ldr	r2, [r7, #12]
 80000ee:	4b17      	ldr	r3, [pc, #92]	; (800014c <main+0x8c>)
 80000f0:	0011      	movs	r1, r2
 80000f2:	0018      	movs	r0, r3
 80000f4:	f000 f934 	bl	8000360 <printf>

	if ((stak & 0x2FFE0000 ) == 0x20000000) {
 80000f8:	68fb      	ldr	r3, [r7, #12]
 80000fa:	4a15      	ldr	r2, [pc, #84]	; (8000150 <main+0x90>)
 80000fc:	401a      	ands	r2, r3
 80000fe:	2380      	movs	r3, #128	; 0x80
 8000100:	059b      	lsls	r3, r3, #22
 8000102:	429a      	cmp	r2, r3
 8000104:	d118      	bne.n	8000138 <main+0x78>
		uint32_t JumpAddress = *(volatile uint32_t*) (FLASH_ORIGIN+APP_OFFSET + 4);
 8000106:	4b13      	ldr	r3, [pc, #76]	; (8000154 <main+0x94>)
 8000108:	681b      	ldr	r3, [r3, #0]
 800010a:	60bb      	str	r3, [r7, #8]

	//	printf("Stack is valid\n");
	//	printf("Entry point is: %08lx\n", JumpAddress);
	//	printf("Offset is %08lx\n", APP_OFFSET);

		JumpAddress += APP_OFFSET;
 800010c:	68bb      	ldr	r3, [r7, #8]
 800010e:	2280      	movs	r2, #128	; 0x80
 8000110:	0192      	lsls	r2, r2, #6
 8000112:	4694      	mov	ip, r2
 8000114:	4463      	add	r3, ip
 8000116:	60bb      	str	r3, [r7, #8]

		printf("New entry point: %08lx\n", JumpAddress);
 8000118:	68ba      	ldr	r2, [r7, #8]
 800011a:	4b0f      	ldr	r3, [pc, #60]	; (8000158 <main+0x98>)
 800011c:	0011      	movs	r1, r2
 800011e:	0018      	movs	r0, r3
 8000120:	f000 f91e 	bl	8000360 <printf>

		/* Jump to user application */
		pFunction Jump_To_Application = (pFunction) JumpAddress;
 8000124:	68bb      	ldr	r3, [r7, #8]
 8000126:	607b      	str	r3, [r7, #4]
 8000128:	68fb      	ldr	r3, [r7, #12]
 800012a:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800012c:	683b      	ldr	r3, [r7, #0]
 800012e:	f383 8808 	msr	MSP, r3
}
 8000132:	46c0      	nop			; (mov r8, r8)

		/* Initialize user application's Stack Pointer */
		__set_MSP(stak);

		Jump_To_Application();
 8000134:	687b      	ldr	r3, [r7, #4]
 8000136:	4798      	blx	r3
	}

	printf("Stack is not valid\n");
 8000138:	4b08      	ldr	r3, [pc, #32]	; (800015c <main+0x9c>)
 800013a:	0018      	movs	r0, r3
 800013c:	f000 f920 	bl	8000380 <puts>

	while (1) {
 8000140:	e7fe      	b.n	8000140 <main+0x80>
 8000142:	46c0      	nop			; (mov r8, r8)
 8000144:	40021000 	.word	0x40021000
 8000148:	08002000 	.word	0x08002000
 800014c:	080009b0 	.word	0x080009b0
 8000150:	2ffe0000 	.word	0x2ffe0000
 8000154:	08002004 	.word	0x08002004
 8000158:	080009c0 	.word	0x080009c0
 800015c:	080009d8 	.word	0x080009d8

08000160 <Reset_Handler>:
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	memcpy(__data_start, __data_source, (uintptr_t) __data_size);
 8000164:	4a08      	ldr	r2, [pc, #32]	; (8000188 <Reset_Handler+0x28>)
 8000166:	4909      	ldr	r1, [pc, #36]	; (800018c <Reset_Handler+0x2c>)
 8000168:	4b09      	ldr	r3, [pc, #36]	; (8000190 <Reset_Handler+0x30>)
 800016a:	0018      	movs	r0, r3
 800016c:	f000 f8bc 	bl	80002e8 <memcpy>
	memset(__bss_start, '\0', (uintptr_t) __bss_size);
 8000170:	4a08      	ldr	r2, [pc, #32]	; (8000194 <Reset_Handler+0x34>)
 8000172:	4b09      	ldr	r3, [pc, #36]	; (8000198 <Reset_Handler+0x38>)
 8000174:	2100      	movs	r1, #0
 8000176:	0018      	movs	r0, r3
 8000178:	f000 f8bf 	bl	80002fa <memset>

#ifdef PICOLIBC_TLS
	_set_tls(__tls_base);
#endif

	__libc_init_array();
 800017c:	f000 f8c6 	bl	800030c <__libc_init_array>

  /* Call the application's entry point.*/
  main();
 8000180:	f7ff ff9e 	bl	80000c0 <main>

  while(1) { ; }
 8000184:	e7fe      	b.n	8000184 <Reset_Handler+0x24>
 8000186:	46c0      	nop			; (mov r8, r8)
 8000188:	00000018 	.word	0x00000018
 800018c:	08000a60 	.word	0x08000a60
 8000190:	20000000 	.word	0x20000000
 8000194:	00000000 	.word	0x00000000
 8000198:	20000018 	.word	0x20000018

0800019c <Default_Handler>:
 * @param  None
 * @retval : None
*/

void Default_Handler(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
  /* Go into an infinite loop. */
  while (1)
 80001a0:	e7fe      	b.n	80001a0 <Default_Handler+0x4>
	...

080001a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80001a8:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <SystemInit+0x14>)
 80001aa:	2280      	movs	r2, #128	; 0x80
 80001ac:	0512      	lsls	r2, r2, #20
 80001ae:	609a      	str	r2, [r3, #8]
#endif
}
 80001b0:	46c0      	nop			; (mov r8, r8)
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	46c0      	nop			; (mov r8, r8)
 80001b8:	e000ed00 	.word	0xe000ed00

080001bc <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b086      	sub	sp, #24
 80001c0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80001c2:	4b42      	ldr	r3, [pc, #264]	; (80002cc <SystemCoreClockUpdate+0x110>)
 80001c4:	689b      	ldr	r3, [r3, #8]
 80001c6:	2238      	movs	r2, #56	; 0x38
 80001c8:	4013      	ands	r3, r2
 80001ca:	2b20      	cmp	r3, #32
 80001cc:	d011      	beq.n	80001f2 <SystemCoreClockUpdate+0x36>
 80001ce:	d849      	bhi.n	8000264 <SystemCoreClockUpdate+0xa8>
 80001d0:	2b18      	cmp	r3, #24
 80001d2:	d009      	beq.n	80001e8 <SystemCoreClockUpdate+0x2c>
 80001d4:	d846      	bhi.n	8000264 <SystemCoreClockUpdate+0xa8>
 80001d6:	2b08      	cmp	r3, #8
 80001d8:	d002      	beq.n	80001e0 <SystemCoreClockUpdate+0x24>
 80001da:	2b10      	cmp	r3, #16
 80001dc:	d00e      	beq.n	80001fc <SystemCoreClockUpdate+0x40>
 80001de:	e041      	b.n	8000264 <SystemCoreClockUpdate+0xa8>
  {
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80001e0:	4b3b      	ldr	r3, [pc, #236]	; (80002d0 <SystemCoreClockUpdate+0x114>)
 80001e2:	4a3c      	ldr	r2, [pc, #240]	; (80002d4 <SystemCoreClockUpdate+0x118>)
 80001e4:	601a      	str	r2, [r3, #0]
      break;
 80001e6:	e04f      	b.n	8000288 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_LSI:  /* LSI used as system clock */
      SystemCoreClock = LSI_VALUE;
 80001e8:	4b39      	ldr	r3, [pc, #228]	; (80002d0 <SystemCoreClockUpdate+0x114>)
 80001ea:	22fa      	movs	r2, #250	; 0xfa
 80001ec:	01d2      	lsls	r2, r2, #7
 80001ee:	601a      	str	r2, [r3, #0]
      break;
 80001f0:	e04a      	b.n	8000288 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_LSE:  /* LSE used as system clock */
      SystemCoreClock = LSE_VALUE;
 80001f2:	4b37      	ldr	r3, [pc, #220]	; (80002d0 <SystemCoreClockUpdate+0x114>)
 80001f4:	2280      	movs	r2, #128	; 0x80
 80001f6:	0212      	lsls	r2, r2, #8
 80001f8:	601a      	str	r2, [r3, #0]
      break;
 80001fa:	e045      	b.n	8000288 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80001fc:	4b33      	ldr	r3, [pc, #204]	; (80002cc <SystemCoreClockUpdate+0x110>)
 80001fe:	68db      	ldr	r3, [r3, #12]
 8000200:	2203      	movs	r2, #3
 8000202:	4013      	ands	r3, r2
 8000204:	613b      	str	r3, [r7, #16]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL;
 8000206:	4b31      	ldr	r3, [pc, #196]	; (80002cc <SystemCoreClockUpdate+0x110>)
 8000208:	68db      	ldr	r3, [r3, #12]
 800020a:	091b      	lsrs	r3, r3, #4
 800020c:	2207      	movs	r2, #7
 800020e:	4013      	ands	r3, r2
 8000210:	3301      	adds	r3, #1
 8000212:	60fb      	str	r3, [r7, #12]

      if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	2b03      	cmp	r3, #3
 8000218:	d106      	bne.n	8000228 <SystemCoreClockUpdate+0x6c>
      {
        pllvco = (HSE_VALUE / pllm);
 800021a:	68f9      	ldr	r1, [r7, #12]
 800021c:	482d      	ldr	r0, [pc, #180]	; (80002d4 <SystemCoreClockUpdate+0x118>)
 800021e:	f000 fb3b 	bl	8000898 <__udivsi3>
 8000222:	0003      	movs	r3, r0
 8000224:	617b      	str	r3, [r7, #20]
 8000226:	e005      	b.n	8000234 <SystemCoreClockUpdate+0x78>
      }
      else /* HSI used as PLL clock source */
      {
          pllvco = (HSI_VALUE / pllm);
 8000228:	68f9      	ldr	r1, [r7, #12]
 800022a:	482b      	ldr	r0, [pc, #172]	; (80002d8 <SystemCoreClockUpdate+0x11c>)
 800022c:	f000 fb34 	bl	8000898 <__udivsi3>
 8000230:	0003      	movs	r3, r0
 8000232:	617b      	str	r3, [r7, #20]
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000234:	4b25      	ldr	r3, [pc, #148]	; (80002cc <SystemCoreClockUpdate+0x110>)
 8000236:	68db      	ldr	r3, [r3, #12]
 8000238:	0a1b      	lsrs	r3, r3, #8
 800023a:	227f      	movs	r2, #127	; 0x7f
 800023c:	401a      	ands	r2, r3
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	4353      	muls	r3, r2
 8000242:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000244:	4b21      	ldr	r3, [pc, #132]	; (80002cc <SystemCoreClockUpdate+0x110>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	0f5b      	lsrs	r3, r3, #29
 800024a:	2207      	movs	r2, #7
 800024c:	4013      	ands	r3, r2
 800024e:	3301      	adds	r3, #1
 8000250:	60bb      	str	r3, [r7, #8]

      SystemCoreClock = pllvco/pllr;
 8000252:	68b9      	ldr	r1, [r7, #8]
 8000254:	6978      	ldr	r0, [r7, #20]
 8000256:	f000 fb1f 	bl	8000898 <__udivsi3>
 800025a:	0003      	movs	r3, r0
 800025c:	001a      	movs	r2, r3
 800025e:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <SystemCoreClockUpdate+0x114>)
 8000260:	601a      	str	r2, [r3, #0]
      break;
 8000262:	e011      	b.n	8000288 <SystemCoreClockUpdate+0xcc>
      
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
    default:                /* HSI used as system clock */
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV))>> RCC_CR_HSIDIV_Pos));
 8000264:	4b19      	ldr	r3, [pc, #100]	; (80002cc <SystemCoreClockUpdate+0x110>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	0adb      	lsrs	r3, r3, #11
 800026a:	2207      	movs	r2, #7
 800026c:	4013      	ands	r3, r2
 800026e:	2201      	movs	r2, #1
 8000270:	409a      	lsls	r2, r3
 8000272:	0013      	movs	r3, r2
 8000274:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (HSI_VALUE/hsidiv);
 8000276:	6879      	ldr	r1, [r7, #4]
 8000278:	4817      	ldr	r0, [pc, #92]	; (80002d8 <SystemCoreClockUpdate+0x11c>)
 800027a:	f000 fb0d 	bl	8000898 <__udivsi3>
 800027e:	0003      	movs	r3, r0
 8000280:	001a      	movs	r2, r3
 8000282:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <SystemCoreClockUpdate+0x114>)
 8000284:	601a      	str	r2, [r3, #0]
      break;
 8000286:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <SystemCoreClockUpdate+0x110>)
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	0a1b      	lsrs	r3, r3, #8
 800028e:	220f      	movs	r2, #15
 8000290:	401a      	ands	r2, r3
 8000292:	4b12      	ldr	r3, [pc, #72]	; (80002dc <SystemCoreClockUpdate+0x120>)
 8000294:	0092      	lsls	r2, r2, #2
 8000296:	58d3      	ldr	r3, [r2, r3]
 8000298:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800029a:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <SystemCoreClockUpdate+0x114>)
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	40da      	lsrs	r2, r3
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <SystemCoreClockUpdate+0x114>)
 80002a4:	601a      	str	r2, [r3, #0]

  tmp = APBPrescTable[((RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos)];
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <SystemCoreClockUpdate+0x110>)
 80002a8:	689b      	ldr	r3, [r3, #8]
 80002aa:	0b1b      	lsrs	r3, r3, #12
 80002ac:	2207      	movs	r2, #7
 80002ae:	401a      	ands	r2, r3
 80002b0:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <SystemCoreClockUpdate+0x124>)
 80002b2:	0092      	lsls	r2, r2, #2
 80002b4:	58d3      	ldr	r3, [r2, r3]
 80002b6:	603b      	str	r3, [r7, #0]
  SystemAPBClock >>= tmp;
 80002b8:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <SystemCoreClockUpdate+0x128>)
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	40da      	lsrs	r2, r3
 80002c0:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <SystemCoreClockUpdate+0x128>)
 80002c2:	601a      	str	r2, [r3, #0]
}
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	b006      	add	sp, #24
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40021000 	.word	0x40021000
 80002d0:	20000000 	.word	0x20000000
 80002d4:	007a1200 	.word	0x007a1200
 80002d8:	00f42400 	.word	0x00f42400
 80002dc:	080009ec 	.word	0x080009ec
 80002e0:	08000a2c 	.word	0x08000a2c
 80002e4:	20000004 	.word	0x20000004

080002e8 <memcpy>:
  char *dst = (char *) dst0;
  char *src = (char *) src0;

  void *save = dst0;

  while (len0--)
 80002e8:	2300      	movs	r3, #0
{
 80002ea:	b510      	push	{r4, lr}
  while (len0--)
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d100      	bne.n	80002f2 <memcpy+0xa>
  while (len0--)
    *dst++ = *src++;

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 80002f0:	bd10      	pop	{r4, pc}
      *dst++ = *src++;
 80002f2:	5ccc      	ldrb	r4, [r1, r3]
 80002f4:	54c4      	strb	r4, [r0, r3]
 80002f6:	3301      	adds	r3, #1
 80002f8:	e7f8      	b.n	80002ec <memcpy+0x4>

080002fa <memset>:
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 80002fa:	0003      	movs	r3, r0
 80002fc:	1882      	adds	r2, r0, r2
 80002fe:	4293      	cmp	r3, r2
 8000300:	d100      	bne.n	8000304 <memset+0xa>
    *s++ = (char) c;

  return m;
}
 8000302:	4770      	bx	lr
    *s++ = (char) c;
 8000304:	7019      	strb	r1, [r3, #0]
 8000306:	3301      	adds	r3, #1
 8000308:	e7f9      	b.n	80002fe <memset+0x4>
	...

0800030c <__libc_init_array>:
#endif

/* Iterate over all the init routines.  */
void
__libc_init_array (void)
{
 800030c:	b570      	push	{r4, r5, r6, lr}
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
 800030e:	2600      	movs	r6, #0
  count = __preinit_array_end - __preinit_array_start;
 8000310:	4d0e      	ldr	r5, [pc, #56]	; (800034c <__libc_init_array+0x40>)
 8000312:	4c0f      	ldr	r4, [pc, #60]	; (8000350 <__libc_init_array+0x44>)
 8000314:	1b64      	subs	r4, r4, r5
 8000316:	10a4      	asrs	r4, r4, #2
  for (i = 0; i < count; i++)
 8000318:	42a6      	cmp	r6, r4
 800031a:	d10c      	bne.n	8000336 <__libc_init_array+0x2a>
    __preinit_array_start[i] ();

#ifdef _HAVE_INIT_FINI
  if (_init)
 800031c:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <__libc_init_array+0x48>)
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <__libc_init_array+0x1a>
    _init ();
 8000322:	e000      	b.n	8000326 <__libc_init_array+0x1a>
 8000324:	bf00      	nop
#endif

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
 8000326:	2600      	movs	r6, #0
  count = __init_array_end - __init_array_start;
 8000328:	4d0b      	ldr	r5, [pc, #44]	; (8000358 <__libc_init_array+0x4c>)
 800032a:	4c0c      	ldr	r4, [pc, #48]	; (800035c <__libc_init_array+0x50>)
 800032c:	1b64      	subs	r4, r4, r5
 800032e:	10a4      	asrs	r4, r4, #2
  for (i = 0; i < count; i++)
 8000330:	42a6      	cmp	r6, r4
 8000332:	d105      	bne.n	8000340 <__libc_init_array+0x34>
    __init_array_start[i] ();
}
 8000334:	bd70      	pop	{r4, r5, r6, pc}
    __preinit_array_start[i] ();
 8000336:	00b3      	lsls	r3, r6, #2
 8000338:	58eb      	ldr	r3, [r5, r3]
 800033a:	4798      	blx	r3
  for (i = 0; i < count; i++)
 800033c:	3601      	adds	r6, #1
 800033e:	e7eb      	b.n	8000318 <__libc_init_array+0xc>
    __init_array_start[i] ();
 8000340:	00b3      	lsls	r3, r6, #2
 8000342:	58eb      	ldr	r3, [r5, r3]
 8000344:	4798      	blx	r3
  for (i = 0; i < count; i++)
 8000346:	3601      	adds	r6, #1
 8000348:	e7f2      	b.n	8000330 <__libc_init_array+0x24>
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	080009b0 	.word	0x080009b0
 8000350:	080009b0 	.word	0x080009b0
 8000354:	00000000 	.word	0x00000000
 8000358:	080009b0 	.word	0x080009b0
 800035c:	080009b0 	.word	0x080009b0

08000360 <printf>:
#include <stdarg.h>
#include <stdio.h>

int
printf(const char *fmt, ...)
{
 8000360:	b40f      	push	{r0, r1, r2, r3}
 8000362:	b507      	push	{r0, r1, r2, lr}
	va_list ap;
	int i;

	va_start(ap, fmt);
	i = vfprintf(stdout, fmt, ap);
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <printf+0x1c>)
{
 8000366:	aa04      	add	r2, sp, #16
 8000368:	ca02      	ldmia	r2!, {r1}
	i = vfprintf(stdout, fmt, ap);
 800036a:	6818      	ldr	r0, [r3, #0]
	va_start(ap, fmt);
 800036c:	9201      	str	r2, [sp, #4]
	i = vfprintf(stdout, fmt, ap);
 800036e:	f000 f843 	bl	80003f8 <__i_vfprintf>
	va_end(ap);

	return i;
}
 8000372:	b003      	add	sp, #12
 8000374:	bc08      	pop	{r3}
 8000376:	b004      	add	sp, #16
 8000378:	4718      	bx	r3
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	08000a5c 	.word	0x08000a5c

08000380 <puts>:
#include <stdio.h>
#include "stdio_private.h"

int
puts(const char *str)
{
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char c;
	int rv = 0;

	if ((stdout->flags & __SWR) == 0)
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <puts+0x3c>)
{
 8000384:	0004      	movs	r4, r0
	if ((stdout->flags & __SWR) == 0)
 8000386:	681e      	ldr	r6, [r3, #0]
 8000388:	78b3      	ldrb	r3, [r6, #2]
 800038a:	079b      	lsls	r3, r3, #30
 800038c:	d50b      	bpl.n	80003a6 <puts+0x26>
		return EOF;

	while ((c = *str++) != '\0')
		if (stdout->put(c, stdout) < 0)
			rv = EOF;
 800038e:	2701      	movs	r7, #1
	int rv = 0;
 8000390:	2500      	movs	r5, #0
			rv = EOF;
 8000392:	427f      	negs	r7, r7
	while ((c = *str++) != '\0')
 8000394:	7820      	ldrb	r0, [r4, #0]
		if (stdout->put(c, stdout) < 0)
 8000396:	0031      	movs	r1, r6
 8000398:	6873      	ldr	r3, [r6, #4]
	while ((c = *str++) != '\0')
 800039a:	2800      	cmp	r0, #0
 800039c:	d107      	bne.n	80003ae <puts+0x2e>
	if (stdout->put('\n', stdout) < 0)
 800039e:	300a      	adds	r0, #10
 80003a0:	4798      	blx	r3
 80003a2:	2800      	cmp	r0, #0
 80003a4:	da01      	bge.n	80003aa <puts+0x2a>
		return EOF;
 80003a6:	2501      	movs	r5, #1
 80003a8:	426d      	negs	r5, r5
		rv = EOF;

	return rv;
}
 80003aa:	0028      	movs	r0, r5
 80003ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (stdout->put(c, stdout) < 0)
 80003ae:	4798      	blx	r3
 80003b0:	2800      	cmp	r0, #0
 80003b2:	da00      	bge.n	80003b6 <puts+0x36>
			rv = EOF;
 80003b4:	003d      	movs	r5, r7
 80003b6:	3401      	adds	r4, #1
 80003b8:	e7ec      	b.n	8000394 <puts+0x14>
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	08000a5c 	.word	0x08000a5c

080003c0 <__ultoa_invert>:
#endif
#endif

static __noinline char *
__ultoa_invert(ultoa_unsigned_t val, char *str, int base)
{
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char hex = ('a' - '0' - 10 + 16) - base;
 80003c2:	2637      	movs	r6, #55	; 0x37
{
 80003c4:	0014      	movs	r4, r2
	char hex = ('a' - '0' - 10 + 16) - base;
 80003c6:	1ab6      	subs	r6, r6, r2

        base &= 31;
 80003c8:	221f      	movs	r2, #31
{
 80003ca:	0007      	movs	r7, r0
 80003cc:	000d      	movs	r5, r1
	char hex = ('a' - '0' - 10 + 16) - base;
 80003ce:	b2f6      	uxtb	r6, r6
        base &= 31;
 80003d0:	4014      	ands	r4, r2
		char	v;

#ifdef FANCY_DIVMOD
                val = udivmod(val, base, &v);
#else
                v = val % base;
 80003d2:	0038      	movs	r0, r7
 80003d4:	0021      	movs	r1, r4
 80003d6:	f000 fae5 	bl	80009a4 <__aeabi_uidivmod>
 80003da:	003a      	movs	r2, r7
 80003dc:	b2cb      	uxtb	r3, r1
                val /= base;
 80003de:	0007      	movs	r7, r0
#endif
		if (v > 9)
 80003e0:	2909      	cmp	r1, #9
 80003e2:	d901      	bls.n	80003e8 <__ultoa_invert+0x28>
                        v += hex;
 80003e4:	18f3      	adds	r3, r6, r3
 80003e6:	b2db      	uxtb	r3, r3
                v += '0';
 80003e8:	3330      	adds	r3, #48	; 0x30
 80003ea:	1c68      	adds	r0, r5, #1
		*str++ = v;
 80003ec:	702b      	strb	r3, [r5, #0]
	} while (val);
 80003ee:	4294      	cmp	r4, r2
 80003f0:	d900      	bls.n	80003f4 <__ultoa_invert+0x34>
	return str;
}
 80003f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003f4:	0005      	movs	r5, r0
 80003f6:	e7ec      	b.n	80003d2 <__ultoa_invert+0x12>

080003f8 <__i_vfprintf>:
    }
}
#endif

int vfprintf (FILE * stream, const CHAR *fmt, va_list ap_orig)
{
 80003f8:	b5f0      	push	{r4, r5, r6, r7, lr}
#define dtoa	(u.__dtoa)

    int stream_len = 0;

#ifndef my_putc
    int (*put)(char, FILE *) = stream->put;
 80003fa:	6843      	ldr	r3, [r0, #4]
{
 80003fc:	b08f      	sub	sp, #60	; 0x3c
 80003fe:	9003      	str	r0, [sp, #12]
 8000400:	9201      	str	r2, [sp, #4]
    int (*put)(char, FILE *) = stream->put;
 8000402:	9306      	str	r3, [sp, #24]
#define my_putc(c, stream) do { ++stream_len; if (put(c, stream) < 0) goto fail; } while(0)
#endif

    if ((stream->flags & __SWR) == 0)
 8000404:	7883      	ldrb	r3, [r0, #2]
    int stream_len = 0;
 8000406:	2700      	movs	r7, #0
    if ((stream->flags & __SWR) == 0)
 8000408:	079b      	lsls	r3, r3, #30
 800040a:	d500      	bpl.n	800040e <__i_vfprintf+0x16>
 800040c:	e20b      	b.n	8000826 <__i_vfprintf+0x42e>
	return EOF;
 800040e:	2701      	movs	r7, #1
 8000410:	427f      	negs	r7, r7
 8000412:	e057      	b.n	80004c4 <__i_vfprintf+0xcc>

	for (;;) {
	    c = *fmt++;
	    if (!c) goto ret;
	    if (c == '%') {
		c = *fmt++;
 8000414:	784e      	ldrb	r6, [r1, #1]
 8000416:	1c8b      	adds	r3, r1, #2
 8000418:	9307      	str	r3, [sp, #28]
		if (c != '%') break;
 800041a:	2e25      	cmp	r6, #37	; 0x25
 800041c:	d100      	bne.n	8000420 <__i_vfprintf+0x28>
 800041e:	e20b      	b.n	8000838 <__i_vfprintf+0x440>
	    my_putc (c, stream);
	}

	flags = 0;
	width = 0;
	prec = 0;
 8000420:	2200      	movs	r2, #0
	flags = 0;
 8000422:	0015      	movs	r5, r2
 8000424:	9b07      	ldr	r3, [sp, #28]
	prec = 0;
 8000426:	9202      	str	r2, [sp, #8]
	width = 0;
 8000428:	9204      	str	r2, [sp, #16]
 800042a:	9307      	str	r3, [sp, #28]
#ifdef _NEED_IO_POS_ARGS
        argno = 0;
#endif

	do {
	    if (flags < FL_WIDTH) {
 800042c:	2d1f      	cmp	r5, #31
 800042e:	d819      	bhi.n	8000464 <__i_vfprintf+0x6c>
		switch (c) {
 8000430:	0030      	movs	r0, r6
 8000432:	3820      	subs	r0, #32
 8000434:	2810      	cmp	r0, #16
 8000436:	d817      	bhi.n	8000468 <__i_vfprintf+0x70>
 8000438:	f000 fa24 	bl	8000884 <__gnu_thumb1_case_uqi>
 800043c:	1216160e 	.word	0x1216160e
 8000440:	34161616 	.word	0x34161616
 8000444:	0c161616 	.word	0x0c161616
 8000448:	16161016 	.word	0x16161016
 800044c:	09          	.byte	0x09
 800044d:	00          	.byte	0x00
		  case '0':
		    flags |= FL_ZFILL;
 800044e:	2201      	movs	r2, #1
                    continue;
                }
#endif
	    }

            CHECK_INT_SIZES(c, flags);
 8000450:	4315      	orrs	r5, r2
 8000452:	e027      	b.n	80004a4 <__i_vfprintf+0xac>
		    flags |= FL_PLUS;
 8000454:	2202      	movs	r2, #2
 8000456:	4315      	orrs	r5, r2
		    flags |= FL_SPACE;
 8000458:	2204      	movs	r2, #4
 800045a:	e7f9      	b.n	8000450 <__i_vfprintf+0x58>
		    flags |= FL_LPAD;
 800045c:	2208      	movs	r2, #8
 800045e:	e7f7      	b.n	8000450 <__i_vfprintf+0x58>
		    flags |= FL_ALT;
 8000460:	2210      	movs	r2, #16
 8000462:	e7f5      	b.n	8000450 <__i_vfprintf+0x58>
	    if (flags < FL_LONG) {
 8000464:	2d7f      	cmp	r5, #127	; 0x7f
 8000466:	d830      	bhi.n	80004ca <__i_vfprintf+0xd2>
		if (c >= '0' && c <= '9') {
 8000468:	0032      	movs	r2, r6
 800046a:	3a30      	subs	r2, #48	; 0x30
 800046c:	2a09      	cmp	r2, #9
 800046e:	d80d      	bhi.n	800048c <__i_vfprintf+0x94>
		    if (flags & FL_PREC) {
 8000470:	240a      	movs	r4, #10
 8000472:	0669      	lsls	r1, r5, #25
 8000474:	d504      	bpl.n	8000480 <__i_vfprintf+0x88>
			prec = 10*prec + c;
 8000476:	9902      	ldr	r1, [sp, #8]
 8000478:	434c      	muls	r4, r1
 800047a:	18a2      	adds	r2, r4, r2
 800047c:	9202      	str	r2, [sp, #8]
 800047e:	e011      	b.n	80004a4 <__i_vfprintf+0xac>
		    width = 10*width + c;
 8000480:	9904      	ldr	r1, [sp, #16]
 8000482:	434c      	muls	r4, r1
 8000484:	18a2      	adds	r2, r4, r2
 8000486:	9204      	str	r2, [sp, #16]
		    flags |= FL_WIDTH;
 8000488:	2220      	movs	r2, #32
 800048a:	e7e1      	b.n	8000450 <__i_vfprintf+0x58>
		if (c == '*') {
 800048c:	2e2a      	cmp	r6, #42	; 0x2a
 800048e:	d114      	bne.n	80004ba <__i_vfprintf+0xc2>
		    if (flags & FL_PREC) {
 8000490:	9901      	ldr	r1, [sp, #4]
 8000492:	c904      	ldmia	r1!, {r2}
 8000494:	9101      	str	r1, [sp, #4]
 8000496:	0669      	lsls	r1, r5, #25
 8000498:	d4f0      	bmi.n	800047c <__i_vfprintf+0x84>
			if (width < 0) {
 800049a:	2a00      	cmp	r2, #0
 800049c:	db09      	blt.n	80004b2 <__i_vfprintf+0xba>
			flags |= FL_WIDTH;
 800049e:	2120      	movs	r1, #32
 80004a0:	9204      	str	r2, [sp, #16]
 80004a2:	430d      	orrs	r5, r1

	    break;
	} while ( (c = *fmt++) != 0);
 80004a4:	9a07      	ldr	r2, [sp, #28]
 80004a6:	3301      	adds	r3, #1
 80004a8:	7816      	ldrb	r6, [r2, #0]
 80004aa:	2e00      	cmp	r6, #0
 80004ac:	d1bd      	bne.n	800042a <__i_vfprintf+0x32>
 80004ae:	9307      	str	r3, [sp, #28]
 80004b0:	e02b      	b.n	800050a <__i_vfprintf+0x112>
			    width = -width;
 80004b2:	4252      	negs	r2, r2
 80004b4:	9204      	str	r2, [sp, #16]
			    flags |= FL_LPAD;
 80004b6:	2228      	movs	r2, #40	; 0x28
 80004b8:	e7ca      	b.n	8000450 <__i_vfprintf+0x58>
		if (c == '.') {
 80004ba:	2e2e      	cmp	r6, #46	; 0x2e
 80004bc:	d105      	bne.n	80004ca <__i_vfprintf+0xd2>
		    if (flags & FL_PREC)
 80004be:	2240      	movs	r2, #64	; 0x40
 80004c0:	4215      	tst	r5, r2
 80004c2:	d0c5      	beq.n	8000450 <__i_vfprintf+0x58>
#undef my_putc
#undef ap
  fail:
    stream_len = -1;
    goto ret;
}
 80004c4:	0038      	movs	r0, r7
 80004c6:	b00f      	add	sp, #60	; 0x3c
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            CHECK_INT_SIZES(c, flags);
 80004ca:	2e6c      	cmp	r6, #108	; 0x6c
 80004cc:	d107      	bne.n	80004de <__i_vfprintf+0xe6>
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	4215      	tst	r5, r2
 80004d2:	d002      	beq.n	80004da <__i_vfprintf+0xe2>
 80004d4:	3281      	adds	r2, #129	; 0x81
 80004d6:	32ff      	adds	r2, #255	; 0xff
 80004d8:	4315      	orrs	r5, r2
 80004da:	2280      	movs	r2, #128	; 0x80
 80004dc:	e7b8      	b.n	8000450 <__i_vfprintf+0x58>
 80004de:	2e68      	cmp	r6, #104	; 0x68
 80004e0:	d108      	bne.n	80004f4 <__i_vfprintf+0xfc>
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	0052      	lsls	r2, r2, #1
 80004e6:	4215      	tst	r5, r2
 80004e8:	d001      	beq.n	80004ee <__i_vfprintf+0xf6>
 80004ea:	1892      	adds	r2, r2, r2
 80004ec:	4315      	orrs	r5, r2
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	0052      	lsls	r2, r2, #1
 80004f2:	e7ad      	b.n	8000450 <__i_vfprintf+0x58>
 80004f4:	2e4c      	cmp	r6, #76	; 0x4c
 80004f6:	d102      	bne.n	80004fe <__i_vfprintf+0x106>
 80004f8:	22a0      	movs	r2, #160	; 0xa0
 80004fa:	0092      	lsls	r2, r2, #2
 80004fc:	e7a8      	b.n	8000450 <__i_vfprintf+0x58>
 80004fe:	2e6a      	cmp	r6, #106	; 0x6a
 8000500:	d0fa      	beq.n	80004f8 <__i_vfprintf+0x100>
 8000502:	2e7a      	cmp	r6, #122	; 0x7a
 8000504:	d0ce      	beq.n	80004a4 <__i_vfprintf+0xac>
 8000506:	2e74      	cmp	r6, #116	; 0x74
 8000508:	d0cc      	beq.n	80004a4 <__i_vfprintf+0xac>
	if (prec < 0) {
 800050a:	9b02      	ldr	r3, [sp, #8]
 800050c:	2b00      	cmp	r3, #0
 800050e:	da03      	bge.n	8000518 <__i_vfprintf+0x120>
	    flags &= ~FL_PREC;
 8000510:	2340      	movs	r3, #64	; 0x40
 8000512:	439d      	bics	r5, r3
	    prec = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	9302      	str	r3, [sp, #8]
	if ((TOLOW(c) >= 'e' && TOLOW(c) <= 'g')
 8000518:	2320      	movs	r3, #32
 800051a:	4333      	orrs	r3, r6
 800051c:	001a      	movs	r2, r3
 800051e:	3a65      	subs	r2, #101	; 0x65
 8000520:	2a02      	cmp	r2, #2
 8000522:	d901      	bls.n	8000528 <__i_vfprintf+0x130>
            || TOLOW(c) == 'a'
 8000524:	2b61      	cmp	r3, #97	; 0x61
 8000526:	d118      	bne.n	800055a <__i_vfprintf+0x162>
            SKIP_FLOAT_ARG(flags, ap);
 8000528:	2007      	movs	r0, #7
 800052a:	9a01      	ldr	r2, [sp, #4]
	    pnt = "*float*";
 800052c:	4cb4      	ldr	r4, [pc, #720]	; (8000800 <__i_vfprintf+0x408>)
            SKIP_FLOAT_ARG(flags, ap);
 800052e:	3207      	adds	r2, #7
 8000530:	4382      	bics	r2, r0
 8000532:	3208      	adds	r2, #8
 8000534:	9201      	str	r2, [sp, #4]
	    size = sizeof ("*float*") - 1;
 8000536:	9005      	str	r0, [sp, #20]
                if (!(flags & FL_LPAD)) {
 8000538:	072b      	lsls	r3, r5, #28
 800053a:	d53d      	bpl.n	80005b8 <__i_vfprintf+0x1c0>
 800053c:	003e      	movs	r6, r7
 800053e:	9b04      	ldr	r3, [sp, #16]
 8000540:	9302      	str	r3, [sp, #8]
                while (size--) {
 8000542:	0037      	movs	r7, r6
 8000544:	9b05      	ldr	r3, [sp, #20]
 8000546:	199b      	adds	r3, r3, r6
 8000548:	9304      	str	r3, [sp, #16]
 800054a:	9b04      	ldr	r3, [sp, #16]
 800054c:	003d      	movs	r5, r7
 800054e:	42bb      	cmp	r3, r7
 8000550:	d134      	bne.n	80005bc <__i_vfprintf+0x1c4>
                width -= size;
 8000552:	9b02      	ldr	r3, [sp, #8]
 8000554:	9a05      	ldr	r2, [sp, #20]
 8000556:	1a9c      	subs	r4, r3, r2
 8000558:	e109      	b.n	800076e <__i_vfprintf+0x376>
            if (c == 'c') {
 800055a:	2e63      	cmp	r6, #99	; 0x63
 800055c:	d107      	bne.n	800056e <__i_vfprintf+0x176>
                size = 1;
 800055e:	2301      	movs	r3, #1
                buf[0] = va_arg (ap, int);
 8000560:	9a01      	ldr	r2, [sp, #4]
 8000562:	ac0b      	add	r4, sp, #44	; 0x2c
 8000564:	ca02      	ldmia	r2!, {r1}
                size = 1;
 8000566:	9305      	str	r3, [sp, #20]
                buf[0] = va_arg (ap, int);
 8000568:	7021      	strb	r1, [r4, #0]
 800056a:	9201      	str	r2, [sp, #4]
                goto str_lpad;
 800056c:	e7e4      	b.n	8000538 <__i_vfprintf+0x140>
            } else if (c == 's') {
 800056e:	2e73      	cmp	r6, #115	; 0x73
 8000570:	d12d      	bne.n	80005ce <__i_vfprintf+0x1d6>
                    pnt = va_arg (ap, char *);
 8000572:	9e01      	ldr	r6, [sp, #4]
 8000574:	ce10      	ldmia	r6!, {r4}
                if (!pnt)
 8000576:	2c00      	cmp	r4, #0
 8000578:	d100      	bne.n	800057c <__i_vfprintf+0x184>
                    pnt = "(null)";
 800057a:	4ca2      	ldr	r4, [pc, #648]	; (8000804 <__i_vfprintf+0x40c>)
                size = strnlen (pnt, (flags & FL_PREC) ? (size_t) prec : SIZE_MAX);
 800057c:	9902      	ldr	r1, [sp, #8]
 800057e:	066b      	lsls	r3, r5, #25
 8000580:	d401      	bmi.n	8000586 <__i_vfprintf+0x18e>
 8000582:	2101      	movs	r1, #1
 8000584:	4249      	negs	r1, r1
 8000586:	0020      	movs	r0, r4
 8000588:	f000 f95e 	bl	8000848 <strnlen>
                    pnt = va_arg (ap, char *);
 800058c:	9601      	str	r6, [sp, #4]
                size = strnlen (pnt, (flags & FL_PREC) ? (size_t) prec : SIZE_MAX);
 800058e:	9005      	str	r0, [sp, #20]
 8000590:	e7d2      	b.n	8000538 <__i_vfprintf+0x140>
                        my_putc (' ', stream);
 8000592:	2020      	movs	r0, #32
 8000594:	9903      	ldr	r1, [sp, #12]
 8000596:	9b06      	ldr	r3, [sp, #24]
 8000598:	4798      	blx	r3
 800059a:	2800      	cmp	r0, #0
 800059c:	da00      	bge.n	80005a0 <__i_vfprintf+0x1a8>
 800059e:	e736      	b.n	800040e <__i_vfprintf+0x16>
                        width--;
 80005a0:	9b02      	ldr	r3, [sp, #8]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	9302      	str	r3, [sp, #8]
 80005a6:	9b04      	ldr	r3, [sp, #16]
                    while ((size_t) width > size) {
 80005a8:	9a02      	ldr	r2, [sp, #8]
 80005aa:	18fe      	adds	r6, r7, r3
 80005ac:	9b02      	ldr	r3, [sp, #8]
 80005ae:	1af6      	subs	r6, r6, r3
 80005b0:	9b05      	ldr	r3, [sp, #20]
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d3ed      	bcc.n	8000592 <__i_vfprintf+0x19a>
 80005b6:	e7c4      	b.n	8000542 <__i_vfprintf+0x14a>
 80005b8:	9b04      	ldr	r3, [sp, #16]
 80005ba:	e7f3      	b.n	80005a4 <__i_vfprintf+0x1ac>
                        my_putc (*pnt++, stream);
 80005bc:	1ba3      	subs	r3, r4, r6
 80005be:	5dd8      	ldrb	r0, [r3, r7]
 80005c0:	9903      	ldr	r1, [sp, #12]
 80005c2:	9b06      	ldr	r3, [sp, #24]
 80005c4:	4798      	blx	r3
 80005c6:	3701      	adds	r7, #1
 80005c8:	2800      	cmp	r0, #0
 80005ca:	dabe      	bge.n	800054a <__i_vfprintf+0x152>
 80005cc:	e71f      	b.n	800040e <__i_vfprintf+0x16>
                if (c == 'd' || c == 'i') {
 80005ce:	2e64      	cmp	r6, #100	; 0x64
 80005d0:	d001      	beq.n	80005d6 <__i_vfprintf+0x1de>
 80005d2:	2e69      	cmp	r6, #105	; 0x69
 80005d4:	d135      	bne.n	8000642 <__i_vfprintf+0x24a>
                    arg_to_signed(ap, flags, x_s);
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	421d      	tst	r5, r3
 80005da:	d025      	beq.n	8000628 <__i_vfprintf+0x230>
 80005dc:	05ab      	lsls	r3, r5, #22
 80005de:	d51f      	bpl.n	8000620 <__i_vfprintf+0x228>
 80005e0:	2307      	movs	r3, #7
 80005e2:	9a01      	ldr	r2, [sp, #4]
 80005e4:	3207      	adds	r2, #7
 80005e6:	439a      	bics	r2, r3
 80005e8:	0013      	movs	r3, r2
 80005ea:	6810      	ldr	r0, [r2, #0]
 80005ec:	3308      	adds	r3, #8
 80005ee:	9301      	str	r3, [sp, #4]
                    if (x_s < 0) {
 80005f0:	2800      	cmp	r0, #0
 80005f2:	da03      	bge.n	80005fc <__i_vfprintf+0x204>
                        flags |= FL_NEGATIVE;
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	00db      	lsls	r3, r3, #3
                        x_s = -x_s;
 80005f8:	4240      	negs	r0, r0
                        flags |= FL_NEGATIVE;
 80005fa:	431d      	orrs	r5, r3
                    flags &= ~FL_ALT;
 80005fc:	2310      	movs	r3, #16
 80005fe:	002a      	movs	r2, r5
 8000600:	439a      	bics	r2, r3
 8000602:	9b02      	ldr	r3, [sp, #8]
 8000604:	9208      	str	r2, [sp, #32]
                    if (x_s == 0 && (flags & FL_PREC) && prec == 0)
 8000606:	4303      	orrs	r3, r0
 8000608:	9305      	str	r3, [sp, #20]
 800060a:	d101      	bne.n	8000610 <__i_vfprintf+0x218>
 800060c:	066b      	lsls	r3, r5, #25
 800060e:	d467      	bmi.n	80006e0 <__i_vfprintf+0x2e8>
                        buf_len = __ultoa_invert (x_s, buf, 10) - buf;
 8000610:	220a      	movs	r2, #10
 8000612:	ac0b      	add	r4, sp, #44	; 0x2c
                        buf_len = __ultoa_invert (x, buf, base) - buf;
 8000614:	0021      	movs	r1, r4
 8000616:	f7ff fed3 	bl	80003c0 <__ultoa_invert>
 800061a:	1b03      	subs	r3, r0, r4
 800061c:	9305      	str	r3, [sp, #20]
 800061e:	e05f      	b.n	80006e0 <__i_vfprintf+0x2e8>
                    arg_to_signed(ap, flags, x_s);
 8000620:	9b01      	ldr	r3, [sp, #4]
 8000622:	cb01      	ldmia	r3!, {r0}
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	e7e3      	b.n	80005f0 <__i_vfprintf+0x1f8>
 8000628:	9b01      	ldr	r3, [sp, #4]
 800062a:	cb01      	ldmia	r3!, {r0}
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2380      	movs	r3, #128	; 0x80
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	421d      	tst	r5, r3
 8000634:	d0dc      	beq.n	80005f0 <__i_vfprintf+0x1f8>
 8000636:	05ab      	lsls	r3, r5, #22
 8000638:	d501      	bpl.n	800063e <__i_vfprintf+0x246>
 800063a:	b240      	sxtb	r0, r0
 800063c:	e7d8      	b.n	80005f0 <__i_vfprintf+0x1f8>
 800063e:	b200      	sxth	r0, r0
 8000640:	e7d6      	b.n	80005f0 <__i_vfprintf+0x1f8>
                    if (c == 'u') {
 8000642:	2e75      	cmp	r6, #117	; 0x75
 8000644:	d116      	bne.n	8000674 <__i_vfprintf+0x27c>
                        flags &= ~FL_ALT;
 8000646:	2310      	movs	r3, #16
                        base = 10;
 8000648:	220a      	movs	r2, #10
                        flags &= ~FL_ALT;
 800064a:	439d      	bics	r5, r3
                    arg_to_unsigned(ap, flags, x);
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	421d      	tst	r5, r3
 8000650:	d02f      	beq.n	80006b2 <__i_vfprintf+0x2ba>
 8000652:	05ab      	lsls	r3, r5, #22
 8000654:	d529      	bpl.n	80006aa <__i_vfprintf+0x2b2>
 8000656:	2107      	movs	r1, #7
 8000658:	9b01      	ldr	r3, [sp, #4]
 800065a:	3307      	adds	r3, #7
 800065c:	438b      	bics	r3, r1
 800065e:	0019      	movs	r1, r3
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	3108      	adds	r1, #8
 8000664:	9101      	str	r1, [sp, #4]
                    if (x == 0)
 8000666:	2800      	cmp	r0, #0
 8000668:	d030      	beq.n	80006cc <__i_vfprintf+0x2d4>
                    flags &= ~(FL_PLUS | FL_SPACE);
 800066a:	2306      	movs	r3, #6
 800066c:	439d      	bics	r5, r3
 800066e:	9508      	str	r5, [sp, #32]
                        buf_len = __ultoa_invert (x, buf, base) - buf;
 8000670:	ac0b      	add	r4, sp, #44	; 0x2c
 8000672:	e7cf      	b.n	8000614 <__i_vfprintf+0x21c>
                    } else if (c == 'o') {
 8000674:	2e6f      	cmp	r6, #111	; 0x6f
 8000676:	d015      	beq.n	80006a4 <__i_vfprintf+0x2ac>
                    } else if (c == 'p') {
 8000678:	2e70      	cmp	r6, #112	; 0x70
 800067a:	d103      	bne.n	8000684 <__i_vfprintf+0x28c>
                        flags |= FL_ALT;
 800067c:	2210      	movs	r2, #16
                        c = 'x';
 800067e:	3608      	adds	r6, #8
                        flags |= FL_ALT;
 8000680:	4315      	orrs	r5, r2
                        if (sizeof(void *) > sizeof(int))
 8000682:	e7e3      	b.n	800064c <__i_vfprintf+0x254>
                    } else if (TOLOW(c) == 'x') {
 8000684:	2b78      	cmp	r3, #120	; 0x78
 8000686:	d104      	bne.n	8000692 <__i_vfprintf+0x29a>
                        base = ('x' - c) | 16;
 8000688:	2278      	movs	r2, #120	; 0x78
 800068a:	3b68      	subs	r3, #104	; 0x68
 800068c:	1b92      	subs	r2, r2, r6
 800068e:	431a      	orrs	r2, r3
 8000690:	e7dc      	b.n	800064c <__i_vfprintf+0x254>
                        my_putc('%', stream);
 8000692:	2025      	movs	r0, #37	; 0x25
 8000694:	9903      	ldr	r1, [sp, #12]
 8000696:	9b06      	ldr	r3, [sp, #24]
 8000698:	4798      	blx	r3
 800069a:	2800      	cmp	r0, #0
 800069c:	da00      	bge.n	80006a0 <__i_vfprintf+0x2a8>
 800069e:	e6b6      	b.n	800040e <__i_vfprintf+0x16>
                        my_putc(c, stream);
 80006a0:	3702      	adds	r7, #2
 80006a2:	e0ca      	b.n	800083a <__i_vfprintf+0x442>
                        base = 8;
 80006a4:	2208      	movs	r2, #8
                        c = '\0';
 80006a6:	2600      	movs	r6, #0
 80006a8:	e7d0      	b.n	800064c <__i_vfprintf+0x254>
                    arg_to_unsigned(ap, flags, x);
 80006aa:	9b01      	ldr	r3, [sp, #4]
 80006ac:	cb01      	ldmia	r3!, {r0}
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	e7d9      	b.n	8000666 <__i_vfprintf+0x26e>
 80006b2:	9b01      	ldr	r3, [sp, #4]
 80006b4:	cb01      	ldmia	r3!, {r0}
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	421d      	tst	r5, r3
 80006be:	d0d2      	beq.n	8000666 <__i_vfprintf+0x26e>
 80006c0:	05ab      	lsls	r3, r5, #22
 80006c2:	d501      	bpl.n	80006c8 <__i_vfprintf+0x2d0>
 80006c4:	b2c0      	uxtb	r0, r0
 80006c6:	e7ce      	b.n	8000666 <__i_vfprintf+0x26e>
 80006c8:	b280      	uxth	r0, r0
 80006ca:	e7cc      	b.n	8000666 <__i_vfprintf+0x26e>
                        flags &= ~FL_ALT;
 80006cc:	2316      	movs	r3, #22
 80006ce:	0029      	movs	r1, r5
 80006d0:	4399      	bics	r1, r3
 80006d2:	9108      	str	r1, [sp, #32]
                    if (x == 0 && (flags & FL_PREC) && prec == 0)
 80006d4:	066b      	lsls	r3, r5, #25
 80006d6:	d5cb      	bpl.n	8000670 <__i_vfprintf+0x278>
 80006d8:	9b02      	ldr	r3, [sp, #8]
                        buf_len = 0;
 80006da:	9005      	str	r0, [sp, #20]
                    if (x == 0 && (flags & FL_PREC) && prec == 0)
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1c7      	bne.n	8000670 <__i_vfprintf+0x278>
                if (flags & FL_PREC) {
 80006e0:	9b08      	ldr	r3, [sp, #32]
 80006e2:	065b      	lsls	r3, r3, #25
 80006e4:	d545      	bpl.n	8000772 <__i_vfprintf+0x37a>
                    flags &= ~FL_ZFILL;
 80006e6:	2301      	movs	r3, #1
 80006e8:	9d08      	ldr	r5, [sp, #32]
 80006ea:	9c05      	ldr	r4, [sp, #20]
 80006ec:	439d      	bics	r5, r3
                    if (len < prec) {
 80006ee:	9b02      	ldr	r3, [sp, #8]
 80006f0:	42a3      	cmp	r3, r4
 80006f2:	dd05      	ble.n	8000700 <__i_vfprintf+0x308>
                        if (c == '\0')
 80006f4:	001c      	movs	r4, r3
 80006f6:	2e00      	cmp	r6, #0
 80006f8:	d102      	bne.n	8000700 <__i_vfprintf+0x308>
                            flags &= ~FL_ALT;
 80006fa:	2311      	movs	r3, #17
 80006fc:	9d08      	ldr	r5, [sp, #32]
 80006fe:	439d      	bics	r5, r3
                if (flags & FL_ALT) {
 8000700:	2310      	movs	r3, #16
 8000702:	002a      	movs	r2, r5
 8000704:	401a      	ands	r2, r3
 8000706:	9209      	str	r2, [sp, #36]	; 0x24
 8000708:	421d      	tst	r5, r3
 800070a:	d035      	beq.n	8000778 <__i_vfprintf+0x380>
                    len += 1;
 800070c:	0033      	movs	r3, r6
 800070e:	1e5a      	subs	r2, r3, #1
 8000710:	4193      	sbcs	r3, r2
 8000712:	191b      	adds	r3, r3, r4
 8000714:	1c5c      	adds	r4, r3, #1
                if (!(flags & FL_LPAD)) {
 8000716:	072b      	lsls	r3, r5, #28
 8000718:	d40b      	bmi.n	8000732 <__i_vfprintf+0x33a>
                    if (flags & FL_ZFILL) {
 800071a:	07eb      	lsls	r3, r5, #31
 800071c:	d546      	bpl.n	80007ac <__i_vfprintf+0x3b4>
                        if (len < width) {
 800071e:	9b05      	ldr	r3, [sp, #20]
 8000720:	9302      	str	r3, [sp, #8]
 8000722:	9b04      	ldr	r3, [sp, #16]
 8000724:	42a3      	cmp	r3, r4
 8000726:	dd04      	ble.n	8000732 <__i_vfprintf+0x33a>
                            prec += width - len;
 8000728:	1b1c      	subs	r4, r3, r4
 800072a:	9b05      	ldr	r3, [sp, #20]
 800072c:	18e3      	adds	r3, r4, r3
 800072e:	9c04      	ldr	r4, [sp, #16]
 8000730:	9302      	str	r3, [sp, #8]
                if (flags & FL_ALT) {
 8000732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000734:	2b00      	cmp	r3, #0
 8000736:	d043      	beq.n	80007c0 <__i_vfprintf+0x3c8>
                    my_putc ('0', stream);
 8000738:	2030      	movs	r0, #48	; 0x30
 800073a:	9903      	ldr	r1, [sp, #12]
 800073c:	9b06      	ldr	r3, [sp, #24]
 800073e:	4798      	blx	r3
 8000740:	2800      	cmp	r0, #0
 8000742:	da00      	bge.n	8000746 <__i_vfprintf+0x34e>
 8000744:	e663      	b.n	800040e <__i_vfprintf+0x16>
                    if (c != '\0')
 8000746:	2e00      	cmp	r6, #0
 8000748:	d132      	bne.n	80007b0 <__i_vfprintf+0x3b8>
                    my_putc ('0', stream);
 800074a:	3701      	adds	r7, #1
                    if (flags & FL_NEGATIVE) z = '-';
 800074c:	9708      	str	r7, [sp, #32]
                while (prec > buf_len) {
 800074e:	9b02      	ldr	r3, [sp, #8]
 8000750:	9a08      	ldr	r2, [sp, #32]
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	1a9b      	subs	r3, r3, r2
 8000756:	9a05      	ldr	r2, [sp, #20]
 8000758:	429a      	cmp	r2, r3
 800075a:	db3d      	blt.n	80007d8 <__i_vfprintf+0x3e0>
 800075c:	0016      	movs	r6, r2
 800075e:	9b05      	ldr	r3, [sp, #20]
 8000760:	9a08      	ldr	r2, [sp, #32]
 8000762:	189d      	adds	r5, r3, r2
 8000764:	1bad      	subs	r5, r5, r6
                while (buf_len)
 8000766:	2e00      	cmp	r6, #0
 8000768:	d140      	bne.n	80007ec <__i_vfprintf+0x3f4>
                width -= len;
 800076a:	9b04      	ldr	r3, [sp, #16]
 800076c:	1b1c      	subs	r4, r3, r4
 800076e:	002f      	movs	r7, r5
 8000770:	e054      	b.n	800081c <__i_vfprintf+0x424>
 8000772:	9c05      	ldr	r4, [sp, #20]
 8000774:	9d08      	ldr	r5, [sp, #32]
 8000776:	e7c3      	b.n	8000700 <__i_vfprintf+0x308>
                } else if (flags & (FL_NEGATIVE | FL_PLUS | FL_SPACE)) {
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <__i_vfprintf+0x410>)
 800077a:	402b      	ands	r3, r5
                    len += 1;
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	4193      	sbcs	r3, r2
 8000780:	18e4      	adds	r4, r4, r3
 8000782:	e7c8      	b.n	8000716 <__i_vfprintf+0x31e>
                        my_putc (' ', stream);
 8000784:	2020      	movs	r0, #32
 8000786:	9903      	ldr	r1, [sp, #12]
 8000788:	9b06      	ldr	r3, [sp, #24]
 800078a:	4798      	blx	r3
 800078c:	2800      	cmp	r0, #0
 800078e:	da00      	bge.n	8000792 <__i_vfprintf+0x39a>
 8000790:	e63d      	b.n	800040e <__i_vfprintf+0x16>
                        len++;
 8000792:	9b08      	ldr	r3, [sp, #32]
 8000794:	3301      	adds	r3, #1
 8000796:	9308      	str	r3, [sp, #32]
 8000798:	9a08      	ldr	r2, [sp, #32]
 800079a:	1b3b      	subs	r3, r7, r4
 800079c:	189b      	adds	r3, r3, r2
                    while (len < width) {
 800079e:	9908      	ldr	r1, [sp, #32]
 80007a0:	9a04      	ldr	r2, [sp, #16]
 80007a2:	428a      	cmp	r2, r1
 80007a4:	dcee      	bgt.n	8000784 <__i_vfprintf+0x38c>
 80007a6:	000c      	movs	r4, r1
 80007a8:	001f      	movs	r7, r3
 80007aa:	e7c2      	b.n	8000732 <__i_vfprintf+0x33a>
 80007ac:	9408      	str	r4, [sp, #32]
 80007ae:	e7f3      	b.n	8000798 <__i_vfprintf+0x3a0>
                        my_putc (c, stream);
 80007b0:	3702      	adds	r7, #2
 80007b2:	b2f0      	uxtb	r0, r6
                    my_putc (z, stream);
 80007b4:	9903      	ldr	r1, [sp, #12]
 80007b6:	9b06      	ldr	r3, [sp, #24]
 80007b8:	4798      	blx	r3
 80007ba:	2800      	cmp	r0, #0
 80007bc:	dac6      	bge.n	800074c <__i_vfprintf+0x354>
 80007be:	e626      	b.n	800040e <__i_vfprintf+0x16>
                } else if (flags & (FL_NEGATIVE | FL_PLUS | FL_SPACE)) {
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <__i_vfprintf+0x410>)
 80007c2:	421d      	tst	r5, r3
 80007c4:	d0c2      	beq.n	800074c <__i_vfprintf+0x354>
                    unsigned char z = ' ';
 80007c6:	2020      	movs	r0, #32
                    if (flags & FL_PLUS) z = '+';
 80007c8:	07ab      	lsls	r3, r5, #30
 80007ca:	d500      	bpl.n	80007ce <__i_vfprintf+0x3d6>
 80007cc:	300b      	adds	r0, #11
                    if (flags & FL_NEGATIVE) z = '-';
 80007ce:	056b      	lsls	r3, r5, #21
 80007d0:	d500      	bpl.n	80007d4 <__i_vfprintf+0x3dc>
 80007d2:	202d      	movs	r0, #45	; 0x2d
                    my_putc (z, stream);
 80007d4:	3701      	adds	r7, #1
 80007d6:	e7ed      	b.n	80007b4 <__i_vfprintf+0x3bc>
                    my_putc ('0', stream);
 80007d8:	9b08      	ldr	r3, [sp, #32]
 80007da:	2030      	movs	r0, #48	; 0x30
 80007dc:	3301      	adds	r3, #1
 80007de:	9308      	str	r3, [sp, #32]
 80007e0:	9903      	ldr	r1, [sp, #12]
 80007e2:	9b06      	ldr	r3, [sp, #24]
 80007e4:	4798      	blx	r3
 80007e6:	2800      	cmp	r0, #0
 80007e8:	dab1      	bge.n	800074e <__i_vfprintf+0x356>
 80007ea:	e610      	b.n	800040e <__i_vfprintf+0x16>
                    my_putc (buf[--buf_len], stream);
 80007ec:	ab0b      	add	r3, sp, #44	; 0x2c
 80007ee:	3e01      	subs	r6, #1
 80007f0:	5cf0      	ldrb	r0, [r6, r3]
 80007f2:	9903      	ldr	r1, [sp, #12]
 80007f4:	9b06      	ldr	r3, [sp, #24]
 80007f6:	4798      	blx	r3
 80007f8:	2800      	cmp	r0, #0
 80007fa:	dab0      	bge.n	800075e <__i_vfprintf+0x366>
 80007fc:	e607      	b.n	800040e <__i_vfprintf+0x16>
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	08000a53 	.word	0x08000a53
 8000804:	08000a4c 	.word	0x08000a4c
 8000808:	00000406 	.word	0x00000406
	    my_putc (' ', stream);
 800080c:	2020      	movs	r0, #32
 800080e:	9903      	ldr	r1, [sp, #12]
 8000810:	9b06      	ldr	r3, [sp, #24]
 8000812:	3701      	adds	r7, #1
 8000814:	4798      	blx	r3
 8000816:	2800      	cmp	r0, #0
 8000818:	da00      	bge.n	800081c <__i_vfprintf+0x424>
 800081a:	e5f8      	b.n	800040e <__i_vfprintf+0x16>
	while (width-- > 0) {
 800081c:	1963      	adds	r3, r4, r5
 800081e:	1bdb      	subs	r3, r3, r7
 8000820:	2b00      	cmp	r3, #0
 8000822:	dcf3      	bgt.n	800080c <__i_vfprintf+0x414>
{
 8000824:	9907      	ldr	r1, [sp, #28]
	    c = *fmt++;
 8000826:	780e      	ldrb	r6, [r1, #0]
	    if (!c) goto ret;
 8000828:	2e00      	cmp	r6, #0
 800082a:	d100      	bne.n	800082e <__i_vfprintf+0x436>
 800082c:	e64a      	b.n	80004c4 <__i_vfprintf+0xcc>
	    if (c == '%') {
 800082e:	2e25      	cmp	r6, #37	; 0x25
 8000830:	d100      	bne.n	8000834 <__i_vfprintf+0x43c>
 8000832:	e5ef      	b.n	8000414 <__i_vfprintf+0x1c>
	    c = *fmt++;
 8000834:	1c4b      	adds	r3, r1, #1
 8000836:	9307      	str	r3, [sp, #28]
	    my_putc (c, stream);
 8000838:	3701      	adds	r7, #1
                        my_putc(c, stream);
 800083a:	9903      	ldr	r1, [sp, #12]
 800083c:	9b06      	ldr	r3, [sp, #24]
 800083e:	b2f0      	uxtb	r0, r6
 8000840:	4798      	blx	r3
 8000842:	2800      	cmp	r0, #0
 8000844:	daee      	bge.n	8000824 <__i_vfprintf+0x42c>
 8000846:	e5e2      	b.n	800040e <__i_vfprintf+0x16>

08000848 <strnlen>:
strnlen (const char *str,
	size_t n)
{
  const char *start = str;

  while (n-- > 0 && *str)
 8000848:	0003      	movs	r3, r0
 800084a:	1841      	adds	r1, r0, r1
 800084c:	428b      	cmp	r3, r1
 800084e:	d101      	bne.n	8000854 <strnlen+0xc>
    str++;

  return str - start;
 8000850:	1a18      	subs	r0, r3, r0
}
 8000852:	4770      	bx	lr
  while (n-- > 0 && *str)
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	2a00      	cmp	r2, #0
 8000858:	d0fa      	beq.n	8000850 <strnlen+0x8>
    str++;
 800085a:	3301      	adds	r3, #1
 800085c:	e7f6      	b.n	800084c <strnlen+0x4>

0800085e <sys_semihost_getc>:

#include "semihost-private.h"

int
sys_semihost_getc(FILE *file)
{
 800085e:	b510      	push	{r4, lr}
	(void) file;
	uint8_t ch = sys_semihost(SYS_READC, 0);
 8000860:	2100      	movs	r1, #0
 8000862:	2007      	movs	r0, #7
 8000864:	f000 f80c 	bl	8000880 <sys_semihost>
	return ch;
 8000868:	b2c0      	uxtb	r0, r0
}
 800086a:	bd10      	pop	{r4, pc}

0800086c <sys_semihost_putc>:

#include "semihost-private.h"

int
sys_semihost_putc(char c, FILE *file)
{
 800086c:	b507      	push	{r0, r1, r2, lr}
 800086e:	466b      	mov	r3, sp
 8000870:	71d8      	strb	r0, [r3, #7]
	(void) file;
	sys_semihost(SYS_WRITEC, (uintptr_t) &c);
 8000872:	1dd9      	adds	r1, r3, #7
 8000874:	2003      	movs	r0, #3
 8000876:	f000 f803 	bl	8000880 <sys_semihost>
	return (unsigned char) c;
 800087a:	466b      	mov	r3, sp
 800087c:	79d8      	ldrb	r0, [r3, #7]
}
 800087e:	bd0e      	pop	{r1, r2, r3, pc}

08000880 <sys_semihost>:
#ifdef __thumb__
	.thumb
#endif
sys_semihost:
#if __ARM_ARCH_PROFILE == 'M'
	bkpt #0xab
 8000880:	beab      	bkpt	0x00ab
	svc #0xab
#else
	svc #0x123456
#endif
#endif
	bx lr
 8000882:	4770      	bx	lr

08000884 <__gnu_thumb1_case_uqi>:
 8000884:	b402      	push	{r1}
 8000886:	4671      	mov	r1, lr
 8000888:	0849      	lsrs	r1, r1, #1
 800088a:	0049      	lsls	r1, r1, #1
 800088c:	5c09      	ldrb	r1, [r1, r0]
 800088e:	0049      	lsls	r1, r1, #1
 8000890:	448e      	add	lr, r1
 8000892:	bc02      	pop	{r1}
 8000894:	4770      	bx	lr
 8000896:	46c0      	nop			; (mov r8, r8)

08000898 <__udivsi3>:
 8000898:	2200      	movs	r2, #0
 800089a:	0843      	lsrs	r3, r0, #1
 800089c:	428b      	cmp	r3, r1
 800089e:	d374      	bcc.n	800098a <__udivsi3+0xf2>
 80008a0:	0903      	lsrs	r3, r0, #4
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d35f      	bcc.n	8000966 <__udivsi3+0xce>
 80008a6:	0a03      	lsrs	r3, r0, #8
 80008a8:	428b      	cmp	r3, r1
 80008aa:	d344      	bcc.n	8000936 <__udivsi3+0x9e>
 80008ac:	0b03      	lsrs	r3, r0, #12
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d328      	bcc.n	8000904 <__udivsi3+0x6c>
 80008b2:	0c03      	lsrs	r3, r0, #16
 80008b4:	428b      	cmp	r3, r1
 80008b6:	d30d      	bcc.n	80008d4 <__udivsi3+0x3c>
 80008b8:	22ff      	movs	r2, #255	; 0xff
 80008ba:	0209      	lsls	r1, r1, #8
 80008bc:	ba12      	rev	r2, r2
 80008be:	0c03      	lsrs	r3, r0, #16
 80008c0:	428b      	cmp	r3, r1
 80008c2:	d302      	bcc.n	80008ca <__udivsi3+0x32>
 80008c4:	1212      	asrs	r2, r2, #8
 80008c6:	0209      	lsls	r1, r1, #8
 80008c8:	d065      	beq.n	8000996 <__udivsi3+0xfe>
 80008ca:	0b03      	lsrs	r3, r0, #12
 80008cc:	428b      	cmp	r3, r1
 80008ce:	d319      	bcc.n	8000904 <__udivsi3+0x6c>
 80008d0:	e000      	b.n	80008d4 <__udivsi3+0x3c>
 80008d2:	0a09      	lsrs	r1, r1, #8
 80008d4:	0bc3      	lsrs	r3, r0, #15
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d301      	bcc.n	80008de <__udivsi3+0x46>
 80008da:	03cb      	lsls	r3, r1, #15
 80008dc:	1ac0      	subs	r0, r0, r3
 80008de:	4152      	adcs	r2, r2
 80008e0:	0b83      	lsrs	r3, r0, #14
 80008e2:	428b      	cmp	r3, r1
 80008e4:	d301      	bcc.n	80008ea <__udivsi3+0x52>
 80008e6:	038b      	lsls	r3, r1, #14
 80008e8:	1ac0      	subs	r0, r0, r3
 80008ea:	4152      	adcs	r2, r2
 80008ec:	0b43      	lsrs	r3, r0, #13
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d301      	bcc.n	80008f6 <__udivsi3+0x5e>
 80008f2:	034b      	lsls	r3, r1, #13
 80008f4:	1ac0      	subs	r0, r0, r3
 80008f6:	4152      	adcs	r2, r2
 80008f8:	0b03      	lsrs	r3, r0, #12
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d301      	bcc.n	8000902 <__udivsi3+0x6a>
 80008fe:	030b      	lsls	r3, r1, #12
 8000900:	1ac0      	subs	r0, r0, r3
 8000902:	4152      	adcs	r2, r2
 8000904:	0ac3      	lsrs	r3, r0, #11
 8000906:	428b      	cmp	r3, r1
 8000908:	d301      	bcc.n	800090e <__udivsi3+0x76>
 800090a:	02cb      	lsls	r3, r1, #11
 800090c:	1ac0      	subs	r0, r0, r3
 800090e:	4152      	adcs	r2, r2
 8000910:	0a83      	lsrs	r3, r0, #10
 8000912:	428b      	cmp	r3, r1
 8000914:	d301      	bcc.n	800091a <__udivsi3+0x82>
 8000916:	028b      	lsls	r3, r1, #10
 8000918:	1ac0      	subs	r0, r0, r3
 800091a:	4152      	adcs	r2, r2
 800091c:	0a43      	lsrs	r3, r0, #9
 800091e:	428b      	cmp	r3, r1
 8000920:	d301      	bcc.n	8000926 <__udivsi3+0x8e>
 8000922:	024b      	lsls	r3, r1, #9
 8000924:	1ac0      	subs	r0, r0, r3
 8000926:	4152      	adcs	r2, r2
 8000928:	0a03      	lsrs	r3, r0, #8
 800092a:	428b      	cmp	r3, r1
 800092c:	d301      	bcc.n	8000932 <__udivsi3+0x9a>
 800092e:	020b      	lsls	r3, r1, #8
 8000930:	1ac0      	subs	r0, r0, r3
 8000932:	4152      	adcs	r2, r2
 8000934:	d2cd      	bcs.n	80008d2 <__udivsi3+0x3a>
 8000936:	09c3      	lsrs	r3, r0, #7
 8000938:	428b      	cmp	r3, r1
 800093a:	d301      	bcc.n	8000940 <__udivsi3+0xa8>
 800093c:	01cb      	lsls	r3, r1, #7
 800093e:	1ac0      	subs	r0, r0, r3
 8000940:	4152      	adcs	r2, r2
 8000942:	0983      	lsrs	r3, r0, #6
 8000944:	428b      	cmp	r3, r1
 8000946:	d301      	bcc.n	800094c <__udivsi3+0xb4>
 8000948:	018b      	lsls	r3, r1, #6
 800094a:	1ac0      	subs	r0, r0, r3
 800094c:	4152      	adcs	r2, r2
 800094e:	0943      	lsrs	r3, r0, #5
 8000950:	428b      	cmp	r3, r1
 8000952:	d301      	bcc.n	8000958 <__udivsi3+0xc0>
 8000954:	014b      	lsls	r3, r1, #5
 8000956:	1ac0      	subs	r0, r0, r3
 8000958:	4152      	adcs	r2, r2
 800095a:	0903      	lsrs	r3, r0, #4
 800095c:	428b      	cmp	r3, r1
 800095e:	d301      	bcc.n	8000964 <__udivsi3+0xcc>
 8000960:	010b      	lsls	r3, r1, #4
 8000962:	1ac0      	subs	r0, r0, r3
 8000964:	4152      	adcs	r2, r2
 8000966:	08c3      	lsrs	r3, r0, #3
 8000968:	428b      	cmp	r3, r1
 800096a:	d301      	bcc.n	8000970 <__udivsi3+0xd8>
 800096c:	00cb      	lsls	r3, r1, #3
 800096e:	1ac0      	subs	r0, r0, r3
 8000970:	4152      	adcs	r2, r2
 8000972:	0883      	lsrs	r3, r0, #2
 8000974:	428b      	cmp	r3, r1
 8000976:	d301      	bcc.n	800097c <__udivsi3+0xe4>
 8000978:	008b      	lsls	r3, r1, #2
 800097a:	1ac0      	subs	r0, r0, r3
 800097c:	4152      	adcs	r2, r2
 800097e:	0843      	lsrs	r3, r0, #1
 8000980:	428b      	cmp	r3, r1
 8000982:	d301      	bcc.n	8000988 <__udivsi3+0xf0>
 8000984:	004b      	lsls	r3, r1, #1
 8000986:	1ac0      	subs	r0, r0, r3
 8000988:	4152      	adcs	r2, r2
 800098a:	1a41      	subs	r1, r0, r1
 800098c:	d200      	bcs.n	8000990 <__udivsi3+0xf8>
 800098e:	4601      	mov	r1, r0
 8000990:	4152      	adcs	r2, r2
 8000992:	4610      	mov	r0, r2
 8000994:	4770      	bx	lr
 8000996:	e7ff      	b.n	8000998 <__udivsi3+0x100>
 8000998:	b501      	push	{r0, lr}
 800099a:	2000      	movs	r0, #0
 800099c:	f000 f806 	bl	80009ac <__aeabi_idiv0>
 80009a0:	bd02      	pop	{r1, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)

080009a4 <__aeabi_uidivmod>:
 80009a4:	2900      	cmp	r1, #0
 80009a6:	d0f7      	beq.n	8000998 <__udivsi3+0x100>
 80009a8:	e776      	b.n	8000898 <__udivsi3>
 80009aa:	4770      	bx	lr

080009ac <__aeabi_idiv0>:
 80009ac:	4770      	bx	lr
 80009ae:	46c0      	nop			; (mov r8, r8)
